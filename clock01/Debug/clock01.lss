
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001c86  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800106  00800106  00001d20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002449  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00004381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169e  00000000  00000000  00004b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  000061a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b7f  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002523  00000000  00000000  000073cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000098f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_16>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_21>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	74 09       	sbc	r23, r4
      6a:	77 09       	sbc	r23, r7
      6c:	7a 09       	sbc	r23, r10
      6e:	7d 09       	sbc	r23, r13
      70:	80 09       	sbc	r24, r0
      72:	83 09       	sbc	r24, r3
      74:	86 09       	sbc	r24, r6
      76:	7e 0b       	sbc	r23, r30
      78:	86 0b       	sbc	r24, r22
      7a:	8a 0b       	sbc	r24, r26
      7c:	90 0b       	sbc	r25, r16
      7e:	95 0b       	sbc	r25, r21
      80:	9a 0b       	sbc	r25, r26
      82:	a1 0b       	sbc	r26, r17
      84:	a9 0b       	sbc	r26, r25
      86:	b0 0b       	sbc	r27, r16
      88:	b8 0b       	sbc	r27, r24
      8a:	c6 0b       	sbc	r28, r22
      8c:	c6 0b       	sbc	r28, r22
      8e:	c6 0b       	sbc	r28, r22
      90:	c6 0b       	sbc	r28, r22
      92:	c6 0b       	sbc	r28, r22
      94:	c6 0b       	sbc	r28, r22
      96:	c6 0b       	sbc	r28, r22
      98:	c6 0b       	sbc	r28, r22
      9a:	c6 0b       	sbc	r28, r22
      9c:	c6 0b       	sbc	r28, r22
      9e:	c6 0b       	sbc	r28, r22
      a0:	c6 0b       	sbc	r28, r22
      a2:	c6 0b       	sbc	r28, r22
      a4:	c6 0b       	sbc	r28, r22
      a6:	c6 0b       	sbc	r28, r22
      a8:	c6 0b       	sbc	r28, r22
      aa:	c6 0b       	sbc	r28, r22
      ac:	c6 0b       	sbc	r28, r22
      ae:	c6 0b       	sbc	r28, r22
      b0:	c6 0b       	sbc	r28, r22
      b2:	c6 0b       	sbc	r28, r22
      b4:	c6 0b       	sbc	r28, r22
      b6:	c6 0b       	sbc	r28, r22
      b8:	c6 0b       	sbc	r28, r22
      ba:	c6 0b       	sbc	r28, r22
      bc:	c6 0b       	sbc	r28, r22
      be:	c6 0b       	sbc	r28, r22
      c0:	c6 0b       	sbc	r28, r22
      c2:	c6 0b       	sbc	r28, r22
      c4:	c6 0b       	sbc	r28, r22
      c6:	c6 0b       	sbc	r28, r22
      c8:	c6 0b       	sbc	r28, r22
      ca:	c6 0b       	sbc	r28, r22
      cc:	c6 0b       	sbc	r28, r22
      ce:	c6 0b       	sbc	r28, r22
      d0:	c4 0b       	sbc	r28, r20
      d2:	c6 0b       	sbc	r28, r22
      d4:	c6 0b       	sbc	r28, r22
      d6:	c6 0b       	sbc	r28, r22
      d8:	c6 0b       	sbc	r28, r22
      da:	c6 0b       	sbc	r28, r22
      dc:	c6 0b       	sbc	r28, r22
      de:	c6 0b       	sbc	r28, r22
      e0:	c6 0b       	sbc	r28, r22
      e2:	c6 0b       	sbc	r28, r22
      e4:	c6 0b       	sbc	r28, r22
      e6:	c6 0b       	sbc	r28, r22
      e8:	c6 0b       	sbc	r28, r22
      ea:	c6 0b       	sbc	r28, r22
      ec:	c6 0b       	sbc	r28, r22
      ee:	c6 0b       	sbc	r28, r22
      f0:	c6 0b       	sbc	r28, r22
      f2:	c6 0b       	sbc	r28, r22
      f4:	c6 0b       	sbc	r28, r22
      f6:	c6 0b       	sbc	r28, r22
      f8:	c6 0b       	sbc	r28, r22
      fa:	c6 0b       	sbc	r28, r22
      fc:	c6 0b       	sbc	r28, r22
      fe:	c6 0b       	sbc	r28, r22
     100:	c6 0b       	sbc	r28, r22
     102:	c6 0b       	sbc	r28, r22
     104:	c6 0b       	sbc	r28, r22
     106:	c6 0b       	sbc	r28, r22
     108:	c6 0b       	sbc	r28, r22
     10a:	c6 0b       	sbc	r28, r22
     10c:	c6 0b       	sbc	r28, r22
     10e:	c6 0b       	sbc	r28, r22
     110:	c6 0b       	sbc	r28, r22
     112:	c6 0b       	sbc	r28, r22
     114:	c6 0b       	sbc	r28, r22
     116:	c6 0b       	sbc	r28, r22
     118:	c6 0b       	sbc	r28, r22
     11a:	c6 0b       	sbc	r28, r22
     11c:	c6 0b       	sbc	r28, r22
     11e:	c6 0b       	sbc	r28, r22
     120:	c6 0b       	sbc	r28, r22
     122:	c6 0b       	sbc	r28, r22
     124:	c6 0b       	sbc	r28, r22
     126:	c6 0b       	sbc	r28, r22
     128:	c6 0b       	sbc	r28, r22
     12a:	c6 0b       	sbc	r28, r22
     12c:	c6 0b       	sbc	r28, r22
     12e:	c6 0b       	sbc	r28, r22
     130:	c6 0b       	sbc	r28, r22
     132:	c6 0b       	sbc	r28, r22
     134:	c6 0b       	sbc	r28, r22
     136:	c6 0b       	sbc	r28, r22
     138:	c6 0b       	sbc	r28, r22
     13a:	c6 0b       	sbc	r28, r22
     13c:	c6 0b       	sbc	r28, r22
     13e:	c6 0b       	sbc	r28, r22
     140:	c6 0b       	sbc	r28, r22
     142:	c6 0b       	sbc	r28, r22
     144:	c6 0b       	sbc	r28, r22
     146:	c6 0b       	sbc	r28, r22
     148:	c6 0b       	sbc	r28, r22
     14a:	c6 0b       	sbc	r28, r22
     14c:	c6 0b       	sbc	r28, r22
     14e:	c6 0b       	sbc	r28, r22
     150:	c6 0b       	sbc	r28, r22
     152:	c6 0b       	sbc	r28, r22
     154:	c6 0b       	sbc	r28, r22
     156:	c6 0b       	sbc	r28, r22
     158:	c6 0b       	sbc	r28, r22
     15a:	c6 0b       	sbc	r28, r22
     15c:	c6 0b       	sbc	r28, r22
     15e:	c6 0b       	sbc	r28, r22
     160:	bf 0b       	sbc	r27, r31

00000162 <__ctors_start>:
     162:	8c 09       	sbc	r24, r12

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e6 e8       	ldi	r30, 0x86	; 134
     178:	fc e1       	ldi	r31, 0x1C	; 28
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a6 30       	cpi	r26, 0x06	; 6
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	a6 e0       	ldi	r26, 0x06	; 6
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	a1 32       	cpi	r26, 0x21	; 33
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	c2 eb       	ldi	r28, 0xB2	; 178
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__tablejump2__>
     1a6:	c1 3b       	cpi	r28, 0xB1	; 177
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 34 09 	call	0x1268	; 0x1268 <main>
     1b0:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_Z5resetPVhS0_h>:
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		return temperature_byte;
	}
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	dc 01       	movw	r26, r24
     1be:	fb 01       	movw	r30, r22
     1c0:	80 81       	ld	r24, Z
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z5resetPVhS0_h+0x14>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	4a 95       	dec	r20
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_Z5resetPVhS0_h+0x10>
     1d0:	82 2b       	or	r24, r18
     1d2:	80 83       	st	Z, r24
     1d4:	8c 91       	ld	r24, X
     1d6:	92 2f       	mov	r25, r18
     1d8:	90 95       	com	r25
     1da:	89 23       	and	r24, r25
     1dc:	8c 93       	st	X, r24
     1de:	c7 ee       	ldi	r28, 0xE7	; 231
     1e0:	d3 e0       	ldi	r29, 0x03	; 3
     1e2:	21 97       	sbiw	r28, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z5resetPVhS0_h+0x2a>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z5resetPVhS0_h+0x30>
     1e8:	00 00       	nop
     1ea:	8c 91       	ld	r24, X
     1ec:	28 2b       	or	r18, r24
     1ee:	2c 93       	st	X, r18
     1f0:	80 81       	ld	r24, Z
     1f2:	98 23       	and	r25, r24
     1f4:	90 83       	st	Z, r25
     1f6:	8f ec       	ldi	r24, 0xCF	; 207
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z5resetPVhS0_h+0x42>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z5resetPVhS0_h+0x48>
     200:	00 00       	nop
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_Z11SendToPort1PVhS0_h>:
     208:	dc 01       	movw	r26, r24
     20a:	fb 01       	movw	r30, r22
     20c:	f8 94       	cli
     20e:	90 81       	ld	r25, Z
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z11SendToPort1PVhS0_h+0x12>
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	4a 95       	dec	r20
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z11SendToPort1PVhS0_h+0xe>
     21e:	92 2b       	or	r25, r18
     220:	90 83       	st	Z, r25
     222:	9c 91       	ld	r25, X
     224:	20 95       	com	r18
     226:	92 23       	and	r25, r18
     228:	9c 93       	st	X, r25
     22a:	8a e0       	ldi	r24, 0x0A	; 10
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <_Z11SendToPort1PVhS0_h+0x24>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_Z11SendToPort1PVhS0_h+0x2a>
     232:	80 81       	ld	r24, Z
     234:	28 23       	and	r18, r24
     236:	20 83       	st	Z, r18
     238:	8a ec       	ldi	r24, 0xCA	; 202
     23a:	8a 95       	dec	r24
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z11SendToPort1PVhS0_h+0x32>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z11SendToPort1PVhS0_h+0x38>
     240:	08 95       	ret

00000242 <_Z11SendToPort0PVhS0_h>:
     242:	dc 01       	movw	r26, r24
     244:	fb 01       	movw	r30, r22
     246:	f8 94       	cli
     248:	90 81       	ld	r25, Z
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11SendToPort0PVhS0_h+0x12>
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	4a 95       	dec	r20
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11SendToPort0PVhS0_h+0xe>
     258:	92 2b       	or	r25, r18
     25a:	90 83       	st	Z, r25
     25c:	9c 91       	ld	r25, X
     25e:	20 95       	com	r18
     260:	92 23       	and	r25, r18
     262:	9c 93       	st	X, r25
     264:	8a ea       	ldi	r24, 0xAA	; 170
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <_Z11SendToPort0PVhS0_h+0x24>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z11SendToPort0PVhS0_h+0x2a>
     26c:	80 81       	ld	r24, Z
     26e:	28 23       	and	r18, r24
     270:	20 83       	st	Z, r18
     272:	8a e2       	ldi	r24, 0x2A	; 42
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <_Z11SendToPort0PVhS0_h+0x32>
     278:	00 c0       	rjmp	.+0      	; 0x27a <_Z11SendToPort0PVhS0_h+0x38>
     27a:	08 95       	ret

0000027c <_Z14SendByteToPortPVhS0_hh>:
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	6c 01       	movw	r12, r24
     28e:	7b 01       	movw	r14, r22
     290:	04 2f       	mov	r16, r20
     292:	12 2f       	mov	r17, r18
     294:	c8 e0       	ldi	r28, 0x08	; 8
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	10 ff       	sbrs	r17, 0
     29a:	06 c0       	rjmp	.+12     	; 0x2a8 <_Z14SendByteToPortPVhS0_hh+0x2c>
     29c:	40 2f       	mov	r20, r16
     29e:	b7 01       	movw	r22, r14
     2a0:	c6 01       	movw	r24, r12
     2a2:	0e 94 04 01 	call	0x208	; 0x208 <_Z11SendToPort1PVhS0_h>
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <_Z14SendByteToPortPVhS0_hh+0x36>
     2a8:	40 2f       	mov	r20, r16
     2aa:	b7 01       	movw	r22, r14
     2ac:	c6 01       	movw	r24, r12
     2ae:	0e 94 21 01 	call	0x242	; 0x242 <_Z11SendToPort0PVhS0_h>
     2b2:	16 95       	lsr	r17
     2b4:	21 97       	sbiw	r28, 0x01	; 1
     2b6:	81 f7       	brne	.-32     	; 0x298 <_Z14SendByteToPortPVhS0_hh+0x1c>
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	db 01       	movw	r26, r22
     2e4:	f8 94       	cli
     2e6:	ee 20       	and	r14, r14
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x22>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xc2>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	02 2e       	mov	r0, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2e>
     2f4:	66 0f       	add	r22, r22
     2f6:	77 1f       	adc	r23, r23
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2a>
     2fc:	a6 2e       	mov	r10, r22
     2fe:	b6 2e       	mov	r11, r22
     300:	b0 94       	com	r11
     302:	68 01       	movw	r12, r16
     304:	0e 0d       	add	r16, r14
     306:	11 1d       	adc	r17, r1
     308:	e7 e0       	ldi	r30, 0x07	; 7
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	7f 01       	movw	r14, r30
     30e:	e2 1a       	sub	r14, r18
     310:	f1 08       	sbc	r15, r1
     312:	46 01       	movw	r8, r12
     314:	e6 01       	movw	r28, r12
     316:	18 82       	st	Y, r1
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	2c 91       	ld	r18, X
     31e:	2a 29       	or	r18, r10
     320:	2c 93       	st	X, r18
     322:	ec 01       	movw	r28, r24
     324:	28 81       	ld	r18, Y
     326:	2b 21       	and	r18, r11
     328:	28 83       	st	Y, r18
     32a:	d5 e0       	ldi	r29, 0x05	; 5
     32c:	da 95       	dec	r29
     32e:	f1 f7       	brne	.-4      	; 0x32c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x62>
     330:	00 00       	nop
     332:	2c 91       	ld	r18, X
     334:	2b 21       	and	r18, r11
     336:	2c 93       	st	X, r18
     338:	2a e2       	ldi	r18, 0x2A	; 42
     33a:	2a 95       	dec	r18
     33c:	f1 f7       	brne	.-4      	; 0x33a <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x70>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x76>
     340:	ea 01       	movw	r28, r20
     342:	28 81       	ld	r18, Y
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	26 23       	and	r18, r22
     348:	37 23       	and	r19, r23
     34a:	0e 2c       	mov	r0, r14
     34c:	02 c0       	rjmp	.+4      	; 0x352 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x88>
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	0a 94       	dec	r0
     354:	e2 f7       	brpl	.-8      	; 0x34e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x84>
     356:	e4 01       	movw	r28, r8
     358:	38 81       	ld	r19, Y
     35a:	23 2b       	or	r18, r19
     35c:	e7 30       	cpi	r30, 0x07	; 7
     35e:	f1 05       	cpc	r31, r1
     360:	14 f0       	brlt	.+4      	; 0x366 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x9c>
     362:	28 83       	st	Y, r18
     364:	05 c0       	rjmp	.+10     	; 0x370 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	35 95       	asr	r19
     36a:	27 95       	ror	r18
     36c:	e4 01       	movw	r28, r8
     36e:	28 83       	st	Y, r18
     370:	d5 e7       	ldi	r29, 0x75	; 117
     372:	da 95       	dec	r29
     374:	f1 f7       	brne	.-4      	; 0x372 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa8>
     376:	00 00       	nop
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	e8 30       	cpi	r30, 0x08	; 8
     37c:	f1 05       	cpc	r31, r1
     37e:	71 f6       	brne	.-100    	; 0x31c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
     380:	ef ef       	ldi	r30, 0xFF	; 255
     382:	ce 1a       	sub	r12, r30
     384:	de 0a       	sbc	r13, r30
     386:	0c 15       	cp	r16, r12
     388:	1d 05       	cpc	r17, r13
     38a:	19 f6       	brne	.-122    	; 0x312 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x48>
     38c:	78 94       	sei
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	08 95       	ret

000003a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	8b 01       	movw	r16, r22
     3b6:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     3b8:	42 2f       	mov	r20, r18
     3ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3be:	2c ec       	ldi	r18, 0xCC	; 204
     3c0:	4f 2d       	mov	r20, r15
     3c2:	b8 01       	movw	r22, r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3ca:	24 e4       	ldi	r18, 0x44	; 68
     3cc:	4f 2d       	mov	r20, r15
     3ce:	b8 01       	movw	r22, r16
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
	}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
     3f8:	6b 01       	movw	r12, r22
     3fa:	5a 01       	movw	r10, r20
     3fc:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3fe:	42 2f       	mov	r20, r18
     400:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     404:	2c ec       	ldi	r18, 0xCC	; 204
     406:	4f 2d       	mov	r20, r15
     408:	b6 01       	movw	r22, r12
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     410:	2e eb       	ldi	r18, 0xBE	; 190
     412:	4f 2d       	mov	r20, r15
     414:	b6 01       	movw	r22, r12
     416:	ce 01       	movw	r24, r28
     418:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     41c:	0f 2e       	mov	r0, r31
     41e:	f9 e0       	ldi	r31, 0x09	; 9
     420:	ef 2e       	mov	r14, r31
     422:	f0 2d       	mov	r31, r0
     424:	2f 2d       	mov	r18, r15
     426:	a5 01       	movw	r20, r10
     428:	b6 01       	movw	r22, r12
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	08 95       	ret

00000446 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
		AdcClass::Data = ADC;
     454:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     458:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     45c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_ZN8AdcClass4DataE+0x1>
     460:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZN8AdcClass4DataE>
		AdcClass::DataReady = true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN8AdcClass9DataReadyE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	8a e1       	ldi	r24, 0x1A	; 26
     46c:	8a 95       	dec	r24
     46e:	f1 f7       	brne	.-4      	; 0x46c <__vector_21+0x26>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	af 93       	push	r26
     49c:	bf 93       	push	r27
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
	static uint8_t iov = 0;
	static uint8_t opacityDelay = 0;

	if (opacityDelay == MAXGRADES)
     4a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZZ11__vector_16E12opacityDelay>
     4a6:	8f 30       	cpi	r24, 0x0F	; 15
     4a8:	09 f5       	brne	.+66     	; 0x4ec <__vector_16+0x6c>
	{
		ClrScr();
     4aa:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z6ClrScrv>
		Display7seg(screen_arr[iov], iov == screen_arr[4]);
     4ae:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <screen_arr+0x4>
     4b2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZZ11__vector_16E3iov>
     4b6:	e9 2f       	mov	r30, r25
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e7 5e       	subi	r30, 0xE7	; 231
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	29 13       	cpse	r18, r25
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_Z11Display7seghb>
		NextDigit(4 - iov);
     4ca:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZZ11__vector_16E3iov>
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	89 1b       	sub	r24, r25
     4d2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <_Z9NextDigith>
		iov += 1;
     4d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ11__vector_16E3iov>
     4da:	8f 5f       	subi	r24, 0xFF	; 255
		if (iov > 3)
     4dc:	84 30       	cpi	r24, 0x04	; 4
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <__vector_16+0x66>
	if (opacityDelay == MAXGRADES)
	{
		ClrScr();
		Display7seg(screen_arr[iov], iov == screen_arr[4]);
		NextDigit(4 - iov);
		iov += 1;
     4e0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ11__vector_16E3iov>
     4e4:	11 c0       	rjmp	.+34     	; 0x508 <__vector_16+0x88>
		if (iov > 3)
			iov = 0;
     4e6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <_ZZ11__vector_16E3iov>
     4ea:	0e c0       	rjmp	.+28     	; 0x508 <__vector_16+0x88>
	}
	else if (opacityDelay == (MAXGRADES - opacity))
     4ec:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <opacity>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2f e0       	ldi	r18, 0x0F	; 15
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	24 1b       	sub	r18, r20
     4f8:	31 09       	sbc	r19, r1
     4fa:	47 fd       	sbrc	r20, 7
     4fc:	33 95       	inc	r19
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	11 f4       	brne	.+4      	; 0x508 <__vector_16+0x88>
	{
		ClrScr();
     504:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z6ClrScrv>
	}
	opacityDelay = opacityDelay < MAXGRADES ? opacityDelay + 1 : 0;
     508:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZZ11__vector_16E12opacityDelay>
     50c:	8f 30       	cpi	r24, 0x0F	; 15
     50e:	10 f4       	brcc	.+4      	; 0x514 <__vector_16+0x94>
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <__vector_16+0x96>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZZ11__vector_16E12opacityDelay>
}
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	bf 91       	pop	r27
     520:	af 91       	pop	r26
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	7f 91       	pop	r23
     528:	6f 91       	pop	r22
     52a:	5f 91       	pop	r21
     52c:	4f 91       	pop	r20
     52e:	3f 91       	pop	r19
     530:	2f 91       	pop	r18
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <_Z21EnableTimer0Interruptv>:

volatile void EnableTimer0Interrupt()
{
	TIMSK0 |= 1 << TOIE0;
     53c:	ee e6       	ldi	r30, 0x6E	; 110
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	81 60       	ori	r24, 0x01	; 1
     544:	80 83       	st	Z, r24
	TCCR0B = 1; //Prescaler
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	85 bd       	out	0x25, r24	; 37
     54a:	08 95       	ret

0000054c <_Z10resetTimerv>:
}

void resetTimer()
{
	screen_arr[4] = 2; // DP position
     54c:	e9 e1       	ldi	r30, 0x19	; 25
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 0;
     554:	13 82       	std	Z+3, r1	; 0x03
	screen_arr[2] = 0;
     556:	12 82       	std	Z+2, r1	; 0x02
	screen_arr[1] = 0;
     558:	11 82       	std	Z+1, r1	; 0x01
	screen_arr[0] = 0;
     55a:	10 82       	st	Z, r1
     55c:	08 95       	ret

0000055e <_Z6buzzerb>:
}

void buzzer(bool on)
{
	DDRB |= 1 << PORTB6;
     55e:	26 9a       	sbi	0x04, 6	; 4

	if (on)
     560:	88 23       	and	r24, r24
     562:	11 f0       	breq	.+4      	; 0x568 <_Z6buzzerb+0xa>
	{
		PORTB |= 1 << PORTB6;
     564:	2e 9a       	sbi	0x05, 6	; 5
     566:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PORTB6);
     568:	2e 98       	cbi	0x05, 6	; 5
     56a:	08 95       	ret

0000056c <_Z10doubleBeepv>:
	}
}

void doubleBeep()
{
	buzzer(true);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     572:	2f e7       	ldi	r18, 0x7F	; 127
     574:	88 e3       	ldi	r24, 0x38	; 56
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <_Z10doubleBeepv+0xc>
     580:	00 c0       	rjmp	.+0      	; 0x582 <_Z10doubleBeepv+0x16>
     582:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     58a:	2f e7       	ldi	r18, 0x7F	; 127
     58c:	88 e3       	ldi	r24, 0x38	; 56
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <_Z10doubleBeepv+0x24>
     598:	00 c0       	rjmp	.+0      	; 0x59a <_Z10doubleBeepv+0x2e>
     59a:	00 00       	nop
	_delay_ms(50);
	buzzer(true);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5a2:	2f e7       	ldi	r18, 0x7F	; 127
     5a4:	88 e3       	ldi	r24, 0x38	; 56
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <_Z10doubleBeepv+0x3c>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <_Z10doubleBeepv+0x46>
     5b2:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5ba:	08 95       	ret

000005bc <_Z8longBeepv>:
}

void longBeep()
{
	buzzer(true);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	9c e0       	ldi	r25, 0x0C	; 12
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <_Z8longBeepv+0xc>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_Z8longBeepv+0x16>
     5d2:	00 00       	nop
	_delay_ms(500);
	buzzer(false);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5da:	08 95       	ret

000005dc <_Z10singleBeepv>:
}

void singleBeep()
{
	buzzer(true);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5e2:	2f ef       	ldi	r18, 0xFF	; 255
     5e4:	80 e7       	ldi	r24, 0x70	; 112
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <_Z10singleBeepv+0xc>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_Z10singleBeepv+0x16>
     5f2:	00 00       	nop
	_delay_ms(100);
	buzzer(false);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5fa:	08 95       	ret

000005fc <_Z14displaySecondsj>:
		}
	}
}

void displaySeconds(uint16_t secondsTotal)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ac 01       	movw	r20, r24
	screen_arr[0] = secondsTotal % 10;
     602:	9c 01       	movw	r18, r24
     604:	ad ec       	ldi	r26, 0xCD	; 205
     606:	bc ec       	ldi	r27, 0xCC	; 204
     608:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	9c 01       	movw	r18, r24
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	9a 01       	movw	r18, r20
     630:	28 1b       	sub	r18, r24
     632:	39 0b       	sbc	r19, r25
     634:	c9 e1       	ldi	r28, 0x19	; 25
     636:	d1 e0       	ldi	r29, 0x01	; 1
     638:	28 83       	st	Y, r18
	screen_arr[1] = secondsTotal % 60 / 10;
     63a:	9a 01       	movw	r18, r20
     63c:	a9 e8       	ldi	r26, 0x89	; 137
     63e:	b8 e8       	ldi	r27, 0x88	; 136
     640:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     644:	fc 01       	movw	r30, r24
     646:	f6 95       	lsr	r31
     648:	e7 95       	ror	r30
     64a:	f2 95       	swap	r31
     64c:	e2 95       	swap	r30
     64e:	ef 70       	andi	r30, 0x0F	; 15
     650:	ef 27       	eor	r30, r31
     652:	ff 70       	andi	r31, 0x0F	; 15
     654:	ef 27       	eor	r30, r31
     656:	2c e3       	ldi	r18, 0x3C	; 60
     658:	2e 9f       	mul	r18, r30
     65a:	c0 01       	movw	r24, r0
     65c:	2f 9f       	mul	r18, r31
     65e:	90 0d       	add	r25, r0
     660:	11 24       	eor	r1, r1
     662:	9a 01       	movw	r18, r20
     664:	28 1b       	sub	r18, r24
     666:	39 0b       	sbc	r19, r25
     668:	ad ec       	ldi	r26, 0xCD	; 205
     66a:	bc ec       	ldi	r27, 0xCC	; 204
     66c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	89 83       	std	Y+1, r24	; 0x01
	screen_arr[2] = secondsTotal / 60 % 10;
     67e:	9f 01       	movw	r18, r30
     680:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	e8 1b       	sub	r30, r24
     6a8:	f9 0b       	sbc	r31, r25
     6aa:	ea 83       	std	Y+2, r30	; 0x02
	screen_arr[3] = secondsTotal / 60 / 10;
     6ac:	9a 01       	movw	r18, r20
     6ae:	36 95       	lsr	r19
     6b0:	27 95       	ror	r18
     6b2:	36 95       	lsr	r19
     6b4:	27 95       	ror	r18
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	af e4       	ldi	r26, 0x4F	; 79
     6bc:	bb e1       	ldi	r27, 0x1B	; 27
     6be:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	8b 83       	std	Y+3, r24	; 0x03
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_Z10keyCheckerv>:
	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	static uint16_t idleTimes = 0;
	static uint8_t savedKeyState = 0;
	static bool keyCheckEnabled = false;
	uint8_t keyState = PIND;
     6d6:	89 b1       	in	r24, 0x09	; 9
	keyState = (~keyState >> 3) & 3;
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	80 95       	com	r24
     6dc:	90 95       	com	r25
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	93 70       	andi	r25, 0x03	; 3
	
	if (!keyCheckEnabled && keyState == keyStatePrevious && keyState == 0)
     6ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ10keyCheckervE15keyCheckEnabled>
     6f2:	81 11       	cpse	r24, r1
     6f4:	5d c0       	rjmp	.+186    	; 0x7b0 <_Z10keyCheckerv+0xda>
     6f6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10keyCheckervE16keyStatePrevious>
     6fa:	98 13       	cpse	r25, r24
     6fc:	47 c0       	rjmp	.+142    	; 0x78c <_Z10keyCheckerv+0xb6>
     6fe:	91 11       	cpse	r25, r1
     700:	45 c0       	rjmp	.+138    	; 0x78c <_Z10keyCheckerv+0xb6>
	{
		idleTimes += 1;
     702:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZZ10keyCheckervE9idleTimes>
     706:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <_ZZ10keyCheckervE9idleTimes+0x1>
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <_ZZ10keyCheckervE9idleTimes+0x1>
     712:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <_ZZ10keyCheckervE9idleTimes>

		if (idleTimes > 100)
     716:	25 36       	cpi	r18, 0x65	; 101
     718:	31 05       	cpc	r19, r1
     71a:	c0 f1       	brcs	.+112    	; 0x78c <_Z10keyCheckerv+0xb6>
		{
			keyCheckEnabled = true;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ10keyCheckervE15keyCheckEnabled>
			idleTimes = 0;
     722:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ10keyCheckervE9idleTimes+0x1>
     726:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10keyCheckervE9idleTimes>
     72a:	30 c0       	rjmp	.+96     	; 0x78c <_Z10keyCheckerv+0xb6>
		}
	}

	if (keyCheckEnabled && keyState == keyStatePrevious && keyState)
     72c:	99 23       	and	r25, r25
     72e:	71 f1       	breq	.+92     	; 0x78c <_Z10keyCheckerv+0xb6>
	{
		idleTimes = 0;
     730:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ10keyCheckervE9idleTimes+0x1>
     734:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10keyCheckervE9idleTimes>
		
		if (times < 1500)
     738:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZZ10keyCheckervE5times>
     73c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     740:	2c 3d       	cpi	r18, 0xDC	; 220
     742:	85 e0       	ldi	r24, 0x05	; 5
     744:	38 07       	cpc	r19, r24
     746:	60 f4       	brcc	.+24     	; 0x760 <_Z10keyCheckerv+0x8a>
		{
			times += 1;
     748:	2f 5f       	subi	r18, 0xFF	; 255
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     750:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <_ZZ10keyCheckervE5times>
     754:	ef ec       	ldi	r30, 0xCF	; 207
     756:	f7 e0       	ldi	r31, 0x07	; 7
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <_Z10keyCheckerv+0x82>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <_Z10keyCheckerv+0x88>
     75e:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10)
     760:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZZ10keyCheckervE5times>
     764:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     768:	2a 30       	cpi	r18, 0x0A	; 10
     76a:	31 05       	cpc	r19, r1
     76c:	21 f4       	brne	.+8      	; 0x776 <_Z10keyCheckerv+0xa0>
		{
			savedKeyState = keyState;
     76e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
	{
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret
		}
		if (times == 10)
		{
			savedKeyState = keyState;
		}
		if (times == 600)
     776:	28 35       	cpi	r18, 0x58	; 88
     778:	32 40       	sbci	r19, 0x02	; 2
     77a:	c1 f4       	brne	.+48     	; 0x7ac <_Z10keyCheckerv+0xd6>
		{
			longBeep();
     77c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
			keyCheckEnabled = false;
     780:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ10keyCheckervE15keyCheckEnabled>
			savedKeyState = 0;
     784:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			
			return 3;
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	08 95       	ret
		}
	}
	else if (savedKeyState)
     78c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     790:	88 23       	and	r24, r24
     792:	29 f0       	breq	.+10     	; 0x79e <_Z10keyCheckerv+0xc8>
	{
		uint8_t tempKeyState = savedKeyState;
		savedKeyState = 0;
     794:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		keyCheckEnabled = false;
     798:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ10keyCheckervE15keyCheckEnabled>

		return tempKeyState;
     79c:	08 95       	ret
	}
	else
	{
		keyStatePrevious = keyState;
     79e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ10keyCheckervE16keyStatePrevious>
		times = 0;
     7a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     7a6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZZ10keyCheckervE5times>
     7aa:	08 95       	ret
	}

	return 0;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret
			keyCheckEnabled = true;
			idleTimes = 0;
		}
	}

	if (keyCheckEnabled && keyState == keyStatePrevious && keyState)
     7b0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10keyCheckervE16keyStatePrevious>
     7b4:	98 13       	cpse	r25, r24
     7b6:	ea cf       	rjmp	.-44     	; 0x78c <_Z10keyCheckerv+0xb6>
     7b8:	b9 cf       	rjmp	.-142    	; 0x72c <_Z10keyCheckerv+0x56>

000007ba <_Z10setupTimerv>:

uint8_t setupTimer()
{
	while (true)
	{
		displaySeconds(alarmTime);
     7ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
		uint8_t key = keyChecker();
     7c4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>

		if (key)
     7c8:	88 23       	and	r24, r24
     7ca:	b9 f3       	breq	.-18     	; 0x7ba <_Z10setupTimerv>
		{
			if (key == 1 && alarmTime < 255)
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	51 f4       	brne	.+20     	; 0x7e4 <_Z10setupTimerv+0x2a>
     7d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     7d4:	8f 3f       	cpi	r24, 0xFF	; 255
     7d6:	89 f3       	breq	.-30     	; 0x7ba <_Z10setupTimerv>
			{
				// short press button 1
				alarmTime += 1;
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     7de:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     7e2:	eb cf       	rjmp	.-42     	; 0x7ba <_Z10setupTimerv>
			}

			if (key == 2 && alarmTime > 0)
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	51 f4       	brne	.+20     	; 0x7fc <_Z10setupTimerv+0x42>
     7e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     7ec:	88 23       	and	r24, r24
     7ee:	29 f3       	breq	.-54     	; 0x7ba <_Z10setupTimerv>
			{
				// short press button 2
				alarmTime -= 1;
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     7f6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     7fa:	df cf       	rjmp	.-66     	; 0x7ba <_Z10setupTimerv>
			}

			if (key == 3)
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	e9 f6       	brne	.-70     	; 0x7ba <_Z10setupTimerv>
			{
				// long press button 2
				eeprom_write_byte(EEP_TIMER_ALARM_TIME, alarmTime);
     800:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <alarmTime>
     804:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <EEP_TIMER_ALARM_TIME>
     808:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <EEP_TIMER_ALARM_TIME+0x1>
     80c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <eeprom_write_byte>
				return 0;
			}
		}
	}
}
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	08 95       	ret

00000814 <_Z9timerModev>:
	screen_arr[2] = secondsTotal / 60 % 10;
	screen_arr[3] = secondsTotal / 60 / 10;
}

uint8_t timerMode()
{
     814:	bf 92       	push	r11
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	63 97       	sbiw	r28, 0x13	; 19
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
	resetTimer();
     836:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
	doubleBeep();
     83a:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
     83e:	b1 2c       	mov	r11, r1
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
     840:	d1 2c       	mov	r13, r1
uint8_t timerMode()
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	10 e0       	ldi	r17, 0x00	; 0

uint8_t timerMode()
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
     846:	e1 2c       	mov	r14, r1
     848:	cc 24       	eor	r12, r12
     84a:	c3 94       	inc	r12
	resetTimer();
	doubleBeep();

	while (true)
	{
		readTime(timeArr);
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z8readTimePh>
		currentSeconds = timeArr[0];
     854:	f9 80       	ldd	r15, Y+1	; 0x01

		if (conunerEnabled && currentSeconds != lastSeconds)
     856:	dd 20       	and	r13, r13
     858:	09 f4       	brne	.+2      	; 0x85c <_Z9timerModev+0x48>
     85a:	63 c0       	rjmp	.+198    	; 0x922 <__stack+0x23>
     85c:	ef 14       	cp	r14, r15
     85e:	09 f4       	brne	.+2      	; 0x862 <_Z9timerModev+0x4e>
     860:	55 c0       	rjmp	.+170    	; 0x90c <__stack+0xd>
		{
			secondsTotal += 1;
     862:	0f 5f       	subi	r16, 0xFF	; 255
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	52 c0       	rjmp	.+164    	; 0x90c <__stack+0xd>
		if (conunerEnabled)
		{
			if (secondsTotal == alarmTime)
			{
				buzzering = true;
				buzzer(true);
     868:	8c 2d       	mov	r24, r12
     86a:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     86e:	02 c0       	rjmp	.+4      	; 0x874 <_Z9timerModev+0x60>
			}
			if (buzzering && secondsTotal <= (uint16_t)(alarmTime + 4) && secondsTotal > alarmTime)
     870:	bb 20       	and	r11, r11
     872:	29 f1       	breq	.+74     	; 0x8be <_Z9timerModev+0xaa>
     874:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <alarmTime>
     878:	82 2f       	mov	r24, r18
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	04 96       	adiw	r24, 0x04	; 4
     87e:	80 17       	cp	r24, r16
     880:	91 07       	cpc	r25, r17
     882:	a8 f0       	brcs	.+42     	; 0x8ae <_Z9timerModev+0x9a>
     884:	82 2f       	mov	r24, r18
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	80 17       	cp	r24, r16
     88a:	91 07       	cpc	r25, r17
     88c:	a8 f4       	brcc	.+42     	; 0x8b8 <_Z9timerModev+0xa4>
			{
				buzzer((secondsTotal - alarmTime) % 2 - 1);
     88e:	98 01       	movw	r18, r16
     890:	28 1b       	sub	r18, r24
     892:	39 0b       	sbc	r19, r25
     894:	c9 01       	movw	r24, r18
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	83 27       	eor	r24, r19
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
			}

			if (buzzering && secondsTotal > (uint16_t)(alarmTime + 4))
     8a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	04 96       	adiw	r24, 0x04	; 4
     8a8:	80 17       	cp	r24, r16
     8aa:	91 07       	cpc	r25, r17
     8ac:	38 f4       	brcc	.+14     	; 0x8bc <_Z9timerModev+0xa8>
			{
				buzzer(false);
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     8b4:	bc 2c       	mov	r11, r12
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <_Z9timerModev+0xaa>
     8b8:	bc 2c       	mov	r11, r12
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <_Z9timerModev+0xaa>
     8bc:	bc 2c       	mov	r11, r12
			}
		}

		if (secondsTotal > 15 * 60)
     8be:	05 38       	cpi	r16, 0x85	; 133
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	18 07       	cpc	r17, r24
     8c4:	90 f5       	brcc	.+100    	; 0x92a <__stack+0x2b>
		{
			return 0;
		}

		uint8_t key = keyChecker();
     8c6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>

		if (key)
     8ca:	88 23       	and	r24, r24
     8cc:	b9 f0       	breq	.+46     	; 0x8fc <_Z9timerModev+0xe8>
		{
			if (key == 1)
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	29 f4       	brne	.+10     	; 0x8dc <_Z9timerModev+0xc8>
			{
				// short press button 1
				singleBeep();
     8d2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
				buzzering = false;
     8d6:	b1 2c       	mov	r11, r1
				conunerEnabled = true;
     8d8:	dc 2c       	mov	r13, r12
     8da:	10 c0       	rjmp	.+32     	; 0x8fc <_Z9timerModev+0xe8>
			}

			if (key == 2)
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	49 f4       	brne	.+18     	; 0x8f2 <_Z9timerModev+0xde>
			{
				// short press button 2
				doubleBeep();
     8e0:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
     8e4:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
     8e8:	b1 2c       	mov	r11, r1
			if (key == 2)
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
     8ea:	d1 2c       	mov	r13, r1

			if (key == 2)
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
     8ec:	00 e0       	ldi	r16, 0x00	; 0
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <_Z9timerModev+0xe8>
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
			}

			if (key == 3)
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	19 f4       	brne	.+6      	; 0x8fc <_Z9timerModev+0xe8>
			{
				// long press button 2
				longBeep();
     8f6:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
				return 0;
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <__stack+0x2b>
     8fc:	8f ec       	ldi	r24, 0xCF	; 207
     8fe:	97 e0       	ldi	r25, 0x07	; 7
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
		if (conunerEnabled && currentSeconds != lastSeconds)
		{
			secondsTotal += 1;
		}

		lastSeconds = currentSeconds;
     908:	ef 2c       	mov	r14, r15
     90a:	a0 cf       	rjmp	.-192    	; 0x84c <_Z9timerModev+0x38>

		displaySeconds(secondsTotal);
     90c:	c8 01       	movw	r24, r16
     90e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>

		if (conunerEnabled)
		{
			if (secondsTotal == alarmTime)
     912:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	80 17       	cp	r24, r16
     91a:	91 07       	cpc	r25, r17
     91c:	09 f0       	breq	.+2      	; 0x920 <__stack+0x21>
     91e:	a8 cf       	rjmp	.-176    	; 0x870 <_Z9timerModev+0x5c>
     920:	a3 cf       	rjmp	.-186    	; 0x868 <_Z9timerModev+0x54>
			secondsTotal += 1;
		}

		lastSeconds = currentSeconds;

		displaySeconds(secondsTotal);
     922:	c8 01       	movw	r24, r16
     924:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
     928:	ca cf       	rjmp	.-108    	; 0x8be <_Z9timerModev+0xaa>
			}
		}

		_delay_ms(1);
	}
}
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	63 96       	adiw	r28, 0x13	; 19
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	08 95       	ret

0000094c <_Z6dsModev>:
			opacity = 0;
	}
}

uint8_t dsMode()
{
     94c:	3f 92       	push	r3
     94e:	4f 92       	push	r4
     950:	5f 92       	push	r5
     952:	6f 92       	push	r6
     954:	7f 92       	push	r7
     956:	8f 92       	push	r8
     958:	9f 92       	push	r9
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	29 97       	sbiw	r28, 0x09	; 9
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     97e:	e9 e1       	ldi	r30, 0x19	; 25
     980:	f1 e0       	ldi	r31, 0x01	; 1
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     986:	8d e2       	ldi	r24, 0x2D	; 45
     988:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     98a:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     98c:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     98e:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     990:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     992:	e1 2c       	mov	r14, r1
     994:	f1 2c       	mov	r15, r1
			else
			{
				screen_arr[3] = -1;
			}

			screen_arr[0] = ((temper & 0x0F) * 10) / 16;
     996:	6f 01       	movw	r12, r30
			{
				screen_arr[3] = temper / 100;
				temper %= 100;
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
     998:	0f 2e       	mov	r0, r31
     99a:	fa e0       	ldi	r31, 0x0A	; 10
     99c:	af 2e       	mov	r10, r31
     99e:	b1 2c       	mov	r11, r1
     9a0:	f0 2d       	mov	r31, r0
			if (temper >= 100)
			{
				screen_arr[3] = temper / 100;
				temper %= 100;
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
     9a2:	44 24       	eor	r4, r4
     9a4:	4a 94       	dec	r4
			screen_arr[0] = ((temper & 0x0F) * 10) / 16;

			temper >>= 4;
			if (temper >= 100)
			{
				screen_arr[3] = temper / 100;
     9a6:	0f 2e       	mov	r0, r31
     9a8:	f4 e6       	ldi	r31, 0x64	; 100
     9aa:	8f 2e       	mov	r8, r31
     9ac:	91 2c       	mov	r9, r1
     9ae:	f0 2d       	mov	r31, r0
			temper <<= 8;
			temper |= temperatureArr[0];

			if (temper < 0)
			{
				screen_arr[3] = '-';
     9b0:	0f 2e       	mov	r0, r31
     9b2:	fd e2       	ldi	r31, 0x2D	; 45
     9b4:	3f 2e       	mov	r3, r31
     9b6:	f0 2d       	mov	r31, r0
				temper *= -1;
				temper += 1;
     9b8:	66 24       	eor	r6, r6
     9ba:	63 94       	inc	r6
     9bc:	71 2c       	mov	r7, r1
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <_Z6dsModev+0x78>
		_delay_ms(1);
		if (inner_counter <= 1000)
			inner_counter += 1;
		else
		{
			inner_counter = 0;
     9c0:	e1 2c       	mov	r14, r1
     9c2:	f1 2c       	mov	r15, r1
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while (true)
	{
		if (inner_counter == 0)
     9c4:	e1 14       	cp	r14, r1
     9c6:	f1 04       	cpc	r15, r1
     9c8:	79 f4       	brne	.+30     	; 0x9e8 <_Z6dsModev+0x9c>
		{
			ReadTemperature_StartConvert(&PORTD, &DDRD, &PIND, PORTD2);
     9ca:	22 e0       	ldi	r18, 0x02	; 2
     9cc:	49 e2       	ldi	r20, 0x29	; 41
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	6a e2       	ldi	r22, 0x2A	; 42
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	8b e2       	ldi	r24, 0x2B	; 43
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     9dc:	78 94       	sei
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
		}

		uint8_t key = keyChecker();
     9de:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     9e2:	81 11       	cpse	r24, r1
     9e4:	68 c0       	rjmp	.+208    	; 0xab6 <_Z6dsModev+0x16a>
     9e6:	8c c0       	rjmp	.+280    	; 0xb00 <_Z6dsModev+0x1b4>
		if (inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD, &DDRD, &PIND, PORTD2);
			sei();
		}
		if (inner_counter == 1000)
     9e8:	88 ee       	ldi	r24, 0xE8	; 232
     9ea:	e8 16       	cp	r14, r24
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	f8 06       	cpc	r15, r24
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <_Z6dsModev+0xa8>
     9f2:	5d c0       	rjmp	.+186    	; 0xaae <_Z6dsModev+0x162>
		{
			ReadTemperatureArr(&PORTD, &DDRD, &PIND, PIND2, temperatureArr);
     9f4:	8e 01       	movw	r16, r28
     9f6:	0f 5f       	subi	r16, 0xFF	; 255
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	22 e0       	ldi	r18, 0x02	; 2
     9fc:	49 e2       	ldi	r20, 0x29	; 41
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	6a e2       	ldi	r22, 0x2A	; 42
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	8b e2       	ldi	r24, 0x2B	; 43
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     a0c:	2a 81       	ldd	r18, Y+2	; 0x02
     a0e:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     a10:	32 2f       	mov	r19, r18
     a12:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	28 2b       	or	r18, r24

			if (temper < 0)
     a18:	33 23       	and	r19, r19
     a1a:	3c f4       	brge	.+14     	; 0xa2a <_Z6dsModev+0xde>
			{
				screen_arr[3] = '-';
     a1c:	f6 01       	movw	r30, r12
     a1e:	33 82       	std	Z+3, r3	; 0x03
				temper *= -1;
				temper += 1;
     a20:	c3 01       	movw	r24, r6
     a22:	82 1b       	sub	r24, r18
     a24:	93 0b       	sbc	r25, r19
     a26:	9c 01       	movw	r18, r24
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <_Z6dsModev+0xe2>
			}
			else
			{
				screen_arr[3] = -1;
     a2a:	f6 01       	movw	r30, r12
     a2c:	43 82       	std	Z+3, r4	; 0x03
			}

			screen_arr[0] = ((temper & 0x0F) * 10) / 16;
     a2e:	c9 01       	movw	r24, r18
     a30:	8f 70       	andi	r24, 0x0F	; 15
     a32:	99 27       	eor	r25, r25
     a34:	ac 01       	movw	r20, r24
     a36:	44 0f       	add	r20, r20
     a38:	55 1f       	adc	r21, r21
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	84 0f       	add	r24, r20
     a48:	95 1f       	adc	r25, r21
     a4a:	95 95       	asr	r25
     a4c:	87 95       	ror	r24
     a4e:	95 95       	asr	r25
     a50:	87 95       	ror	r24
     a52:	95 95       	asr	r25
     a54:	87 95       	ror	r24
     a56:	95 95       	asr	r25
     a58:	87 95       	ror	r24
     a5a:	f6 01       	movw	r30, r12
     a5c:	80 83       	st	Z, r24

			temper >>= 4;
     a5e:	35 95       	asr	r19
     a60:	27 95       	ror	r18
     a62:	35 95       	asr	r19
     a64:	27 95       	ror	r18
     a66:	35 95       	asr	r19
     a68:	27 95       	ror	r18
     a6a:	35 95       	asr	r19
     a6c:	27 95       	ror	r18
			if (temper >= 100)
     a6e:	24 36       	cpi	r18, 0x64	; 100
     a70:	31 05       	cpc	r19, r1
     a72:	3c f0       	brlt	.+14     	; 0xa82 <_Z6dsModev+0x136>
			{
				screen_arr[3] = temper / 100;
     a74:	c9 01       	movw	r24, r18
     a76:	b4 01       	movw	r22, r8
     a78:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__divmodhi4>
     a7c:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     a7e:	28 2f       	mov	r18, r24
     a80:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
     a82:	c9 01       	movw	r24, r18
     a84:	09 96       	adiw	r24, 0x09	; 9
     a86:	43 97       	sbiw	r24, 0x13	; 19
     a88:	28 f0       	brcs	.+10     	; 0xa94 <_Z6dsModev+0x148>
     a8a:	c9 01       	movw	r24, r18
     a8c:	b5 01       	movw	r22, r10
     a8e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__divmodhi4>
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <_Z6dsModev+0x14a>
     a94:	64 2d       	mov	r22, r4
     a96:	f6 01       	movw	r30, r12
     a98:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper % 10;
     a9a:	c9 01       	movw	r24, r18
     a9c:	b5 01       	movw	r22, r10
     a9e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__divmodhi4>
     aa2:	81 83       	std	Z+1, r24	; 0x01
		}

		uint8_t key = keyChecker();
     aa4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     aa8:	81 11       	cpse	r24, r1
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <_Z6dsModev+0x16a>
     aac:	22 c0       	rjmp	.+68     	; 0xaf2 <_Z6dsModev+0x1a6>
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
		}

		uint8_t key = keyChecker();
     aae:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     ab2:	88 23       	and	r24, r24
     ab4:	21 f0       	breq	.+8      	; 0xabe <_Z6dsModev+0x172>
		{
			if (key == 1)
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	c1 f0       	breq	.+48     	; 0xaea <_Z6dsModev+0x19e>
				return 2;

			if (key == 2)
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	c1 f0       	breq	.+48     	; 0xaee <_Z6dsModev+0x1a2>
     abe:	8f ec       	ldi	r24, 0xCF	; 207
     ac0:	97 e0       	ldi	r25, 0x07	; 7
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <_Z6dsModev+0x176>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <_Z6dsModev+0x17c>
     ac8:	00 00       	nop
				// short press button 2
				return 5;
			}
		}
		_delay_ms(1);
		if (inner_counter <= 1000)
     aca:	99 ee       	ldi	r25, 0xE9	; 233
     acc:	e9 16       	cp	r14, r25
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	f9 06       	cpc	r15, r25
     ad2:	20 f4       	brcc	.+8      	; 0xadc <_Z6dsModev+0x190>
			inner_counter += 1;
     ad4:	ef ef       	ldi	r30, 0xFF	; 255
     ad6:	ee 1a       	sub	r14, r30
     ad8:	fe 0a       	sbc	r15, r30
     ada:	74 cf       	rjmp	.-280    	; 0x9c4 <_Z6dsModev+0x78>
		else
		{
			inner_counter = 0;
			exit_counter += 1;
     adc:	53 94       	inc	r5
			if (exit_counter > 7)
     ade:	f7 e0       	ldi	r31, 0x07	; 7
     ae0:	f5 15       	cp	r31, r5
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <_Z6dsModev+0x19a>
     ae4:	6d cf       	rjmp	.-294    	; 0x9c0 <_Z6dsModev+0x74>
				return 0;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	12 c0       	rjmp	.+36     	; 0xb0e <_Z6dsModev+0x1c2>

		uint8_t key = keyChecker();
		if (key)
		{
			if (key == 1)
				return 2;
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	10 c0       	rjmp	.+32     	; 0xb0e <_Z6dsModev+0x1c2>

			if (key == 2)
			{
				// short press button 2
				return 5;
     aee:	85 e0       	ldi	r24, 0x05	; 5
     af0:	0e c0       	rjmp	.+28     	; 0xb0e <_Z6dsModev+0x1c2>
     af2:	8f ec       	ldi	r24, 0xCF	; 207
     af4:	97 e0       	ldi	r25, 0x07	; 7
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <_Z6dsModev+0x1aa>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <_Z6dsModev+0x1b0>
     afc:	00 00       	nop
     afe:	ea cf       	rjmp	.-44     	; 0xad4 <_Z6dsModev+0x188>
     b00:	ef ec       	ldi	r30, 0xCF	; 207
     b02:	f7 e0       	ldi	r31, 0x07	; 7
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <_Z6dsModev+0x1b8>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <_Z6dsModev+0x1be>
     b0a:	00 00       	nop
     b0c:	e3 cf       	rjmp	.-58     	; 0xad4 <_Z6dsModev+0x188>
			exit_counter += 1;
			if (exit_counter > 7)
				return 0;
		}
	}
}
     b0e:	29 96       	adiw	r28, 0x09	; 9
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	08 95       	ret

00000b3e <_Z7acbModev>:

uint8_t acbMode()
{
     b3e:	3f 92       	push	r3
     b40:	4f 92       	push	r4
     b42:	5f 92       	push	r5
     b44:	6f 92       	push	r6
     b46:	7f 92       	push	r7
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
	screen_arr[4] = 1;
     b60:	e9 e1       	ldi	r30, 0x19	; 25
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 'u';
     b68:	85 e7       	ldi	r24, 0x75	; 117
     b6a:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = -1;
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = -1;
     b70:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = -1;
     b72:	80 83       	st	Z, r24
	sei();
     b74:	78 94       	sei
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     b76:	ec e7       	ldi	r30, 0x7C	; 124
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	8f 70       	andi	r24, 0x0F	; 15
     b7e:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     b80:	80 81       	ld	r24, Z
     b82:	80 7f       	andi	r24, 0xF0	; 240
     b84:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     b86:	80 81       	ld	r24, Z
     b88:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     b8a:	ea e7       	ldi	r30, 0x7A	; 122
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     b94:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZN8AdcClass9DataReadyE>
     b98:	88 23       	and	r24, r24
     b9a:	e1 f3       	breq	.-8      	; 0xb94 <_Z7acbModev+0x56>
		Voltage = CalculateVoltage(Data);
     b9c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <_ZN8AdcClass4DataE>
     ba0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <_ZN8AdcClass4DataE+0x1>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
     bac:	2a ea       	ldi	r18, 0xAA	; 170
     bae:	31 ef       	ldi	r19, 0xF1	; 241
     bb0:	44 e9       	ldi	r20, 0x94	; 148
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
     bb8:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <adcOb+0x4>
     bbc:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <adcOb+0x5>
     bc0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <adcOb+0x6>
     bc4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <adcOb+0x7>
		DataReady = false;
     bc8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <_ZN8AdcClass9DataReadyE>
     bcc:	8f e1       	ldi	r24, 0x1F	; 31
     bce:	9e e4       	ldi	r25, 0x4E	; 78
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <_Z7acbModev+0x92>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <_Z7acbModev+0x98>
     bd6:	00 00       	nop
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     bd8:	ec e7       	ldi	r30, 0x7C	; 124
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     be2:	80 81       	ld	r24, Z
     be4:	80 7f       	andi	r24, 0xF0	; 240
     be6:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     be8:	80 81       	ld	r24, Z
     bea:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     bec:	ea e7       	ldi	r30, 0x7A	; 122
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     bf6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZN8AdcClass9DataReadyE>
     bfa:	88 23       	and	r24, r24
     bfc:	e1 f3       	breq	.-8      	; 0xbf6 <_Z7acbModev+0xb8>
		Voltage = CalculateVoltage(Data);
     bfe:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <_ZN8AdcClass4DataE>
     c02:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <_ZN8AdcClass4DataE+0x1>
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
     c0e:	2a ea       	ldi	r18, 0xAA	; 170
     c10:	31 ef       	ldi	r19, 0xF1	; 241
     c12:	44 e9       	ldi	r20, 0x94	; 148
     c14:	51 e4       	ldi	r21, 0x41	; 65
     c16:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     c1e:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <adcOb+0x4>
     c22:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <adcOb+0x5>
     c26:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <adcOb+0x6>
     c2a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <adcOb+0x7>
		DataReady = false;
     c2e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <_ZN8AdcClass9DataReadyE>
	uint16_t exitCouter = 0;
	adcOb.MesureVoltage(PORTC0);
	_delay_ms(10);
	adcOb.MesureVoltage(PORTC0);
	screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     c32:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
     c36:	cd ec       	ldi	r28, 0xCD	; 205
     c38:	6c 9f       	mul	r22, r28
     c3a:	81 2d       	mov	r24, r1
     c3c:	11 24       	eor	r1, r1
     c3e:	86 95       	lsr	r24
     c40:	86 95       	lsr	r24
     c42:	86 95       	lsr	r24
     c44:	09 e1       	ldi	r16, 0x19	; 25
     c46:	11 e0       	ldi	r17, 0x01	; 1
     c48:	f8 01       	movw	r30, r16
     c4a:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
     c4c:	88 0f       	add	r24, r24
     c4e:	98 2f       	mov	r25, r24
     c50:	99 0f       	add	r25, r25
     c52:	99 0f       	add	r25, r25
     c54:	89 0f       	add	r24, r25
     c56:	68 1b       	sub	r22, r24
     c58:	61 83       	std	Z+1, r22	; 0x01
	screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e2       	ldi	r20, 0x20	; 32
     c60:	51 e4       	ldi	r21, 0x41	; 65
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
     c6a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
     c6e:	6c 9f       	mul	r22, r28
     c70:	81 2d       	mov	r24, r1
     c72:	11 24       	eor	r1, r1
     c74:	86 95       	lsr	r24
     c76:	86 95       	lsr	r24
     c78:	86 95       	lsr	r24
     c7a:	88 0f       	add	r24, r24
     c7c:	98 2f       	mov	r25, r24
     c7e:	99 0f       	add	r25, r25
     c80:	99 0f       	add	r25, r25
     c82:	89 0f       	add	r24, r25
     c84:	68 1b       	sub	r22, r24
     c86:	f8 01       	movw	r30, r16
     c88:	60 83       	st	Z, r22
	screen_arr[3] = 'u';
	screen_arr[2] = -1;
	screen_arr[1] = -1;
	screen_arr[0] = -1;
	sei();
	uint16_t exitCouter = 0;
     c8a:	c0 e0       	ldi	r28, 0x00	; 0
     c8c:	d0 e0       	ldi	r29, 0x00	; 0
				return 0;
			//if (key == 2) return 3;
		}
		_delay_ms(1);
		exitCouter += 1;
		if (exitCouter % 1000 == 0)
     c8e:	0f 2e       	mov	r0, r31
     c90:	f8 ee       	ldi	r31, 0xE8	; 232
     c92:	ef 2e       	mov	r14, r31
     c94:	f3 e0       	ldi	r31, 0x03	; 3
     c96:	ff 2e       	mov	r15, r31
     c98:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     c9a:	0c e7       	ldi	r16, 0x7C	; 124
     c9c:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     c9e:	0f 2e       	mov	r0, r31
     ca0:	fa e7       	ldi	r31, 0x7A	; 122
     ca2:	af 2e       	mov	r10, r31
     ca4:	b1 2c       	mov	r11, r1
     ca6:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     ca8:	0f 2e       	mov	r0, r31
     caa:	f1 e1       	ldi	r31, 0x11	; 17
     cac:	8f 2e       	mov	r8, r31
     cae:	f1 e0       	ldi	r31, 0x01	; 1
     cb0:	9f 2e       	mov	r9, r31
     cb2:	f0 2d       	mov	r31, r0
		{
			//Do it every second
			adcOb.MesureVoltage(PORTC0);
			_delay_ms(1);
			screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     cb4:	0f 2e       	mov	r0, r31
     cb6:	fd ec       	ldi	r31, 0xCD	; 205
     cb8:	3f 2e       	mov	r3, r31
     cba:	f0 2d       	mov	r31, r0
     cbc:	6f 01       	movw	r12, r30
	screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
	screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
	while (true)
	{

		uint8_t key = keyChecker();
     cbe:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
		{
			if (key == 1)
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <_Z7acbModev+0x18a>
     cc6:	83 c0       	rjmp	.+262    	; 0xdce <_Z7acbModev+0x290>
     cc8:	8f ec       	ldi	r24, 0xCF	; 207
     cca:	97 e0       	ldi	r25, 0x07	; 7
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <_Z7acbModev+0x18e>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <_Z7acbModev+0x194>
     cd2:	00 00       	nop
				return 0;
			//if (key == 2) return 3;
		}
		_delay_ms(1);
		exitCouter += 1;
     cd4:	21 96       	adiw	r28, 0x01	; 1
		if (exitCouter % 1000 == 0)
     cd6:	9e 01       	movw	r18, r28
     cd8:	36 95       	lsr	r19
     cda:	27 95       	ror	r18
     cdc:	36 95       	lsr	r19
     cde:	27 95       	ror	r18
     ce0:	36 95       	lsr	r19
     ce2:	27 95       	ror	r18
     ce4:	a5 ec       	ldi	r26, 0xC5	; 197
     ce6:	b0 e2       	ldi	r27, 0x20	; 32
     ce8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__umulhisi3>
     cec:	92 95       	swap	r25
     cee:	82 95       	swap	r24
     cf0:	8f 70       	andi	r24, 0x0F	; 15
     cf2:	89 27       	eor	r24, r25
     cf4:	9f 70       	andi	r25, 0x0F	; 15
     cf6:	89 27       	eor	r24, r25
     cf8:	8e 9d       	mul	r24, r14
     cfa:	90 01       	movw	r18, r0
     cfc:	8f 9d       	mul	r24, r15
     cfe:	30 0d       	add	r19, r0
     d00:	9e 9d       	mul	r25, r14
     d02:	30 0d       	add	r19, r0
     d04:	11 24       	eor	r1, r1
     d06:	c2 17       	cp	r28, r18
     d08:	d3 07       	cpc	r29, r19
     d0a:	09 f0       	breq	.+2      	; 0xd0e <_Z7acbModev+0x1d0>
     d0c:	5b c0       	rjmp	.+182    	; 0xdc4 <_Z7acbModev+0x286>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     d0e:	f8 01       	movw	r30, r16
     d10:	80 81       	ld	r24, Z
     d12:	8f 70       	andi	r24, 0x0F	; 15
     d14:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     d16:	80 81       	ld	r24, Z
     d18:	80 7f       	andi	r24, 0xF0	; 240
     d1a:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     d1c:	80 81       	ld	r24, Z
     d1e:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     d20:	f5 01       	movw	r30, r10
     d22:	80 81       	ld	r24, Z
     d24:	80 64       	ori	r24, 0x40	; 64
     d26:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     d28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZN8AdcClass9DataReadyE>
     d2c:	88 23       	and	r24, r24
     d2e:	e1 f3       	breq	.-8      	; 0xd28 <_Z7acbModev+0x1ea>
		Voltage = CalculateVoltage(Data);
     d30:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <_ZN8AdcClass4DataE>
     d34:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <_ZN8AdcClass4DataE+0x1>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
     d40:	2a ea       	ldi	r18, 0xAA	; 170
     d42:	31 ef       	ldi	r19, 0xF1	; 241
     d44:	44 e9       	ldi	r20, 0x94	; 148
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
     d4c:	f4 01       	movw	r30, r8
     d4e:	64 83       	std	Z+4, r22	; 0x04
     d50:	75 83       	std	Z+5, r23	; 0x05
     d52:	86 83       	std	Z+6, r24	; 0x06
     d54:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     d56:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <_ZN8AdcClass9DataReadyE>
     d5a:	8f ec       	ldi	r24, 0xCF	; 207
     d5c:	97 e0       	ldi	r25, 0x07	; 7
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <_Z7acbModev+0x220>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <_Z7acbModev+0x226>
     d64:	00 00       	nop
		{
			//Do it every second
			adcOb.MesureVoltage(PORTC0);
			_delay_ms(1);
			screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     d66:	44 80       	ldd	r4, Z+4	; 0x04
     d68:	55 80       	ldd	r5, Z+5	; 0x05
     d6a:	66 80       	ldd	r6, Z+6	; 0x06
     d6c:	77 80       	ldd	r7, Z+7	; 0x07
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
     d76:	63 9d       	mul	r22, r3
     d78:	81 2d       	mov	r24, r1
     d7a:	11 24       	eor	r1, r1
     d7c:	86 95       	lsr	r24
     d7e:	86 95       	lsr	r24
     d80:	86 95       	lsr	r24
     d82:	f6 01       	movw	r30, r12
     d84:	82 83       	std	Z+2, r24	; 0x02
			screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
     d86:	88 0f       	add	r24, r24
     d88:	98 2f       	mov	r25, r24
     d8a:	99 0f       	add	r25, r25
     d8c:	99 0f       	add	r25, r25
     d8e:	89 0f       	add	r24, r25
     d90:	68 1b       	sub	r22, r24
     d92:	61 83       	std	Z+1, r22	; 0x01
			screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e2       	ldi	r20, 0x20	; 32
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	c3 01       	movw	r24, r6
     d9e:	b2 01       	movw	r22, r4
     da0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
     da4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
     da8:	63 9d       	mul	r22, r3
     daa:	81 2d       	mov	r24, r1
     dac:	11 24       	eor	r1, r1
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	88 0f       	add	r24, r24
     db6:	98 2f       	mov	r25, r24
     db8:	99 0f       	add	r25, r25
     dba:	99 0f       	add	r25, r25
     dbc:	89 0f       	add	r24, r25
     dbe:	68 1b       	sub	r22, r24
     dc0:	f6 01       	movw	r30, r12
     dc2:	60 83       	st	Z, r22
		}
		if (exitCouter > 7000)
     dc4:	c9 35       	cpi	r28, 0x59	; 89
     dc6:	fb e1       	ldi	r31, 0x1B	; 27
     dc8:	df 07       	cpc	r29, r31
     dca:	09 f0       	breq	.+2      	; 0xdce <_Z7acbModev+0x290>
     dcc:	78 cf       	rjmp	.-272    	; 0xcbe <_Z7acbModev+0x180>
			return 0;
	}
}
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	3f 90       	pop	r3
     df2:	08 95       	ret

00000df4 <_Z12setupMinutesv>:

uint8_t setupMinutes()
{
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr[1];
     e06:	e9 e1       	ldi	r30, 0x19	; 25
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	90 81       	ld	r25, Z
     e0c:	81 81       	ldd	r24, Z+1	; 0x01
     e0e:	88 0f       	add	r24, r24
     e10:	18 2f       	mov	r17, r24
     e12:	11 0f       	add	r17, r17
     e14:	11 0f       	add	r17, r17
     e16:	81 0f       	add	r24, r17
     e18:	18 2f       	mov	r17, r24
     e1a:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     e1c:	c0 e0       	ldi	r28, 0x00	; 0
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
		if (key)
		{
			if (key == 1)
			{
				minutes += 1;
				minutes %= 60;
     e20:	0f 2e       	mov	r0, r31
     e22:	f9 e8       	ldi	r31, 0x89	; 137
     e24:	bf 2e       	mov	r11, r31
     e26:	f0 2d       	mov	r31, r0
     e28:	0f 2e       	mov	r0, r31
     e2a:	fc e3       	ldi	r31, 0x3C	; 60
     e2c:	cf 2e       	mov	r12, r31
     e2e:	f0 2d       	mov	r31, r0
			screen_arr[1] = minutes / 10;
			screen_arr[0] = minutes % 10;
		}
		else
		{
			screen_arr[1] = -1;
     e30:	7f 01       	movw	r14, r30
     e32:	0f ef       	ldi	r16, 0xFF	; 255
				return 4;
			}
		}
		if (blinker > 250)
		{
			screen_arr[1] = minutes / 10;
     e34:	0f 2e       	mov	r0, r31
     e36:	fd ec       	ldi	r31, 0xCD	; 205
     e38:	df 2e       	mov	r13, r31
     e3a:	f0 2d       	mov	r31, r0
{
	uint8_t minutes = screen_arr[0] + 10 * screen_arr[1];
	uint16_t blinker = 0;
	while (true)
	{
		uint8_t key = keyChecker();
     e3c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     e40:	88 23       	and	r24, r24
     e42:	81 f0       	breq	.+32     	; 0xe64 <_Z12setupMinutesv+0x70>
		{
			if (key == 1)
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	61 f4       	brne	.+24     	; 0xe60 <_Z12setupMinutesv+0x6c>
			{
				minutes += 1;
     e48:	81 0f       	add	r24, r17
				minutes %= 60;
     e4a:	8b 9d       	mul	r24, r11
     e4c:	11 2d       	mov	r17, r1
     e4e:	11 24       	eor	r1, r1
     e50:	12 95       	swap	r17
     e52:	16 95       	lsr	r17
     e54:	17 70       	andi	r17, 0x07	; 7
     e56:	1c 9d       	mul	r17, r12
     e58:	80 19       	sub	r24, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	18 2f       	mov	r17, r24
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <_Z12setupMinutesv+0x70>
			}
			if (key == 2)
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	41 f1       	breq	.+80     	; 0xeb4 <_Z12setupMinutesv+0xc0>
				screen_arr[1] = minutes / 10;
				screen_arr[0] = minutes % 10;
				return 4;
			}
		}
		if (blinker > 250)
     e64:	cb 3f       	cpi	r28, 0xFB	; 251
     e66:	d1 05       	cpc	r29, r1
     e68:	98 f0       	brcs	.+38     	; 0xe90 <_Z12setupMinutesv+0x9c>
		{
			screen_arr[1] = minutes / 10;
     e6a:	1d 9d       	mul	r17, r13
     e6c:	81 2d       	mov	r24, r1
     e6e:	11 24       	eor	r1, r1
     e70:	86 95       	lsr	r24
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	f7 01       	movw	r30, r14
     e78:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[0] = minutes % 10;
     e7a:	88 0f       	add	r24, r24
     e7c:	98 2f       	mov	r25, r24
     e7e:	99 0f       	add	r25, r25
     e80:	99 0f       	add	r25, r25
     e82:	89 0f       	add	r24, r25
     e84:	f1 2f       	mov	r31, r17
     e86:	f8 1b       	sub	r31, r24
     e88:	8f 2f       	mov	r24, r31
     e8a:	f7 01       	movw	r30, r14
     e8c:	80 83       	st	Z, r24
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <_Z12setupMinutesv+0xa2>
		}
		else
		{
			screen_arr[1] = -1;
     e90:	f7 01       	movw	r30, r14
     e92:	01 83       	std	Z+1, r16	; 0x01
			screen_arr[0] = -1;
     e94:	00 83       	st	Z, r16
		}
		if (blinker < 500)
     e96:	c4 3f       	cpi	r28, 0xF4	; 244
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	df 07       	cpc	r29, r31
     e9c:	10 f4       	brcc	.+4      	; 0xea2 <_Z12setupMinutesv+0xae>
		{
			blinker += 1;
     e9e:	21 96       	adiw	r28, 0x01	; 1
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <_Z12setupMinutesv+0xb2>
		}
		else
		{
			blinker = 0;
     ea2:	c0 e0       	ldi	r28, 0x00	; 0
     ea4:	d0 e0       	ldi	r29, 0x00	; 0
     ea6:	8f ec       	ldi	r24, 0xCF	; 207
     ea8:	97 e0       	ldi	r25, 0x07	; 7
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <_Z12setupMinutesv+0xb6>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <_Z12setupMinutesv+0xbc>
     eb0:	00 00       	nop
     eb2:	c4 cf       	rjmp	.-120    	; 0xe3c <_Z12setupMinutesv+0x48>
				minutes += 1;
				minutes %= 60;
			}
			if (key == 2)
			{
				rtcSendMinutes(minutes);
     eb4:	81 2f       	mov	r24, r17
     eb6:	0e 94 bf 0a 	call	0x157e	; 0x157e <_Z14rtcSendMinutesh>
				screen_arr[1] = minutes / 10;
     eba:	8d ec       	ldi	r24, 0xCD	; 205
     ebc:	18 9f       	mul	r17, r24
     ebe:	81 2d       	mov	r24, r1
     ec0:	11 24       	eor	r1, r1
     ec2:	86 95       	lsr	r24
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
     ec8:	e9 e1       	ldi	r30, 0x19	; 25
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	81 83       	std	Z+1, r24	; 0x01
				screen_arr[0] = minutes % 10;
     ece:	88 0f       	add	r24, r24
     ed0:	98 2f       	mov	r25, r24
     ed2:	99 0f       	add	r25, r25
     ed4:	99 0f       	add	r25, r25
     ed6:	89 0f       	add	r24, r25
     ed8:	18 1b       	sub	r17, r24
     eda:	10 83       	st	Z, r17
		{
			blinker = 0;
		}
		_delay_ms(1);
	}
}
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	08 95       	ret

00000ef2 <_Z10setupHoursv>:
uint8_t setupHours()
{
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr[3];
     f04:	e9 e1       	ldi	r30, 0x19	; 25
     f06:	f1 e0       	ldi	r31, 0x01	; 1
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	99 0f       	add	r25, r25
     f0e:	19 2f       	mov	r17, r25
     f10:	11 0f       	add	r17, r17
     f12:	11 0f       	add	r17, r17
     f14:	19 0f       	add	r17, r25
     f16:	18 0f       	add	r17, r24
	uint16_t blinker = 0;
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
		if (key)
		{
			if (key == 1)
			{
				hours += 1;
				hours %= 24;
     f1c:	0f 2e       	mov	r0, r31
     f1e:	fb ea       	ldi	r31, 0xAB	; 171
     f20:	bf 2e       	mov	r11, r31
     f22:	f0 2d       	mov	r31, r0
     f24:	0f 2e       	mov	r0, r31
     f26:	f8 e1       	ldi	r31, 0x18	; 24
     f28:	cf 2e       	mov	r12, r31
     f2a:	f0 2d       	mov	r31, r0
			screen_arr[3] = hours / 10;
			screen_arr[2] = hours % 10;
		}
		else
		{
			screen_arr[3] = -1;
     f2c:	7f 01       	movw	r14, r30
     f2e:	0f ef       	ldi	r16, 0xFF	; 255
				return 6;
			}
		}
		if (blinker > 250)
		{
			screen_arr[3] = hours / 10;
     f30:	0f 2e       	mov	r0, r31
     f32:	fd ec       	ldi	r31, 0xCD	; 205
     f34:	df 2e       	mov	r13, r31
     f36:	f0 2d       	mov	r31, r0
{
	uint8_t hours = screen_arr[2] + 10 * screen_arr[3];
	uint16_t blinker = 0;
	while (true)
	{
		uint8_t key = keyChecker();
     f38:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     f3c:	88 23       	and	r24, r24
     f3e:	79 f0       	breq	.+30     	; 0xf5e <_Z10setupHoursv+0x6c>
		{
			if (key == 1)
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	59 f4       	brne	.+22     	; 0xf5a <_Z10setupHoursv+0x68>
			{
				hours += 1;
     f44:	81 0f       	add	r24, r17
				hours %= 24;
     f46:	8b 9d       	mul	r24, r11
     f48:	11 2d       	mov	r17, r1
     f4a:	11 24       	eor	r1, r1
     f4c:	12 95       	swap	r17
     f4e:	1f 70       	andi	r17, 0x0F	; 15
     f50:	1c 9d       	mul	r17, r12
     f52:	80 19       	sub	r24, r0
     f54:	11 24       	eor	r1, r1
     f56:	18 2f       	mov	r17, r24
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <_Z10setupHoursv+0x6c>
			}
			if (key == 2)
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	41 f1       	breq	.+80     	; 0xfae <_Z10setupHoursv+0xbc>
				rtcSendHours(hours);

				return 6;
			}
		}
		if (blinker > 250)
     f5e:	cb 3f       	cpi	r28, 0xFB	; 251
     f60:	d1 05       	cpc	r29, r1
     f62:	98 f0       	brcs	.+38     	; 0xf8a <_Z10setupHoursv+0x98>
		{
			screen_arr[3] = hours / 10;
     f64:	1d 9d       	mul	r17, r13
     f66:	81 2d       	mov	r24, r1
     f68:	11 24       	eor	r1, r1
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	86 95       	lsr	r24
     f70:	f7 01       	movw	r30, r14
     f72:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[2] = hours % 10;
     f74:	88 0f       	add	r24, r24
     f76:	98 2f       	mov	r25, r24
     f78:	99 0f       	add	r25, r25
     f7a:	99 0f       	add	r25, r25
     f7c:	89 0f       	add	r24, r25
     f7e:	f1 2f       	mov	r31, r17
     f80:	f8 1b       	sub	r31, r24
     f82:	8f 2f       	mov	r24, r31
     f84:	f7 01       	movw	r30, r14
     f86:	82 83       	std	Z+2, r24	; 0x02
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <_Z10setupHoursv+0x9e>
		}
		else
		{
			screen_arr[3] = -1;
     f8a:	f7 01       	movw	r30, r14
     f8c:	03 83       	std	Z+3, r16	; 0x03
			screen_arr[2] = -1;
     f8e:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500)
     f90:	c4 3f       	cpi	r28, 0xF4	; 244
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	df 07       	cpc	r29, r31
     f96:	10 f4       	brcc	.+4      	; 0xf9c <_Z10setupHoursv+0xaa>
		{
			blinker += 1;
     f98:	21 96       	adiw	r28, 0x01	; 1
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <_Z10setupHoursv+0xae>
		}
		else
		{
			blinker = 0;
     f9c:	c0 e0       	ldi	r28, 0x00	; 0
     f9e:	d0 e0       	ldi	r29, 0x00	; 0
     fa0:	8f ec       	ldi	r24, 0xCF	; 207
     fa2:	97 e0       	ldi	r25, 0x07	; 7
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <_Z10setupHoursv+0xb2>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <_Z10setupHoursv+0xb8>
     faa:	00 00       	nop
     fac:	c5 cf       	rjmp	.-118    	; 0xf38 <_Z10setupHoursv+0x46>
				hours += 1;
				hours %= 24;
			}
			if (key == 2)
			{
				rtcSendHours(hours);
     fae:	81 2f       	mov	r24, r17
     fb0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_Z12rtcSendHoursh>
		{
			blinker = 0;
		}
		_delay_ms(1);
	}
}
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	08 95       	ret

00000fca <_Z14clrScreenArrayv>:

	return 0;
}
void clrScreenArray()
{
	screen_arr[0] = -1;
     fca:	e9 e1       	ldi	r30, 0x19	; 25
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	80 83       	st	Z, r24
	screen_arr[1] = -1;
     fd2:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2] = -1;
     fd4:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3] = -1;
     fd6:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4] = -1;
     fd8:	84 83       	std	Z+4, r24	; 0x04
     fda:	08 95       	ret

00000fdc <_Z8rtcCyclev>:
		_delay_ms(1);
	}
}

uint8_t rtcCycle()
{
     fdc:	2f 92       	push	r2
     fde:	3f 92       	push	r3
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	67 97       	sbiw	r28, 0x17	; 23
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
	int8_t endLowEnergy = -1;
	static double adcAvg = 1023;

	uint8_t timeArr[0x13];

	bool powerGoodDelay = true;
    1010:	55 24       	eor	r5, r5
    1012:	53 94       	inc	r5
	}
}

uint8_t rtcCycle()
{
	int8_t startLowEnergy = -1;
    1014:	bb 24       	eor	r11, r11
    1016:	ba 94       	dec	r11
			{
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10;
				if (startLowEnergy == endLowEnergy)
				{
					clrScreenArray();
					powerGoodDelay = false;
    1018:	a1 2c       	mov	r10, r1
		}
		else
		{
			if (startLowEnergy == -1)
			{
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10 + POWERDELAY) % 60;
    101a:	0f 2e       	mov	r0, r31
    101c:	fc e3       	ldi	r31, 0x3C	; 60
    101e:	2f 2e       	mov	r2, r31
    1020:	31 2c       	mov	r3, r1
    1022:	f0 2d       	mov	r31, r0

		readTime(timeArr);

		if (powerGood || powerGoodDelay)
		{
			screen_arr[0] = timeArr[1] & 0x0F;
    1024:	0f 2e       	mov	r0, r31
    1026:	f9 e1       	ldi	r31, 0x19	; 25
    1028:	cf 2e       	mov	r12, r31
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	df 2e       	mov	r13, r31
    102e:	f0 2d       	mov	r31, r0
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2; //Dot Point Position
    1030:	68 94       	set
    1032:	44 24       	eor	r4, r4
    1034:	41 f8       	bld	r4, 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
    1036:	0c e7       	ldi	r16, 0x7C	; 124
    1038:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
    103a:	0f 2e       	mov	r0, r31
    103c:	fa e7       	ldi	r31, 0x7A	; 122
    103e:	8f 2e       	mov	r8, r31
    1040:	91 2c       	mov	r9, r1
    1042:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
    1044:	0f 2e       	mov	r0, r31
    1046:	f1 e1       	ldi	r31, 0x11	; 17
    1048:	6f 2e       	mov	r6, r31
    104a:	f1 e0       	ldi	r31, 0x01	; 1
    104c:	7f 2e       	mov	r7, r31
    104e:	f0 2d       	mov	r31, r0

	bool powerGoodDelay = true;

	while (true)
	{
		bool powerGood = PIND & 1;
    1050:	89 b1       	in	r24, 0x09	; 9
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	f8 2e       	mov	r15, r24
		//bool powerGood = false;

		const uint8_t POWERDELAY = 5; //Delay Before the lights is off

		readTime(timeArr);
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z8readTimePh>

		if (powerGood || powerGoodDelay)
    105e:	f1 10       	cpse	r15, r1
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <_Z8rtcCyclev+0x8a>
    1062:	55 20       	and	r5, r5
    1064:	01 f1       	breq	.+64     	; 0x10a6 <_Z8rtcCyclev+0xca>
		{
			screen_arr[0] = timeArr[1] & 0x0F;
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	98 2f       	mov	r25, r24
    106a:	9f 70       	andi	r25, 0x0F	; 15
    106c:	f6 01       	movw	r30, r12
    106e:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	95 95       	asr	r25
    1074:	87 95       	ror	r24
    1076:	95 95       	asr	r25
    1078:	87 95       	ror	r24
    107a:	95 95       	asr	r25
    107c:	87 95       	ror	r24
    107e:	95 95       	asr	r25
    1080:	87 95       	ror	r24
    1082:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	98 2f       	mov	r25, r24
    1088:	9f 70       	andi	r25, 0x0F	; 15
    108a:	92 83       	std	Z+2, r25	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	95 95       	asr	r25
    1090:	87 95       	ror	r24
    1092:	95 95       	asr	r25
    1094:	87 95       	ror	r24
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	95 95       	asr	r25
    109c:	87 95       	ror	r24
    109e:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[4] = 2; //Dot Point Position
    10a0:	44 82       	std	Z+4, r4	; 0x04
		}
		if (powerGood)
    10a2:	f1 10       	cpse	r15, r1
    10a4:	34 c0       	rjmp	.+104    	; 0x110e <_Z8rtcCyclev+0x132>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else
		{
			if (startLowEnergy == -1)
    10a6:	ff ef       	ldi	r31, 0xFF	; 255
    10a8:	bf 12       	cpse	r11, r31
    10aa:	1f c0       	rjmp	.+62     	; 0x10ea <_Z8rtcCyclev+0x10e>
			{
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10 + POWERDELAY) % 60;
    10ac:	2a 81       	ldd	r18, Y+2	; 0x02
    10ae:	82 2f       	mov	r24, r18
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	95 95       	asr	r25
    10b4:	87 95       	ror	r24
    10b6:	95 95       	asr	r25
    10b8:	87 95       	ror	r24
    10ba:	95 95       	asr	r25
    10bc:	87 95       	ror	r24
    10be:	95 95       	asr	r25
    10c0:	87 95       	ror	r24
    10c2:	ac 01       	movw	r20, r24
    10c4:	44 0f       	add	r20, r20
    10c6:	55 1f       	adc	r21, r21
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	2f 70       	andi	r18, 0x0F	; 15
    10da:	82 0f       	add	r24, r18
    10dc:	91 1d       	adc	r25, r1
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	b1 01       	movw	r22, r2
    10e2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__divmodhi4>
    10e6:	b8 2e       	mov	r11, r24
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <_Z8rtcCyclev+0x13a>
			}
			else
			{
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10;
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
				if (startLowEnergy == endLowEnergy)
    10ec:	98 2f       	mov	r25, r24
    10ee:	96 95       	lsr	r25
    10f0:	96 95       	lsr	r25
    10f2:	96 95       	lsr	r25
    10f4:	9e 71       	andi	r25, 0x1E	; 30
    10f6:	29 2f       	mov	r18, r25
    10f8:	22 0f       	add	r18, r18
    10fa:	22 0f       	add	r18, r18
    10fc:	92 0f       	add	r25, r18
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	89 0f       	add	r24, r25
    1102:	b8 12       	cpse	r11, r24
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <_Z8rtcCyclev+0x13a>
				{
					clrScreenArray();
    1106:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z14clrScreenArrayv>
					powerGoodDelay = false;
    110a:	5a 2c       	mov	r5, r10
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <_Z8rtcCyclev+0x13a>
		}
		if (powerGood)
		{
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
    110e:	55 24       	eor	r5, r5
    1110:	53 94       	inc	r5
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2; //Dot Point Position
		}
		if (powerGood)
		{
			startLowEnergy = -1;
    1112:	bb 24       	eor	r11, r11
    1114:	ba 94       	dec	r11
					powerGoodDelay = false;
				}
			}
		}

		uint8_t key = keyChecker();
    1116:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
    111a:	88 23       	and	r24, r24
    111c:	79 f0       	breq	.+30     	; 0x113c <_Z8rtcCyclev+0x160>
		{
			if (key == 1)
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	39 f4       	brne	.+14     	; 0x1130 <_Z8rtcCyclev+0x154>
			{
				// short press button 1
				if (!powerGoodDelay)
    1122:	51 10       	cpse	r5, r1
    1124:	83 c0       	rjmp	.+262    	; 0x122c <_Z8rtcCyclev+0x250>
				{
					powerGoodDelay = true;
    1126:	55 24       	eor	r5, r5
    1128:	53 94       	inc	r5
					startLowEnergy = -1;
    112a:	bb 24       	eor	r11, r11
    112c:	ba 94       	dec	r11
    112e:	06 c0       	rjmp	.+12     	; 0x113c <_Z8rtcCyclev+0x160>
				}
				else
					return 1;
			}

			if (key == 2)
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	09 f4       	brne	.+2      	; 0x1136 <_Z8rtcCyclev+0x15a>
    1134:	7d c0       	rjmp	.+250    	; 0x1230 <_Z8rtcCyclev+0x254>
			{
				// short press button 2
				return 5;
			}

			if (key == 3)
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	09 f4       	brne	.+2      	; 0x113c <_Z8rtcCyclev+0x160>
    113a:	7c c0       	rjmp	.+248    	; 0x1234 <_Z8rtcCyclev+0x258>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
    113c:	f8 01       	movw	r30, r16
    113e:	80 81       	ld	r24, Z
    1140:	8f 70       	andi	r24, 0x0F	; 15
    1142:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    1144:	80 81       	ld	r24, Z
    1146:	80 7f       	andi	r24, 0xF0	; 240
    1148:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    114a:	80 81       	ld	r24, Z
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
    1150:	f4 01       	movw	r30, r8
    1152:	80 81       	ld	r24, Z
    1154:	80 64       	ori	r24, 0x40	; 64
    1156:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
    1158:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_ZN8AdcClass9DataReadyE>
    115c:	88 23       	and	r24, r24
    115e:	e1 f3       	breq	.-8      	; 0x1158 <_Z8rtcCyclev+0x17c>
		Voltage = CalculateVoltage(Data);
    1160:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <_ZN8AdcClass4DataE>
    1164:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <_ZN8AdcClass4DataE+0x1>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    1170:	2a ea       	ldi	r18, 0xAA	; 170
    1172:	31 ef       	ldi	r19, 0xF1	; 241
    1174:	44 e9       	ldi	r20, 0x94	; 148
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
    117c:	f3 01       	movw	r30, r6
    117e:	64 83       	std	Z+4, r22	; 0x04
    1180:	75 83       	std	Z+5, r23	; 0x05
    1182:	86 83       	std	Z+6, r24	; 0x06
    1184:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
    1186:	a0 92 20 01 	sts	0x0120, r10	; 0x800120 <_ZN8AdcClass9DataReadyE>
		}
		adcOb.MesureVoltage(PORTC1);

		//Opacity Correction
		const double corrector = 1024;
		adcAvg = adcAvg * (corrector - 1) / corrector + (double)adcOb.Data / corrector;
    118a:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <_ZN8AdcClass4DataE>
    118e:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <_ZN8AdcClass4DataE+0x1>
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 ec       	ldi	r19, 0xC0	; 192
    1196:	4f e7       	ldi	r20, 0x7F	; 127
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    119e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    11a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    11a6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    11aa:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5a e3       	ldi	r21, 0x3A	; 58
    11b6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    11ba:	6c 8b       	std	Y+20, r22	; 0x14
    11bc:	7d 8b       	std	Y+21, r23	; 0x15
    11be:	8e 8b       	std	Y+22, r24	; 0x16
    11c0:	9f 8b       	std	Y+23, r25	; 0x17
    11c2:	b7 01       	movw	r22, r14
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5a e3       	ldi	r21, 0x3A	; 58
    11d4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	6c 89       	ldd	r22, Y+20	; 0x14
    11de:	7d 89       	ldd	r23, Y+21	; 0x15
    11e0:	8e 89       	ldd	r24, Y+22	; 0x16
    11e2:	9f 89       	ldd	r25, Y+23	; 0x17
    11e4:	0e 94 df 0b 	call	0x17be	; 0x17be <__addsf3>
    11e8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    11ec:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    11f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    11f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		opacity = MAXGRADES - adcAvg / (1024 / (MAXGRADES + 1));
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5c e3       	ldi	r21, 0x3C	; 60
    1200:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e7       	ldi	r24, 0x70	; 112
    120e:	91 e4       	ldi	r25, 0x41	; 65
    1210:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__subsf3>
    1214:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fixsfsi>
    1218:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <opacity>
		if (opacity < 0)
    121c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opacity>
    1220:	88 23       	and	r24, r24
    1222:	0c f0       	brlt	.+2      	; 0x1226 <_Z8rtcCyclev+0x24a>
    1224:	15 cf       	rjmp	.-470    	; 0x1050 <_Z8rtcCyclev+0x74>
			opacity = 0;
    1226:	a0 92 05 01 	sts	0x0105, r10	; 0x800105 <opacity>
    122a:	12 cf       	rjmp	.-476    	; 0x1050 <_Z8rtcCyclev+0x74>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else
					return 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <_Z8rtcCyclev+0x25a>
			}

			if (key == 2)
			{
				// short press button 2
				return 5;
    1230:	85 e0       	ldi	r24, 0x05	; 5
    1232:	01 c0       	rjmp	.+2      	; 0x1236 <_Z8rtcCyclev+0x25a>
			}

			if (key == 3)
			{
				// long press button 2
				return 3;
    1234:	83 e0       	ldi	r24, 0x03	; 3
		adcAvg = adcAvg * (corrector - 1) / corrector + (double)adcOb.Data / corrector;
		opacity = MAXGRADES - adcAvg / (1024 / (MAXGRADES + 1));
		if (opacity < 0)
			opacity = 0;
	}
}
    1236:	67 96       	adiw	r28, 0x17	; 23
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	3f 90       	pop	r3
    1264:	2f 90       	pop	r2
    1266:	08 95       	ret

00001268 <main>:

int main(void)
{

	// initialize EEPROM
	if (eeprom_read_byte(EEP_TIMER_ALARM_TIME) == 0xFF)
    1268:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <EEP_TIMER_ALARM_TIME>
    126c:	d0 91 10 01 	lds	r29, 0x0110	; 0x800110 <EEP_TIMER_ALARM_TIME+0x1>
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <eeprom_read_byte>
    1276:	8f 3f       	cpi	r24, 0xFF	; 255
    1278:	31 f4       	brne	.+12     	; 0x1286 <main+0x1e>
	{
		eeprom_write_byte(EEP_TIMER_ALARM_TIME, alarmTime);
    127a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <alarmTime>
    127e:	ce 01       	movw	r24, r28
    1280:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <eeprom_write_byte>
    1284:	02 c0       	rjmp	.+4      	; 0x128a <main+0x22>
	}
	else
	{
		alarmTime = eeprom_read_byte(EEP_TIMER_ALARM_TIME);
    1286:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
	}

	uint8_t currentScreen = 0;

	DDRD &= ~(1 << 3 | 1 << PORTD4);	//Change direction to input
    128a:	8a b1       	in	r24, 0x0a	; 10
    128c:	87 7e       	andi	r24, 0xE7	; 231
    128e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1 << PORTD3 | 1 << PORTD4; //Enable pull-up resistors
    1290:	8b b1       	in	r24, 0x0b	; 11
    1292:	88 61       	ori	r24, 0x18	; 24
    1294:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray(); //Start from blank screen
    1296:	0e 94 e5 07 	call	0xfca	; 0xfca <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
    129a:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z21EnableTimer0Interruptv>
	sei();
    129e:	78 94       	sei
	rtcInit();
    12a0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_Z7rtcInitv>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    12a4:	ec e7       	ldi	r30, 0x7C	; 124
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 7f       	andi	r24, 0xF0	; 240
    12ac:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    12ae:	80 81       	ld	r24, Z
    12b0:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    12b2:	ea e7       	ldi	r30, 0x7A	; 122
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	87 60       	ori	r24, 0x07	; 7
    12ba:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
    12c2:	80 81       	ld	r24, Z
    12c4:	80 68       	ori	r24, 0x80	; 128
    12c6:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
    12c8:	80 81       	ld	r24, Z
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	80 83       	st	Z, r24
	adcOb.Init();
	buzzer(false); // Turn off buzzer
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
	else
	{
		alarmTime = eeprom_read_byte(EEP_TIMER_ALARM_TIME);
	}

	uint8_t currentScreen = 0;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
	adcOb.Init();
	buzzer(false); // Turn off buzzer

	while (1)
	{
		switch (currentScreen)
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	87 30       	cpi	r24, 0x07	; 7
    12da:	91 05       	cpc	r25, r1
    12dc:	d0 f4       	brcc	.+52     	; 0x1312 <main+0xaa>
    12de:	fc 01       	movw	r30, r24
    12e0:	ec 5c       	subi	r30, 0xCC	; 204
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__tablejump2__>
		{
		case 0:
			currentScreen = rtcCycle();
    12e8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_Z8rtcCyclev>
			break;
    12ec:	f4 cf       	rjmp	.-24     	; 0x12d6 <main+0x6e>
		case 1:
			currentScreen = dsMode();
    12ee:	0e 94 a6 04 	call	0x94c	; 0x94c <_Z6dsModev>
			break;
    12f2:	f1 cf       	rjmp	.-30     	; 0x12d6 <main+0x6e>
		case 2:
			currentScreen = acbMode();
    12f4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z7acbModev>
			break;
    12f8:	ee cf       	rjmp	.-36     	; 0x12d6 <main+0x6e>
		case 3:
			currentScreen = setupMinutes();
    12fa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_Z12setupMinutesv>
			break;
    12fe:	eb cf       	rjmp	.-42     	; 0x12d6 <main+0x6e>
		case 4:
			currentScreen = setupHours();
    1300:	0e 94 79 07 	call	0xef2	; 0xef2 <_Z10setupHoursv>
			break;
    1304:	e8 cf       	rjmp	.-48     	; 0x12d6 <main+0x6e>
		case 5:
			currentScreen = timerMode();
    1306:	0e 94 0a 04 	call	0x814	; 0x814 <_Z9timerModev>
			break;
    130a:	e5 cf       	rjmp	.-54     	; 0x12d6 <main+0x6e>
		case 6:
			currentScreen = setupTimer();
    130c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z10setupTimerv>
			break;
    1310:	e2 cf       	rjmp	.-60     	; 0x12d6 <main+0x6e>
		default:
			currentScreen = rtcCycle();
    1312:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_Z8rtcCyclev>
			break;
    1316:	df cf       	rjmp	.-66     	; 0x12d6 <main+0x6e>

00001318 <_GLOBAL__sub_I_temperature_byte1>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_ZN8AdcClass4DataE+0x1>
    1320:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZN8AdcClass4DataE>
		DataReady = false;
    1324:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <_ZN8AdcClass9DataReadyE>
		Resistor = INFINITY;
    1328:	e1 e1       	ldi	r30, 0x11	; 17
    132a:	f1 e0       	ldi	r31, 0x01	; 1
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e8       	ldi	r26, 0x80	; 128
    1332:	bf e7       	ldi	r27, 0x7F	; 127
    1334:	80 83       	st	Z, r24
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	a2 83       	std	Z+2, r26	; 0x02
    133a:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
    133c:	84 83       	std	Z+4, r24	; 0x04
    133e:	95 83       	std	Z+5, r25	; 0x05
    1340:	a6 83       	std	Z+6, r26	; 0x06
    1342:	b7 83       	std	Z+7, r27	; 0x07
    1344:	08 95       	ret

00001346 <_Z13i2cSetBitratej>:
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
}
    1346:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    134a:	bc 01       	movw	r22, r24
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	8a ef       	ldi	r24, 0xFA	; 250
    135e:	95 e4       	ldi	r25, 0x45	; 69
    1360:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__divsf3>
    1364:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
    1368:	60 31       	cpi	r22, 0x10	; 16
    136a:	88 f0       	brcs	.+34     	; 0x138e <_Z13i2cSetBitratej+0x48>
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	60 51       	subi	r22, 0x10	; 16
    1370:	71 09       	sbc	r23, r1
    1372:	07 2e       	mov	r0, r23
    1374:	00 0c       	add	r0, r0
    1376:	88 0b       	sbc	r24, r24
    1378:	99 0b       	sbc	r25, r25
    137a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__floatsisf>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	5e e3       	ldi	r21, 0x3E	; 62
    1386:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    138a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
    138e:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1392:	88 b1       	in	r24, 0x08	; 8
    1394:	80 63       	ori	r24, 0x30	; 48
    1396:	88 b9       	out	0x08, r24	; 8
    1398:	08 95       	ret

0000139a <_Z11i2cSendStopv>:
    139a:	84 e9       	ldi	r24, 0x94	; 148
    139c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	ec eb       	ldi	r30, 0xBC	; 188
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	90 81       	ld	r25, Z
    13a8:	94 ff       	sbrs	r25, 4
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <_Z11i2cSendStopv+0x2e>
    13ac:	8a 35       	cpi	r24, 0x5A	; 90
    13ae:	31 f4       	brne	.+12     	; 0x13bc <_Z11i2cSendStopv+0x22>
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	8a 95       	dec	r24
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <_Z11i2cSendStopv+0x18>
    13b6:	00 c0       	rjmp	.+0      	; 0x13b8 <_Z11i2cSendStopv+0x1e>
    13b8:	84 e6       	ldi	r24, 0x64	; 100
    13ba:	08 95       	ret
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	9a 95       	dec	r25
    13c0:	f1 f7       	brne	.-4      	; 0x13be <_Z11i2cSendStopv+0x24>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <_Z11i2cSendStopv+0x2a>
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	ef cf       	rjmp	.-34     	; 0x13a6 <_Z11i2cSendStopv+0xc>
    13c8:	8a 35       	cpi	r24, 0x5A	; 90
    13ca:	90 f7       	brcc	.-28     	; 0x13b0 <_Z11i2cSendStopv+0x16>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <_Z18i2cWaitForCompletev>:
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	ec eb       	ldi	r30, 0xBC	; 188
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	90 81       	ld	r25, Z
    13d8:	99 23       	and	r25, r25
    13da:	74 f0       	brlt	.+28     	; 0x13f8 <_Z18i2cWaitForCompletev+0x28>
    13dc:	8a 35       	cpi	r24, 0x5A	; 90
    13de:	31 f4       	brne	.+12     	; 0x13ec <_Z18i2cWaitForCompletev+0x1c>
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	8a 95       	dec	r24
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <_Z18i2cWaitForCompletev+0x12>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <_Z18i2cWaitForCompletev+0x18>
    13e8:	84 e6       	ldi	r24, 0x64	; 100
    13ea:	08 95       	ret
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	9a 95       	dec	r25
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <_Z18i2cWaitForCompletev+0x1e>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <_Z18i2cWaitForCompletev+0x24>
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	ef cf       	rjmp	.-34     	; 0x13d6 <_Z18i2cWaitForCompletev+0x6>
    13f8:	8a 35       	cpi	r24, 0x5A	; 90
    13fa:	90 f7       	brcc	.-28     	; 0x13e0 <_Z18i2cWaitForCompletev+0x10>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	08 95       	ret

00001400 <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
    1400:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1404:	28 7f       	andi	r18, 0xF8	; 248
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	11 f0       	breq	.+4      	; 0x1414 <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
    1414:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
    1416:	08 95       	ret

00001418 <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
	i2cSetBitrate(400);
    1422:	80 e9       	ldi	r24, 0x90	; 144
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	0e 94 a3 09 	call	0x1346	; 0x1346 <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    142a:	cc eb       	ldi	r28, 0xBC	; 188
    142c:	d0 e0       	ldi	r29, 0x00	; 0
    142e:	84 ea       	ldi	r24, 0xA4	; 164
    1430:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    1432:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1436:	0f 2e       	mov	r0, r31
    1438:	fb eb       	ldi	r31, 0xBB	; 187
    143a:	ef 2e       	mov	r14, r31
    143c:	f1 2c       	mov	r15, r1
    143e:	f0 2d       	mov	r31, r0
    1440:	80 ed       	ldi	r24, 0xD0	; 208
    1442:	f7 01       	movw	r30, r14
    1444:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1446:	14 e8       	ldi	r17, 0x84	; 132
    1448:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    144a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    144e:	88 e2       	ldi	r24, 0x28	; 40
    1450:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1454:	8e e0       	ldi	r24, 0x0E	; 14
    1456:	f7 01       	movw	r30, r14
    1458:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    145a:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
    145c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1460:	88 e2       	ldi	r24, 0x28	; 40
    1462:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	f7 01       	movw	r30, r14
    146a:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    146c:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
    146e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1472:	88 e2       	ldi	r24, 0x28	; 40
    1474:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	f7 01       	movw	r30, r14
    147c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    147e:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
    1480:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1484:	88 e2       	ldi	r24, 0x28	; 40
    1486:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    148a:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z11i2cSendStopv>
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	08 95       	ret

0000149a <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
    149a:	9f 92       	push	r9
    149c:	af 92       	push	r10
    149e:	bf 92       	push	r11
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    14b2:	cc eb       	ldi	r28, 0xBC	; 188
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
    14b6:	04 ea       	ldi	r16, 0xA4	; 164
    14b8:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
    14ba:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14be:	0f 2e       	mov	r0, r31
    14c0:	fb eb       	ldi	r31, 0xBB	; 187
    14c2:	ef 2e       	mov	r14, r31
    14c4:	f1 2c       	mov	r15, r1
    14c6:	f0 2d       	mov	r31, r0
    14c8:	80 ed       	ldi	r24, 0xD0	; 208
    14ca:	f7 01       	movw	r30, r14
    14cc:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14ce:	14 e8       	ldi	r17, 0x84	; 132
    14d0:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    14d2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14d6:	88 e2       	ldi	r24, 0x28	; 40
    14d8:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14dc:	f7 01       	movw	r30, r14
    14de:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14e0:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    14e2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14e6:	88 e2       	ldi	r24, 0x28	; 40
    14e8:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    14ec:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    14f0:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
    14f2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14f6:	81 ed       	ldi	r24, 0xD1	; 209
    14f8:	f7 01       	movw	r30, r14
    14fa:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14fc:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
    14fe:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1502:	88 e2       	ldi	r24, 0x28	; 40
    1504:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
    1508:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
    150c:	e5 01       	movw	r28, r10
    150e:	65 01       	movw	r12, r10
    1510:	f3 e1       	ldi	r31, 0x13	; 19
    1512:	cf 0e       	add	r12, r31
    1514:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1516:	0f 2e       	mov	r0, r31
    1518:	fc eb       	ldi	r31, 0xBC	; 188
    151a:	ef 2e       	mov	r14, r31
    151c:	f1 2c       	mov	r15, r1
    151e:	f0 2d       	mov	r31, r0
    1520:	0f 2e       	mov	r0, r31
    1522:	f4 ec       	ldi	r31, 0xC4	; 196
    1524:	9f 2e       	mov	r9, r31
    1526:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1528:	0b eb       	ldi	r16, 0xBB	; 187
    152a:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    152c:	f7 01       	movw	r30, r14
    152e:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
    1530:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1534:	f8 01       	movw	r30, r16
    1536:	80 81       	ld	r24, Z
		timeArr[i] = i2cGetReceivedByte();
    1538:	89 93       	st	Y+, r24
		i2cWaitForComplete();
    153a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
    153e:	80 e5       	ldi	r24, 0x50	; 80
    1540:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
    1544:	cc 15       	cp	r28, r12
    1546:	dd 05       	cpc	r29, r13
    1548:	89 f7       	brne	.-30     	; 0x152c <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
    154a:	84 e8       	ldi	r24, 0x84	; 132
    154c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
    1550:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1554:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	timeArr[6] = i2cGetReceivedByte();
    1558:	f5 01       	movw	r30, r10
    155a:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
    155c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
    1560:	88 e5       	ldi	r24, 0x58	; 88
    1562:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>

	

}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	08 95       	ret

0000157e <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
    158a:	9d ec       	ldi	r25, 0xCD	; 205
    158c:	89 9f       	mul	r24, r25
    158e:	91 2d       	mov	r25, r1
    1590:	11 24       	eor	r1, r1
    1592:	96 95       	lsr	r25
    1594:	96 95       	lsr	r25
    1596:	96 95       	lsr	r25
	bdc <<= 4;
    1598:	09 2f       	mov	r16, r25
    159a:	02 95       	swap	r16
    159c:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= minutes%10;
    159e:	99 0f       	add	r25, r25
    15a0:	29 2f       	mov	r18, r25
    15a2:	22 0f       	add	r18, r18
    15a4:	22 0f       	add	r18, r18
    15a6:	92 0f       	add	r25, r18
    15a8:	89 1b       	sub	r24, r25
    15aa:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    15ac:	cc eb       	ldi	r28, 0xBC	; 188
    15ae:	d0 e0       	ldi	r29, 0x00	; 0
    15b0:	84 ea       	ldi	r24, 0xA4	; 164
    15b2:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    15b4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15b8:	0f 2e       	mov	r0, r31
    15ba:	fb eb       	ldi	r31, 0xBB	; 187
    15bc:	ef 2e       	mov	r14, r31
    15be:	f1 2c       	mov	r15, r1
    15c0:	f0 2d       	mov	r31, r0
    15c2:	80 ed       	ldi	r24, 0xD0	; 208
    15c4:	f7 01       	movw	r30, r14
    15c6:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15c8:	14 e8       	ldi	r17, 0x84	; 132
    15ca:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    15cc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15d0:	88 e2       	ldi	r24, 0x28	; 40
    15d2:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15d6:	f7 01       	movw	r30, r14
    15d8:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15da:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    15dc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15e0:	88 e2       	ldi	r24, 0x28	; 40
    15e2:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15e6:	f7 01       	movw	r30, r14
    15e8:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15ea:	18 83       	st	Y, r17

	i2cSendByte(0);
	i2cWaitForComplete();
    15ec:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15f0:	88 e2       	ldi	r24, 0x28	; 40
    15f2:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15f6:	f7 01       	movw	r30, r14
    15f8:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15fa:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    15fc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1600:	88 e2       	ldi	r24, 0x28	; 40
    1602:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1606:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z11i2cSendStopv>
}
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	08 95       	ret

00001618 <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
    1624:	9d ec       	ldi	r25, 0xCD	; 205
    1626:	89 9f       	mul	r24, r25
    1628:	91 2d       	mov	r25, r1
    162a:	11 24       	eor	r1, r1
    162c:	96 95       	lsr	r25
    162e:	96 95       	lsr	r25
    1630:	96 95       	lsr	r25
	bdc <<= 4;
    1632:	09 2f       	mov	r16, r25
    1634:	02 95       	swap	r16
    1636:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= hours%10;
    1638:	99 0f       	add	r25, r25
    163a:	29 2f       	mov	r18, r25
    163c:	22 0f       	add	r18, r18
    163e:	22 0f       	add	r18, r18
    1640:	92 0f       	add	r25, r18
    1642:	89 1b       	sub	r24, r25
    1644:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1646:	cc eb       	ldi	r28, 0xBC	; 188
    1648:	d0 e0       	ldi	r29, 0x00	; 0
    164a:	84 ea       	ldi	r24, 0xA4	; 164
    164c:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    164e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1652:	0f 2e       	mov	r0, r31
    1654:	fb eb       	ldi	r31, 0xBB	; 187
    1656:	ef 2e       	mov	r14, r31
    1658:	f1 2c       	mov	r15, r1
    165a:	f0 2d       	mov	r31, r0
    165c:	80 ed       	ldi	r24, 0xD0	; 208
    165e:	f7 01       	movw	r30, r14
    1660:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1662:	14 e8       	ldi	r17, 0x84	; 132
    1664:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1666:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    166a:	88 e2       	ldi	r24, 0x28	; 40
    166c:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	f7 01       	movw	r30, r14
    1674:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1676:	18 83       	st	Y, r17

	i2cSendByte(0x02);
	i2cWaitForComplete();
    1678:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    167c:	88 e2       	ldi	r24, 0x28	; 40
    167e:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1682:	f7 01       	movw	r30, r14
    1684:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1686:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    1688:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    168c:	88 e2       	ldi	r24, 0x28	; 40
    168e:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1692:	0e 94 cd 09 	call	0x139a	; 0x139a <_Z11i2cSendStopv>
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
    16a4:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
    16a6:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
    16a8:	8a b1       	in	r24, 0x0a	; 10
    16aa:	82 62       	ori	r24, 0x22	; 34
    16ac:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
    16ae:	8b b1       	in	r24, 0x0b	; 11
    16b0:	8d 7d       	andi	r24, 0xDD	; 221
    16b2:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
    16b4:	84 b1       	in	r24, 0x04	; 4
    16b6:	8d 63       	ori	r24, 0x3D	; 61
    16b8:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
    16ba:	85 b1       	in	r24, 0x05	; 5
    16bc:	82 7c       	andi	r24, 0xC2	; 194
    16be:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
    16c0:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
    16c2:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
    16c4:	8a b1       	in	r24, 0x0a	; 10
    16c6:	80 6c       	ori	r24, 0xC0	; 192
    16c8:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
    16ca:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
    16cc:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
    16ce:	8b b1       	in	r24, 0x0b	; 11
    16d0:	80 6c       	ori	r24, 0xC0	; 192
    16d2:	8b b9       	out	0x0b, r24	; 11
    16d4:	08 95       	ret

000016d6 <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	c8 2f       	mov	r28, r24
    16dc:	d6 2f       	mov	r29, r22
	ClrScr();
    16de:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
    16e2:	d1 11       	cpse	r29, r1
    16e4:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
    16e6:	8c 2f       	mov	r24, r28
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	86 37       	cpi	r24, 0x76	; 118
    16ec:	91 05       	cpc	r25, r1
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <_Z11Display7seghb+0x1c>
    16f0:	4d c0       	rjmp	.+154    	; 0x178c <_Z11Display7seghb+0xb6>
    16f2:	fc 01       	movw	r30, r24
    16f4:	e5 5c       	subi	r30, 0xC5	; 197
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    16fc:	85 b1       	in	r24, 0x05	; 5
    16fe:	89 62       	ori	r24, 0x29	; 41
    1700:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1702:	8b b1       	in	r24, 0x0b	; 11
    1704:	82 62       	ori	r24, 0x22	; 34
    1706:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1708:	42 9a       	sbi	0x08, 2	; 8
				break;
    170a:	42 c0       	rjmp	.+132    	; 0x1790 <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    170c:	85 b1       	in	r24, 0x05	; 5
    170e:	89 60       	ori	r24, 0x09	; 9
    1710:	85 b9       	out	0x05, r24	; 5
				break;
    1712:	3e c0       	rjmp	.+124    	; 0x1790 <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    1714:	85 b1       	in	r24, 0x05	; 5
    1716:	85 62       	ori	r24, 0x25	; 37
    1718:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    171a:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    171c:	42 9a       	sbi	0x08, 2	; 8
				break;
    171e:	38 c0       	rjmp	.+112    	; 0x1790 <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1720:	85 b1       	in	r24, 0x05	; 5
    1722:	8d 62       	ori	r24, 0x2D	; 45
    1724:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1726:	59 9a       	sbi	0x0b, 1	; 11
				break;
    1728:	33 c0       	rjmp	.+102    	; 0x1790 <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    172a:	85 b1       	in	r24, 0x05	; 5
    172c:	8d 60       	ori	r24, 0x0D	; 13
    172e:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    1730:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    1732:	2e c0       	rjmp	.+92     	; 0x1790 <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1734:	85 b1       	in	r24, 0x05	; 5
    1736:	8c 62       	ori	r24, 0x2C	; 44
    1738:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    173a:	8b b1       	in	r24, 0x0b	; 11
    173c:	82 62       	ori	r24, 0x22	; 34
    173e:	8b b9       	out	0x0b, r24	; 11
				break;
    1740:	27 c0       	rjmp	.+78     	; 0x1790 <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1742:	85 b1       	in	r24, 0x05	; 5
    1744:	8c 62       	ori	r24, 0x2C	; 44
    1746:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1748:	8b b1       	in	r24, 0x0b	; 11
    174a:	82 62       	ori	r24, 0x22	; 34
    174c:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    174e:	42 9a       	sbi	0x08, 2	; 8
				break;
    1750:	1f c0       	rjmp	.+62     	; 0x1790 <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    1752:	85 b1       	in	r24, 0x05	; 5
    1754:	89 60       	ori	r24, 0x09	; 9
    1756:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1758:	8b b1       	in	r24, 0x0b	; 11
    175a:	82 62       	ori	r24, 0x22	; 34
    175c:	8b b9       	out	0x0b, r24	; 11
				break;
    175e:	18 c0       	rjmp	.+48     	; 0x1790 <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1760:	85 b1       	in	r24, 0x05	; 5
    1762:	8d 62       	ori	r24, 0x2D	; 45
    1764:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1766:	8b b1       	in	r24, 0x0b	; 11
    1768:	82 62       	ori	r24, 0x22	; 34
    176a:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    176c:	42 9a       	sbi	0x08, 2	; 8
				break;
    176e:	10 c0       	rjmp	.+32     	; 0x1790 <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1770:	85 b1       	in	r24, 0x05	; 5
    1772:	8d 62       	ori	r24, 0x2D	; 45
    1774:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1776:	8b b1       	in	r24, 0x0b	; 11
    1778:	82 62       	ori	r24, 0x22	; 34
    177a:	8b b9       	out	0x0b, r24	; 11
				break;
    177c:	09 c0       	rjmp	.+18     	; 0x1790 <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    177e:	85 b1       	in	r24, 0x05	; 5
    1780:	88 62       	ori	r24, 0x28	; 40
    1782:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    1784:	42 9a       	sbi	0x08, 2	; 8
				break;
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    1788:	2a 9a       	sbi	0x05, 2	; 5
				break;
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <_Z11Display7seghb+0xba>
		default: ClrScr();
    178c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z6ClrScrv>
				break;

	}
}
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	08 95       	ret

00001796 <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	59 f0       	breq	.+22     	; 0x17b0 <_Z9NextDigith+0x1a>
    179a:	18 f4       	brcc	.+6      	; 0x17a2 <_Z9NextDigith+0xc>
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	31 f0       	breq	.+12     	; 0x17ac <_Z9NextDigith+0x16>
    17a0:	08 95       	ret
    17a2:	83 30       	cpi	r24, 0x03	; 3
    17a4:	39 f0       	breq	.+14     	; 0x17b4 <_Z9NextDigith+0x1e>
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <_Z9NextDigith+0x22>
    17aa:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    17ac:	43 98       	cbi	0x08, 3	; 8
		break;
    17ae:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    17b0:	5e 98       	cbi	0x0b, 6	; 11
		break;
    17b2:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    17b4:	5f 98       	cbi	0x0b, 7	; 11
		break;
    17b6:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    17b8:	29 98       	cbi	0x05, 1	; 5
    17ba:	08 95       	ret

000017bc <__subsf3>:
    17bc:	50 58       	subi	r21, 0x80	; 128

000017be <__addsf3>:
    17be:	bb 27       	eor	r27, r27
    17c0:	aa 27       	eor	r26, r26
    17c2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__addsf3x>
    17c6:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__fp_round>
    17ca:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_pscA>
    17ce:	38 f0       	brcs	.+14     	; 0x17de <__addsf3+0x20>
    17d0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_pscB>
    17d4:	20 f0       	brcs	.+8      	; 0x17de <__addsf3+0x20>
    17d6:	39 f4       	brne	.+14     	; 0x17e6 <__addsf3+0x28>
    17d8:	9f 3f       	cpi	r25, 0xFF	; 255
    17da:	19 f4       	brne	.+6      	; 0x17e2 <__addsf3+0x24>
    17dc:	26 f4       	brtc	.+8      	; 0x17e6 <__addsf3+0x28>
    17de:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_nan>
    17e2:	0e f4       	brtc	.+2      	; 0x17e6 <__addsf3+0x28>
    17e4:	e0 95       	com	r30
    17e6:	e7 fb       	bst	r30, 7
    17e8:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_inf>

000017ec <__addsf3x>:
    17ec:	e9 2f       	mov	r30, r25
    17ee:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_split3>
    17f2:	58 f3       	brcs	.-42     	; 0x17ca <__addsf3+0xc>
    17f4:	ba 17       	cp	r27, r26
    17f6:	62 07       	cpc	r22, r18
    17f8:	73 07       	cpc	r23, r19
    17fa:	84 07       	cpc	r24, r20
    17fc:	95 07       	cpc	r25, r21
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__addsf3x+0x1c>
    1800:	79 f4       	brne	.+30     	; 0x1820 <__addsf3x+0x34>
    1802:	a6 f5       	brtc	.+104    	; 0x186c <__addsf3x+0x80>
    1804:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_zero>
    1808:	0e f4       	brtc	.+2      	; 0x180c <__addsf3x+0x20>
    180a:	e0 95       	com	r30
    180c:	0b 2e       	mov	r0, r27
    180e:	ba 2f       	mov	r27, r26
    1810:	a0 2d       	mov	r26, r0
    1812:	0b 01       	movw	r0, r22
    1814:	b9 01       	movw	r22, r18
    1816:	90 01       	movw	r18, r0
    1818:	0c 01       	movw	r0, r24
    181a:	ca 01       	movw	r24, r20
    181c:	a0 01       	movw	r20, r0
    181e:	11 24       	eor	r1, r1
    1820:	ff 27       	eor	r31, r31
    1822:	59 1b       	sub	r21, r25
    1824:	99 f0       	breq	.+38     	; 0x184c <__addsf3x+0x60>
    1826:	59 3f       	cpi	r21, 0xF9	; 249
    1828:	50 f4       	brcc	.+20     	; 0x183e <__addsf3x+0x52>
    182a:	50 3e       	cpi	r21, 0xE0	; 224
    182c:	68 f1       	brcs	.+90     	; 0x1888 <__addsf3x+0x9c>
    182e:	1a 16       	cp	r1, r26
    1830:	f0 40       	sbci	r31, 0x00	; 0
    1832:	a2 2f       	mov	r26, r18
    1834:	23 2f       	mov	r18, r19
    1836:	34 2f       	mov	r19, r20
    1838:	44 27       	eor	r20, r20
    183a:	58 5f       	subi	r21, 0xF8	; 248
    183c:	f3 cf       	rjmp	.-26     	; 0x1824 <__addsf3x+0x38>
    183e:	46 95       	lsr	r20
    1840:	37 95       	ror	r19
    1842:	27 95       	ror	r18
    1844:	a7 95       	ror	r26
    1846:	f0 40       	sbci	r31, 0x00	; 0
    1848:	53 95       	inc	r21
    184a:	c9 f7       	brne	.-14     	; 0x183e <__addsf3x+0x52>
    184c:	7e f4       	brtc	.+30     	; 0x186c <__addsf3x+0x80>
    184e:	1f 16       	cp	r1, r31
    1850:	ba 0b       	sbc	r27, r26
    1852:	62 0b       	sbc	r22, r18
    1854:	73 0b       	sbc	r23, r19
    1856:	84 0b       	sbc	r24, r20
    1858:	ba f0       	brmi	.+46     	; 0x1888 <__addsf3x+0x9c>
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	a1 f0       	breq	.+40     	; 0x1886 <__addsf3x+0x9a>
    185e:	ff 0f       	add	r31, r31
    1860:	bb 1f       	adc	r27, r27
    1862:	66 1f       	adc	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	88 1f       	adc	r24, r24
    1868:	c2 f7       	brpl	.-16     	; 0x185a <__addsf3x+0x6e>
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <__addsf3x+0x9c>
    186c:	ba 0f       	add	r27, r26
    186e:	62 1f       	adc	r22, r18
    1870:	73 1f       	adc	r23, r19
    1872:	84 1f       	adc	r24, r20
    1874:	48 f4       	brcc	.+18     	; 0x1888 <__addsf3x+0x9c>
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b7 95       	ror	r27
    187e:	f7 95       	ror	r31
    1880:	9e 3f       	cpi	r25, 0xFE	; 254
    1882:	08 f0       	brcs	.+2      	; 0x1886 <__addsf3x+0x9a>
    1884:	b0 cf       	rjmp	.-160    	; 0x17e6 <__addsf3+0x28>
    1886:	93 95       	inc	r25
    1888:	88 0f       	add	r24, r24
    188a:	08 f0       	brcs	.+2      	; 0x188e <__addsf3x+0xa2>
    188c:	99 27       	eor	r25, r25
    188e:	ee 0f       	add	r30, r30
    1890:	97 95       	ror	r25
    1892:	87 95       	ror	r24
    1894:	08 95       	ret

00001896 <__divsf3>:
    1896:	0e 94 5f 0c 	call	0x18be	; 0x18be <__divsf3x>
    189a:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__fp_round>
    189e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_pscB>
    18a2:	58 f0       	brcs	.+22     	; 0x18ba <__divsf3+0x24>
    18a4:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_pscA>
    18a8:	40 f0       	brcs	.+16     	; 0x18ba <__divsf3+0x24>
    18aa:	29 f4       	brne	.+10     	; 0x18b6 <__divsf3+0x20>
    18ac:	5f 3f       	cpi	r21, 0xFF	; 255
    18ae:	29 f0       	breq	.+10     	; 0x18ba <__divsf3+0x24>
    18b0:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_inf>
    18b4:	51 11       	cpse	r21, r1
    18b6:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_szero>
    18ba:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_nan>

000018be <__divsf3x>:
    18be:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_split3>
    18c2:	68 f3       	brcs	.-38     	; 0x189e <__divsf3+0x8>

000018c4 <__divsf3_pse>:
    18c4:	99 23       	and	r25, r25
    18c6:	b1 f3       	breq	.-20     	; 0x18b4 <__divsf3+0x1e>
    18c8:	55 23       	and	r21, r21
    18ca:	91 f3       	breq	.-28     	; 0x18b0 <__divsf3+0x1a>
    18cc:	95 1b       	sub	r25, r21
    18ce:	55 0b       	sbc	r21, r21
    18d0:	bb 27       	eor	r27, r27
    18d2:	aa 27       	eor	r26, r26
    18d4:	62 17       	cp	r22, r18
    18d6:	73 07       	cpc	r23, r19
    18d8:	84 07       	cpc	r24, r20
    18da:	38 f0       	brcs	.+14     	; 0x18ea <__divsf3_pse+0x26>
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	22 0f       	add	r18, r18
    18e2:	33 1f       	adc	r19, r19
    18e4:	44 1f       	adc	r20, r20
    18e6:	aa 1f       	adc	r26, r26
    18e8:	a9 f3       	breq	.-22     	; 0x18d4 <__divsf3_pse+0x10>
    18ea:	35 d0       	rcall	.+106    	; 0x1956 <__divsf3_pse+0x92>
    18ec:	0e 2e       	mov	r0, r30
    18ee:	3a f0       	brmi	.+14     	; 0x18fe <__divsf3_pse+0x3a>
    18f0:	e0 e8       	ldi	r30, 0x80	; 128
    18f2:	32 d0       	rcall	.+100    	; 0x1958 <__divsf3_pse+0x94>
    18f4:	91 50       	subi	r25, 0x01	; 1
    18f6:	50 40       	sbci	r21, 0x00	; 0
    18f8:	e6 95       	lsr	r30
    18fa:	00 1c       	adc	r0, r0
    18fc:	ca f7       	brpl	.-14     	; 0x18f0 <__divsf3_pse+0x2c>
    18fe:	2b d0       	rcall	.+86     	; 0x1956 <__divsf3_pse+0x92>
    1900:	fe 2f       	mov	r31, r30
    1902:	29 d0       	rcall	.+82     	; 0x1956 <__divsf3_pse+0x92>
    1904:	66 0f       	add	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	bb 1f       	adc	r27, r27
    190c:	26 17       	cp	r18, r22
    190e:	37 07       	cpc	r19, r23
    1910:	48 07       	cpc	r20, r24
    1912:	ab 07       	cpc	r26, r27
    1914:	b0 e8       	ldi	r27, 0x80	; 128
    1916:	09 f0       	breq	.+2      	; 0x191a <__divsf3_pse+0x56>
    1918:	bb 0b       	sbc	r27, r27
    191a:	80 2d       	mov	r24, r0
    191c:	bf 01       	movw	r22, r30
    191e:	ff 27       	eor	r31, r31
    1920:	93 58       	subi	r25, 0x83	; 131
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	3a f0       	brmi	.+14     	; 0x1934 <__divsf3_pse+0x70>
    1926:	9e 3f       	cpi	r25, 0xFE	; 254
    1928:	51 05       	cpc	r21, r1
    192a:	78 f0       	brcs	.+30     	; 0x194a <__divsf3_pse+0x86>
    192c:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_inf>
    1930:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_szero>
    1934:	5f 3f       	cpi	r21, 0xFF	; 255
    1936:	e4 f3       	brlt	.-8      	; 0x1930 <__divsf3_pse+0x6c>
    1938:	98 3e       	cpi	r25, 0xE8	; 232
    193a:	d4 f3       	brlt	.-12     	; 0x1930 <__divsf3_pse+0x6c>
    193c:	86 95       	lsr	r24
    193e:	77 95       	ror	r23
    1940:	67 95       	ror	r22
    1942:	b7 95       	ror	r27
    1944:	f7 95       	ror	r31
    1946:	9f 5f       	subi	r25, 0xFF	; 255
    1948:	c9 f7       	brne	.-14     	; 0x193c <__divsf3_pse+0x78>
    194a:	88 0f       	add	r24, r24
    194c:	91 1d       	adc	r25, r1
    194e:	96 95       	lsr	r25
    1950:	87 95       	ror	r24
    1952:	97 f9       	bld	r25, 7
    1954:	08 95       	ret
    1956:	e1 e0       	ldi	r30, 0x01	; 1
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	bb 1f       	adc	r27, r27
    1960:	62 17       	cp	r22, r18
    1962:	73 07       	cpc	r23, r19
    1964:	84 07       	cpc	r24, r20
    1966:	ba 07       	cpc	r27, r26
    1968:	20 f0       	brcs	.+8      	; 0x1972 <__divsf3_pse+0xae>
    196a:	62 1b       	sub	r22, r18
    196c:	73 0b       	sbc	r23, r19
    196e:	84 0b       	sbc	r24, r20
    1970:	ba 0b       	sbc	r27, r26
    1972:	ee 1f       	adc	r30, r30
    1974:	88 f7       	brcc	.-30     	; 0x1958 <__divsf3_pse+0x94>
    1976:	e0 95       	com	r30
    1978:	08 95       	ret

0000197a <__fixsfsi>:
    197a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fixunssfsi>
    197e:	68 94       	set
    1980:	b1 11       	cpse	r27, r1
    1982:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_szero>
    1986:	08 95       	ret

00001988 <__fixunssfsi>:
    1988:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fp_splitA>
    198c:	88 f0       	brcs	.+34     	; 0x19b0 <__fixunssfsi+0x28>
    198e:	9f 57       	subi	r25, 0x7F	; 127
    1990:	98 f0       	brcs	.+38     	; 0x19b8 <__fixunssfsi+0x30>
    1992:	b9 2f       	mov	r27, r25
    1994:	99 27       	eor	r25, r25
    1996:	b7 51       	subi	r27, 0x17	; 23
    1998:	b0 f0       	brcs	.+44     	; 0x19c6 <__fixunssfsi+0x3e>
    199a:	e1 f0       	breq	.+56     	; 0x19d4 <__fixunssfsi+0x4c>
    199c:	66 0f       	add	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	1a f0       	brmi	.+6      	; 0x19ac <__fixunssfsi+0x24>
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__fixunssfsi+0x14>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <__fixunssfsi+0x4c>
    19ac:	b1 30       	cpi	r27, 0x01	; 1
    19ae:	91 f0       	breq	.+36     	; 0x19d4 <__fixunssfsi+0x4c>
    19b0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__fp_zero>
    19b4:	b1 e0       	ldi	r27, 0x01	; 1
    19b6:	08 95       	ret
    19b8:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__fp_zero>
    19bc:	67 2f       	mov	r22, r23
    19be:	78 2f       	mov	r23, r24
    19c0:	88 27       	eor	r24, r24
    19c2:	b8 5f       	subi	r27, 0xF8	; 248
    19c4:	39 f0       	breq	.+14     	; 0x19d4 <__fixunssfsi+0x4c>
    19c6:	b9 3f       	cpi	r27, 0xF9	; 249
    19c8:	cc f3       	brlt	.-14     	; 0x19bc <__fixunssfsi+0x34>
    19ca:	86 95       	lsr	r24
    19cc:	77 95       	ror	r23
    19ce:	67 95       	ror	r22
    19d0:	b3 95       	inc	r27
    19d2:	d9 f7       	brne	.-10     	; 0x19ca <__fixunssfsi+0x42>
    19d4:	3e f4       	brtc	.+14     	; 0x19e4 <__fixunssfsi+0x5c>
    19d6:	90 95       	com	r25
    19d8:	80 95       	com	r24
    19da:	70 95       	com	r23
    19dc:	61 95       	neg	r22
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	8f 4f       	sbci	r24, 0xFF	; 255
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <__floatunsisf>:
    19e6:	e8 94       	clt
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <__floatsisf+0x12>

000019ea <__floatsisf>:
    19ea:	97 fb       	bst	r25, 7
    19ec:	3e f4       	brtc	.+14     	; 0x19fc <__floatsisf+0x12>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	99 23       	and	r25, r25
    19fe:	a9 f0       	breq	.+42     	; 0x1a2a <__floatsisf+0x40>
    1a00:	f9 2f       	mov	r31, r25
    1a02:	96 e9       	ldi	r25, 0x96	; 150
    1a04:	bb 27       	eor	r27, r27
    1a06:	93 95       	inc	r25
    1a08:	f6 95       	lsr	r31
    1a0a:	87 95       	ror	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f1 11       	cpse	r31, r1
    1a14:	f8 cf       	rjmp	.-16     	; 0x1a06 <__floatsisf+0x1c>
    1a16:	fa f4       	brpl	.+62     	; 0x1a56 <__floatsisf+0x6c>
    1a18:	bb 0f       	add	r27, r27
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__floatsisf+0x36>
    1a1c:	60 ff       	sbrs	r22, 0
    1a1e:	1b c0       	rjmp	.+54     	; 0x1a56 <__floatsisf+0x6c>
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	16 c0       	rjmp	.+44     	; 0x1a56 <__floatsisf+0x6c>
    1a2a:	88 23       	and	r24, r24
    1a2c:	11 f0       	breq	.+4      	; 0x1a32 <__floatsisf+0x48>
    1a2e:	96 e9       	ldi	r25, 0x96	; 150
    1a30:	11 c0       	rjmp	.+34     	; 0x1a54 <__floatsisf+0x6a>
    1a32:	77 23       	and	r23, r23
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <__floatsisf+0x54>
    1a36:	9e e8       	ldi	r25, 0x8E	; 142
    1a38:	87 2f       	mov	r24, r23
    1a3a:	76 2f       	mov	r23, r22
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <__floatsisf+0x5e>
    1a3e:	66 23       	and	r22, r22
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <__floatsisf+0x74>
    1a42:	96 e8       	ldi	r25, 0x86	; 134
    1a44:	86 2f       	mov	r24, r22
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	2a f0       	brmi	.+10     	; 0x1a56 <__floatsisf+0x6c>
    1a4c:	9a 95       	dec	r25
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	da f7       	brpl	.-10     	; 0x1a4c <__floatsisf+0x62>
    1a56:	88 0f       	add	r24, r24
    1a58:	96 95       	lsr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	97 f9       	bld	r25, 7
    1a5e:	08 95       	ret

00001a60 <__fp_inf>:
    1a60:	97 f9       	bld	r25, 7
    1a62:	9f 67       	ori	r25, 0x7F	; 127
    1a64:	80 e8       	ldi	r24, 0x80	; 128
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	08 95       	ret

00001a6c <__fp_nan>:
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	80 ec       	ldi	r24, 0xC0	; 192
    1a70:	08 95       	ret

00001a72 <__fp_pscA>:
    1a72:	00 24       	eor	r0, r0
    1a74:	0a 94       	dec	r0
    1a76:	16 16       	cp	r1, r22
    1a78:	17 06       	cpc	r1, r23
    1a7a:	18 06       	cpc	r1, r24
    1a7c:	09 06       	cpc	r0, r25
    1a7e:	08 95       	ret

00001a80 <__fp_pscB>:
    1a80:	00 24       	eor	r0, r0
    1a82:	0a 94       	dec	r0
    1a84:	12 16       	cp	r1, r18
    1a86:	13 06       	cpc	r1, r19
    1a88:	14 06       	cpc	r1, r20
    1a8a:	05 06       	cpc	r0, r21
    1a8c:	08 95       	ret

00001a8e <__fp_round>:
    1a8e:	09 2e       	mov	r0, r25
    1a90:	03 94       	inc	r0
    1a92:	00 0c       	add	r0, r0
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <__fp_round+0xc>
    1a96:	88 23       	and	r24, r24
    1a98:	52 f0       	brmi	.+20     	; 0x1aae <__fp_round+0x20>
    1a9a:	bb 0f       	add	r27, r27
    1a9c:	40 f4       	brcc	.+16     	; 0x1aae <__fp_round+0x20>
    1a9e:	bf 2b       	or	r27, r31
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__fp_round+0x18>
    1aa2:	60 ff       	sbrs	r22, 0
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__fp_round+0x20>
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	08 95       	ret

00001ab0 <__fp_split3>:
    1ab0:	57 fd       	sbrc	r21, 7
    1ab2:	90 58       	subi	r25, 0x80	; 128
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	59 f0       	breq	.+22     	; 0x1ad0 <__fp_splitA+0x10>
    1aba:	5f 3f       	cpi	r21, 0xFF	; 255
    1abc:	71 f0       	breq	.+28     	; 0x1ada <__fp_splitA+0x1a>
    1abe:	47 95       	ror	r20

00001ac0 <__fp_splitA>:
    1ac0:	88 0f       	add	r24, r24
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <__fp_splitA+0x20>
    1ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aca:	79 f0       	breq	.+30     	; 0x1aea <__fp_splitA+0x2a>
    1acc:	87 95       	ror	r24
    1ace:	08 95       	ret
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	14 06       	cpc	r1, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	f2 cf       	rjmp	.-28     	; 0x1abe <__fp_split3+0xe>
    1ada:	46 95       	lsr	r20
    1adc:	f1 df       	rcall	.-30     	; 0x1ac0 <__fp_splitA>
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <__fp_splitA+0x30>
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	18 06       	cpc	r1, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	f1 cf       	rjmp	.-30     	; 0x1acc <__fp_splitA+0xc>
    1aea:	86 95       	lsr	r24
    1aec:	71 05       	cpc	r23, r1
    1aee:	61 05       	cpc	r22, r1
    1af0:	08 94       	sec
    1af2:	08 95       	ret

00001af4 <__fp_zero>:
    1af4:	e8 94       	clt

00001af6 <__fp_szero>:
    1af6:	bb 27       	eor	r27, r27
    1af8:	66 27       	eor	r22, r22
    1afa:	77 27       	eor	r23, r23
    1afc:	cb 01       	movw	r24, r22
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret

00001b02 <__mulsf3>:
    1b02:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__mulsf3x>
    1b06:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__fp_round>
    1b0a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_pscA>
    1b0e:	38 f0       	brcs	.+14     	; 0x1b1e <__mulsf3+0x1c>
    1b10:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_pscB>
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <__mulsf3+0x1c>
    1b16:	95 23       	and	r25, r21
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <__mulsf3+0x1c>
    1b1a:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_inf>
    1b1e:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_nan>
    1b22:	11 24       	eor	r1, r1
    1b24:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_szero>

00001b28 <__mulsf3x>:
    1b28:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fp_split3>
    1b2c:	70 f3       	brcs	.-36     	; 0x1b0a <__mulsf3+0x8>

00001b2e <__mulsf3_pse>:
    1b2e:	95 9f       	mul	r25, r21
    1b30:	c1 f3       	breq	.-16     	; 0x1b22 <__mulsf3+0x20>
    1b32:	95 0f       	add	r25, r21
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	55 1f       	adc	r21, r21
    1b38:	62 9f       	mul	r22, r18
    1b3a:	f0 01       	movw	r30, r0
    1b3c:	72 9f       	mul	r23, r18
    1b3e:	bb 27       	eor	r27, r27
    1b40:	f0 0d       	add	r31, r0
    1b42:	b1 1d       	adc	r27, r1
    1b44:	63 9f       	mul	r22, r19
    1b46:	aa 27       	eor	r26, r26
    1b48:	f0 0d       	add	r31, r0
    1b4a:	b1 1d       	adc	r27, r1
    1b4c:	aa 1f       	adc	r26, r26
    1b4e:	64 9f       	mul	r22, r20
    1b50:	66 27       	eor	r22, r22
    1b52:	b0 0d       	add	r27, r0
    1b54:	a1 1d       	adc	r26, r1
    1b56:	66 1f       	adc	r22, r22
    1b58:	82 9f       	mul	r24, r18
    1b5a:	22 27       	eor	r18, r18
    1b5c:	b0 0d       	add	r27, r0
    1b5e:	a1 1d       	adc	r26, r1
    1b60:	62 1f       	adc	r22, r18
    1b62:	73 9f       	mul	r23, r19
    1b64:	b0 0d       	add	r27, r0
    1b66:	a1 1d       	adc	r26, r1
    1b68:	62 1f       	adc	r22, r18
    1b6a:	83 9f       	mul	r24, r19
    1b6c:	a0 0d       	add	r26, r0
    1b6e:	61 1d       	adc	r22, r1
    1b70:	22 1f       	adc	r18, r18
    1b72:	74 9f       	mul	r23, r20
    1b74:	33 27       	eor	r19, r19
    1b76:	a0 0d       	add	r26, r0
    1b78:	61 1d       	adc	r22, r1
    1b7a:	23 1f       	adc	r18, r19
    1b7c:	84 9f       	mul	r24, r20
    1b7e:	60 0d       	add	r22, r0
    1b80:	21 1d       	adc	r18, r1
    1b82:	82 2f       	mov	r24, r18
    1b84:	76 2f       	mov	r23, r22
    1b86:	6a 2f       	mov	r22, r26
    1b88:	11 24       	eor	r1, r1
    1b8a:	9f 57       	subi	r25, 0x7F	; 127
    1b8c:	50 40       	sbci	r21, 0x00	; 0
    1b8e:	9a f0       	brmi	.+38     	; 0x1bb6 <__mulsf3_pse+0x88>
    1b90:	f1 f0       	breq	.+60     	; 0x1bce <__mulsf3_pse+0xa0>
    1b92:	88 23       	and	r24, r24
    1b94:	4a f0       	brmi	.+18     	; 0x1ba8 <__mulsf3_pse+0x7a>
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	66 1f       	adc	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	91 50       	subi	r25, 0x01	; 1
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	a9 f7       	brne	.-22     	; 0x1b92 <__mulsf3_pse+0x64>
    1ba8:	9e 3f       	cpi	r25, 0xFE	; 254
    1baa:	51 05       	cpc	r21, r1
    1bac:	80 f0       	brcs	.+32     	; 0x1bce <__mulsf3_pse+0xa0>
    1bae:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_inf>
    1bb2:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_szero>
    1bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb8:	e4 f3       	brlt	.-8      	; 0x1bb2 <__mulsf3_pse+0x84>
    1bba:	98 3e       	cpi	r25, 0xE8	; 232
    1bbc:	d4 f3       	brlt	.-12     	; 0x1bb2 <__mulsf3_pse+0x84>
    1bbe:	86 95       	lsr	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	b7 95       	ror	r27
    1bc6:	f7 95       	ror	r31
    1bc8:	e7 95       	ror	r30
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
    1bcc:	c1 f7       	brne	.-16     	; 0x1bbe <__mulsf3_pse+0x90>
    1bce:	fe 2b       	or	r31, r30
    1bd0:	88 0f       	add	r24, r24
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	97 f9       	bld	r25, 7
    1bda:	08 95       	ret

00001bdc <__divmodhi4>:
    1bdc:	97 fb       	bst	r25, 7
    1bde:	07 2e       	mov	r0, r23
    1be0:	16 f4       	brtc	.+4      	; 0x1be6 <__divmodhi4+0xa>
    1be2:	00 94       	com	r0
    1be4:	07 d0       	rcall	.+14     	; 0x1bf4 <__divmodhi4_neg1>
    1be6:	77 fd       	sbrc	r23, 7
    1be8:	09 d0       	rcall	.+18     	; 0x1bfc <__divmodhi4_neg2>
    1bea:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__udivmodhi4>
    1bee:	07 fc       	sbrc	r0, 7
    1bf0:	05 d0       	rcall	.+10     	; 0x1bfc <__divmodhi4_neg2>
    1bf2:	3e f4       	brtc	.+14     	; 0x1c02 <__divmodhi4_exit>

00001bf4 <__divmodhi4_neg1>:
    1bf4:	90 95       	com	r25
    1bf6:	81 95       	neg	r24
    1bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfa:	08 95       	ret

00001bfc <__divmodhi4_neg2>:
    1bfc:	70 95       	com	r23
    1bfe:	61 95       	neg	r22
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255

00001c02 <__divmodhi4_exit>:
    1c02:	08 95       	ret

00001c04 <__tablejump2__>:
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	05 90       	lpm	r0, Z+
    1c0a:	f4 91       	lpm	r31, Z
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	09 94       	ijmp

00001c10 <__umulhisi3>:
    1c10:	a2 9f       	mul	r26, r18
    1c12:	b0 01       	movw	r22, r0
    1c14:	b3 9f       	mul	r27, r19
    1c16:	c0 01       	movw	r24, r0
    1c18:	a3 9f       	mul	r26, r19
    1c1a:	70 0d       	add	r23, r0
    1c1c:	81 1d       	adc	r24, r1
    1c1e:	11 24       	eor	r1, r1
    1c20:	91 1d       	adc	r25, r1
    1c22:	b2 9f       	mul	r27, r18
    1c24:	70 0d       	add	r23, r0
    1c26:	81 1d       	adc	r24, r1
    1c28:	11 24       	eor	r1, r1
    1c2a:	91 1d       	adc	r25, r1
    1c2c:	08 95       	ret

00001c2e <__udivmodhi4>:
    1c2e:	aa 1b       	sub	r26, r26
    1c30:	bb 1b       	sub	r27, r27
    1c32:	51 e1       	ldi	r21, 0x11	; 17
    1c34:	07 c0       	rjmp	.+14     	; 0x1c44 <__udivmodhi4_ep>

00001c36 <__udivmodhi4_loop>:
    1c36:	aa 1f       	adc	r26, r26
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	a6 17       	cp	r26, r22
    1c3c:	b7 07       	cpc	r27, r23
    1c3e:	10 f0       	brcs	.+4      	; 0x1c44 <__udivmodhi4_ep>
    1c40:	a6 1b       	sub	r26, r22
    1c42:	b7 0b       	sbc	r27, r23

00001c44 <__udivmodhi4_ep>:
    1c44:	88 1f       	adc	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	5a 95       	dec	r21
    1c4a:	a9 f7       	brne	.-22     	; 0x1c36 <__udivmodhi4_loop>
    1c4c:	80 95       	com	r24
    1c4e:	90 95       	com	r25
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	08 95       	ret

00001c56 <eeprom_read_byte>:
    1c56:	f9 99       	sbic	0x1f, 1	; 31
    1c58:	fe cf       	rjmp	.-4      	; 0x1c56 <eeprom_read_byte>
    1c5a:	92 bd       	out	0x22, r25	; 34
    1c5c:	81 bd       	out	0x21, r24	; 33
    1c5e:	f8 9a       	sbi	0x1f, 0	; 31
    1c60:	99 27       	eor	r25, r25
    1c62:	80 b5       	in	r24, 0x20	; 32
    1c64:	08 95       	ret

00001c66 <eeprom_write_byte>:
    1c66:	26 2f       	mov	r18, r22

00001c68 <eeprom_write_r18>:
    1c68:	f9 99       	sbic	0x1f, 1	; 31
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <eeprom_write_r18>
    1c6c:	1f ba       	out	0x1f, r1	; 31
    1c6e:	92 bd       	out	0x22, r25	; 34
    1c70:	81 bd       	out	0x21, r24	; 33
    1c72:	20 bd       	out	0x20, r18	; 32
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	fa 9a       	sbi	0x1f, 2	; 31
    1c7a:	f9 9a       	sbi	0x1f, 1	; 31
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	08 95       	ret

00001c82 <_exit>:
    1c82:	f8 94       	cli

00001c84 <__stop_program>:
    1c84:	ff cf       	rjmp	.-2      	; 0x1c84 <__stop_program>
