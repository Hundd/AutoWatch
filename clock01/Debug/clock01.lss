
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000143c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cbf  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fb  00000000  00000000  000032cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f4  00000000  00000000  000039c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  000042bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093a  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b29  00000000  00000000  0000519a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006cc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_16>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_21>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	b8 07       	cpc	r27, r24
      6a:	c0 07       	cpc	r28, r16
      6c:	c4 07       	cpc	r28, r20
      6e:	ca 07       	cpc	r28, r26
      70:	cf 07       	cpc	r28, r31
      72:	d4 07       	cpc	r29, r20
      74:	db 07       	cpc	r29, r27
      76:	e3 07       	cpc	r30, r19
      78:	ea 07       	cpc	r30, r26
      7a:	f2 07       	cpc	r31, r18
      7c:	00 08       	sbc	r0, r0
      7e:	00 08       	sbc	r0, r0
      80:	00 08       	sbc	r0, r0
      82:	00 08       	sbc	r0, r0
      84:	00 08       	sbc	r0, r0
      86:	00 08       	sbc	r0, r0
      88:	00 08       	sbc	r0, r0
      8a:	00 08       	sbc	r0, r0
      8c:	00 08       	sbc	r0, r0
      8e:	00 08       	sbc	r0, r0
      90:	00 08       	sbc	r0, r0
      92:	00 08       	sbc	r0, r0
      94:	00 08       	sbc	r0, r0
      96:	00 08       	sbc	r0, r0
      98:	00 08       	sbc	r0, r0
      9a:	00 08       	sbc	r0, r0
      9c:	00 08       	sbc	r0, r0
      9e:	00 08       	sbc	r0, r0
      a0:	00 08       	sbc	r0, r0
      a2:	00 08       	sbc	r0, r0
      a4:	00 08       	sbc	r0, r0
      a6:	00 08       	sbc	r0, r0
      a8:	00 08       	sbc	r0, r0
      aa:	00 08       	sbc	r0, r0
      ac:	00 08       	sbc	r0, r0
      ae:	00 08       	sbc	r0, r0
      b0:	00 08       	sbc	r0, r0
      b2:	00 08       	sbc	r0, r0
      b4:	00 08       	sbc	r0, r0
      b6:	00 08       	sbc	r0, r0
      b8:	00 08       	sbc	r0, r0
      ba:	00 08       	sbc	r0, r0
      bc:	00 08       	sbc	r0, r0
      be:	00 08       	sbc	r0, r0
      c0:	00 08       	sbc	r0, r0
      c2:	fe 07       	cpc	r31, r30
      c4:	00 08       	sbc	r0, r0
      c6:	00 08       	sbc	r0, r0
      c8:	00 08       	sbc	r0, r0
      ca:	00 08       	sbc	r0, r0
      cc:	00 08       	sbc	r0, r0
      ce:	00 08       	sbc	r0, r0
      d0:	00 08       	sbc	r0, r0
      d2:	00 08       	sbc	r0, r0
      d4:	00 08       	sbc	r0, r0
      d6:	00 08       	sbc	r0, r0
      d8:	00 08       	sbc	r0, r0
      da:	00 08       	sbc	r0, r0
      dc:	00 08       	sbc	r0, r0
      de:	00 08       	sbc	r0, r0
      e0:	00 08       	sbc	r0, r0
      e2:	00 08       	sbc	r0, r0
      e4:	00 08       	sbc	r0, r0
      e6:	00 08       	sbc	r0, r0
      e8:	00 08       	sbc	r0, r0
      ea:	00 08       	sbc	r0, r0
      ec:	00 08       	sbc	r0, r0
      ee:	00 08       	sbc	r0, r0
      f0:	00 08       	sbc	r0, r0
      f2:	00 08       	sbc	r0, r0
      f4:	00 08       	sbc	r0, r0
      f6:	00 08       	sbc	r0, r0
      f8:	00 08       	sbc	r0, r0
      fa:	00 08       	sbc	r0, r0
      fc:	00 08       	sbc	r0, r0
      fe:	00 08       	sbc	r0, r0
     100:	00 08       	sbc	r0, r0
     102:	00 08       	sbc	r0, r0
     104:	00 08       	sbc	r0, r0
     106:	00 08       	sbc	r0, r0
     108:	00 08       	sbc	r0, r0
     10a:	00 08       	sbc	r0, r0
     10c:	00 08       	sbc	r0, r0
     10e:	00 08       	sbc	r0, r0
     110:	00 08       	sbc	r0, r0
     112:	00 08       	sbc	r0, r0
     114:	00 08       	sbc	r0, r0
     116:	00 08       	sbc	r0, r0
     118:	00 08       	sbc	r0, r0
     11a:	00 08       	sbc	r0, r0
     11c:	00 08       	sbc	r0, r0
     11e:	00 08       	sbc	r0, r0
     120:	00 08       	sbc	r0, r0
     122:	00 08       	sbc	r0, r0
     124:	00 08       	sbc	r0, r0
     126:	00 08       	sbc	r0, r0
     128:	00 08       	sbc	r0, r0
     12a:	00 08       	sbc	r0, r0
     12c:	00 08       	sbc	r0, r0
     12e:	00 08       	sbc	r0, r0
     130:	00 08       	sbc	r0, r0
     132:	00 08       	sbc	r0, r0
     134:	00 08       	sbc	r0, r0
     136:	00 08       	sbc	r0, r0
     138:	00 08       	sbc	r0, r0
     13a:	00 08       	sbc	r0, r0
     13c:	00 08       	sbc	r0, r0
     13e:	00 08       	sbc	r0, r0
     140:	00 08       	sbc	r0, r0
     142:	00 08       	sbc	r0, r0
     144:	00 08       	sbc	r0, r0
     146:	00 08       	sbc	r0, r0
     148:	00 08       	sbc	r0, r0
     14a:	00 08       	sbc	r0, r0
     14c:	00 08       	sbc	r0, r0
     14e:	00 08       	sbc	r0, r0
     150:	00 08       	sbc	r0, r0
     152:	f9 07       	cpc	r31, r25

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d8 e0       	ldi	r29, 0x08	; 8
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	e8 ec       	ldi	r30, 0xC8	; 200
     168:	f3 e1       	ldi	r31, 0x13	; 19
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a0 30       	cpi	r26, 0x00	; 0
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	ac 30       	cpi	r26, 0x0C	; 12
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 a7 05 	call	0xb4e	; 0xb4e <main>
     18a:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <_Z5resetPVhS0_h>:
		
    }
}
*/
void reset(volatile uint8_t *port,volatile uint8_t * ddr,uint8_t pin)
{
     192:	dc 01       	movw	r26, r24
     194:	fb 01       	movw	r30, r22
	*ddr|=(1<<pin);
     196:	80 81       	ld	r24, Z
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_Z5resetPVhS0_h+0x10>
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	4a 95       	dec	r20
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <_Z5resetPVhS0_h+0xc>
     1a6:	82 2b       	or	r24, r18
     1a8:	80 83       	st	Z, r24
	*port&=~(1<<pin);//pin off
     1aa:	9c 91       	ld	r25, X
     1ac:	32 2f       	mov	r19, r18
     1ae:	30 95       	com	r19
     1b0:	93 23       	and	r25, r19
     1b2:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b4:	87 ee       	ldi	r24, 0xE7	; 231
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z5resetPVhS0_h+0x26>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z5resetPVhS0_h+0x2c>
     1be:	00 00       	nop
	_delay_us(500);
	*port|=1<<pin;//pint on
     1c0:	8c 91       	ld	r24, X
     1c2:	28 2b       	or	r18, r24
     1c4:	2c 93       	st	X, r18
	*ddr&=~(1<<pin);
     1c6:	80 81       	ld	r24, Z
     1c8:	83 23       	and	r24, r19
     1ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1cc:	8f ec       	ldi	r24, 0xCF	; 207
     1ce:	97 e0       	ldi	r25, 0x07	; 7
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z5resetPVhS0_h+0x3e>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z5resetPVhS0_h+0x44>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <_Z11SendToPort1PVhS0_h>:
	_delay_ms(1);
	
	
}
void SendToPort1(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     1da:	dc 01       	movw	r26, r24
     1dc:	fb 01       	movw	r30, r22
     1de:	f8 94       	cli
	*ddr|=(1<<pin);
     1e0:	90 81       	ld	r25, Z
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <_Z11SendToPort1PVhS0_h+0x12>
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	4a 95       	dec	r20
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <_Z11SendToPort1PVhS0_h+0xe>
     1f0:	92 2b       	or	r25, r18
     1f2:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     1f4:	9c 91       	ld	r25, X
     1f6:	20 95       	com	r18
     1f8:	92 23       	and	r25, r18
     1fa:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	8a e0       	ldi	r24, 0x0A	; 10
     1fe:	8a 95       	dec	r24
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z11SendToPort1PVhS0_h+0x24>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z11SendToPort1PVhS0_h+0x2a>
	_delay_us(4);
	*ddr&=~(1<<pin);
     204:	80 81       	ld	r24, Z
     206:	28 23       	and	r18, r24
     208:	20 83       	st	Z, r18
     20a:	8a ec       	ldi	r24, 0xCA	; 202
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <_Z11SendToPort1PVhS0_h+0x32>
     210:	00 c0       	rjmp	.+0      	; 0x212 <_Z11SendToPort1PVhS0_h+0x38>
     212:	08 95       	ret

00000214 <_Z11SendToPort0PVhS0_h>:
	//*port|=1<<pin;//pint on
	//sei();
	_delay_us(76);
}
void SendToPort0(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     214:	dc 01       	movw	r26, r24
     216:	fb 01       	movw	r30, r22
     218:	f8 94       	cli
	*ddr|=(1<<pin);
     21a:	90 81       	ld	r25, Z
     21c:	21 e0       	ldi	r18, 0x01	; 1
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	02 c0       	rjmp	.+4      	; 0x226 <_Z11SendToPort0PVhS0_h+0x12>
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
     226:	4a 95       	dec	r20
     228:	e2 f7       	brpl	.-8      	; 0x222 <_Z11SendToPort0PVhS0_h+0xe>
     22a:	92 2b       	or	r25, r18
     22c:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     22e:	9c 91       	ld	r25, X
     230:	20 95       	com	r18
     232:	92 23       	and	r25, r18
     234:	9c 93       	st	X, r25
     236:	8a ea       	ldi	r24, 0xAA	; 170
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <_Z11SendToPort0PVhS0_h+0x24>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z11SendToPort0PVhS0_h+0x2a>
	_delay_us(64);
	*ddr&=~(1<<pin);
     23e:	80 81       	ld	r24, Z
     240:	28 23       	and	r18, r24
     242:	20 83       	st	Z, r18
     244:	8a e2       	ldi	r24, 0x2A	; 42
     246:	8a 95       	dec	r24
     248:	f1 f7       	brne	.-4      	; 0x246 <_Z11SendToPort0PVhS0_h+0x32>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <_Z11SendToPort0PVhS0_h+0x38>
     24c:	08 95       	ret

0000024e <_Z14SendByteToPortPVhS0_hh>:
	_delay_us(16);
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	6c 01       	movw	r12, r24
     260:	7b 01       	movw	r14, r22
     262:	04 2f       	mov	r16, r20
     264:	12 2f       	mov	r17, r18
     266:	c8 e0       	ldi	r28, 0x08	; 8
     268:	d0 e0       	ldi	r29, 0x00	; 0
		
		for (i=0;i<8;i++)
		{	if (byte&mask)
     26a:	10 ff       	sbrs	r17, 0
     26c:	06 c0       	rjmp	.+12     	; 0x27a <_Z14SendByteToPortPVhS0_hh+0x2c>
			SendToPort1(port,ddr,pin);
     26e:	40 2f       	mov	r20, r16
     270:	b7 01       	movw	r22, r14
     272:	c6 01       	movw	r24, r12
     274:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z11SendToPort1PVhS0_h>
     278:	05 c0       	rjmp	.+10     	; 0x284 <_Z14SendByteToPortPVhS0_hh+0x36>
			else SendToPort0(port,ddr,pin);
     27a:	40 2f       	mov	r20, r16
     27c:	b7 01       	movw	r22, r14
     27e:	c6 01       	movw	r24, r12
     280:	0e 94 0a 01 	call	0x214	; 0x214 <_Z11SendToPort0PVhS0_h>
			byte>>=1;
     284:	16 95       	lsr	r17
     286:	21 97       	sbiw	r28, 0x01	; 1
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
		
		for (i=0;i<8;i++)
     288:	81 f7       	brne	.-32     	; 0x26a <_Z14SendByteToPortPVhS0_hh+0x1c>
		
		}
	
		

	}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	08 95       	ret

0000029c <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
     29c:	4f 92       	push	r4
     29e:	5f 92       	push	r5
     2a0:	7f 92       	push	r7
     2a2:	8f 92       	push	r8
     2a4:	9f 92       	push	r9
     2a6:	af 92       	push	r10
     2a8:	bf 92       	push	r11
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	db 01       	movw	r26, r22
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
     2bc:	f8 94       	cli
		for (i=0;i<number_of_bytes;i++)
     2be:	ee 20       	and	r14, r14
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x28>
     2c2:	52 c0       	rjmp	.+164    	; 0x368 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xcc>
		{	bytes[i]=0;
			for (j=0;j<8;j++)
			{
				*ddr|=(1<<pin);
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	02 2e       	mov	r0, r18
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x34>
     2cc:	66 0f       	add	r22, r22
     2ce:	77 1f       	adc	r23, r23
     2d0:	0a 94       	dec	r0
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x30>
     2d4:	b6 2e       	mov	r11, r22
				*port&=~(1<<pin);//pin off
     2d6:	f6 2e       	mov	r15, r22
     2d8:	f0 94       	com	r15
     2da:	68 01       	movw	r12, r16
     2dc:	48 01       	movw	r8, r16
     2de:	8e 0c       	add	r8, r14
     2e0:	91 1c       	adc	r9, r1
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     2e2:	e1 2c       	mov	r14, r1
     2e4:	a1 2c       	mov	r10, r1
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     2e6:	07 e0       	ldi	r16, 0x07	; 7
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	02 1b       	sub	r16, r18
     2ec:	11 09       	sbc	r17, r1
     2ee:	26 01       	movw	r4, r12
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
     2f0:	e6 01       	movw	r28, r12
     2f2:	18 82       	st	Y, r1
			for (j=0;j<8;j++)
     2f4:	ee 2d       	mov	r30, r14
     2f6:	fa 2d       	mov	r31, r10
			{
				*ddr|=(1<<pin);
     2f8:	2c 91       	ld	r18, X
     2fa:	2b 29       	or	r18, r11
     2fc:	2c 93       	st	X, r18
				*port&=~(1<<pin);//pin off
     2fe:	ec 01       	movw	r28, r24
     300:	28 81       	ld	r18, Y
     302:	2f 21       	and	r18, r15
     304:	28 83       	st	Y, r18
     306:	d5 e0       	ldi	r29, 0x05	; 5
     308:	da 95       	dec	r29
     30a:	f1 f7       	brne	.-4      	; 0x308 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x6c>
     30c:	00 00       	nop
				_delay_us(2);//4
				*ddr&=~(1<<pin);
     30e:	2c 91       	ld	r18, X
     310:	2f 21       	and	r18, r15
     312:	2c 93       	st	X, r18
     314:	2a e2       	ldi	r18, 0x2A	; 42
     316:	2a 95       	dec	r18
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x7a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x80>
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     31c:	ea 01       	movw	r28, r20
     31e:	28 81       	ld	r18, Y
     320:	e2 01       	movw	r28, r4
     322:	78 80       	ld	r7, Y
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	26 23       	and	r18, r22
     328:	37 23       	and	r19, r23
     32a:	00 2e       	mov	r0, r16
     32c:	02 c0       	rjmp	.+4      	; 0x332 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x96>
     32e:	22 0f       	add	r18, r18
     330:	33 1f       	adc	r19, r19
     332:	0a 94       	dec	r0
     334:	e2 f7       	brpl	.-8      	; 0x32e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x92>
     336:	27 29       	or	r18, r7
				if(j<7) bytes[i]>>=1;
     338:	e7 30       	cpi	r30, 0x07	; 7
     33a:	f1 05       	cpc	r31, r1
     33c:	14 f0       	brlt	.+4      	; 0x342 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     33e:	28 83       	st	Y, r18
     340:	05 c0       	rjmp	.+10     	; 0x34c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb0>
				if(j<7) bytes[i]>>=1;
     342:	33 27       	eor	r19, r19
     344:	35 95       	asr	r19
     346:	27 95       	ror	r18
     348:	e2 01       	movw	r28, r4
     34a:	28 83       	st	Y, r18
     34c:	d5 e7       	ldi	r29, 0x75	; 117
     34e:	da 95       	dec	r29
     350:	f1 f7       	brne	.-4      	; 0x34e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb2>
     352:	00 00       	nop
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     354:	31 96       	adiw	r30, 0x01	; 1
     356:	e8 30       	cpi	r30, 0x08	; 8
     358:	f1 05       	cpc	r31, r1
     35a:	71 f6       	brne	.-100    	; 0x2f8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x5c>
     35c:	ef ef       	ldi	r30, 0xFF	; 255
     35e:	ce 1a       	sub	r12, r30
     360:	de 0a       	sbc	r13, r30
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
     362:	c8 14       	cp	r12, r8
     364:	d9 04       	cpc	r13, r9
     366:	19 f6       	brne	.-122    	; 0x2ee <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
				if(j<7) bytes[i]>>=1;
				_delay_us(44);
			}			
		}
		sei();
     368:	78 94       	sei
	}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	5f 90       	pop	r5
     386:	4f 90       	pop	r4
     388:	08 95       	ret

0000038a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
     396:	8b 01       	movw	r16, r22
     398:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     39a:	42 2f       	mov	r20, r18
     39c:	0e 94 c9 00 	call	0x192	; 0x192 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3a0:	2c ec       	ldi	r18, 0xCC	; 204
     3a2:	4f 2d       	mov	r20, r15
     3a4:	b8 01       	movw	r22, r16
     3a6:	ce 01       	movw	r24, r28
     3a8:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3ac:	24 e4       	ldi	r18, 0x44	; 68
     3ae:	4f 2d       	mov	r20, r15
     3b0:	b8 01       	movw	r22, r16
     3b2:	ce 01       	movw	r24, r28
     3b4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
	}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	08 95       	ret

000003c4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
     3da:	6b 01       	movw	r12, r22
     3dc:	5a 01       	movw	r10, r20
     3de:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3e0:	42 2f       	mov	r20, r18
     3e2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3e6:	2c ec       	ldi	r18, 0xCC	; 204
     3e8:	4f 2d       	mov	r20, r15
     3ea:	b6 01       	movw	r22, r12
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     3f2:	2e eb       	ldi	r18, 0xBE	; 190
     3f4:	4f 2d       	mov	r20, r15
     3f6:	b6 01       	movw	r22, r12
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     3fe:	0f 2e       	mov	r0, r31
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f0 2d       	mov	r31, r0
     406:	2f 2d       	mov	r18, r15
     408:	a5 01       	movw	r20, r10
     40a:	b6 01       	movw	r22, r12
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	08 95       	ret

00000428 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
		AdcClass::Data = ADC;
     436:	80 91 78 00 	lds	r24, 0x0078
     43a:	90 91 79 00 	lds	r25, 0x0079
     43e:	90 93 0a 01 	sts	0x010A, r25
     442:	80 93 09 01 	sts	0x0109, r24
		AdcClass::DataReady = true;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 0b 01 	sts	0x010B, r24
     44c:	8a e1       	ldi	r24, 0x1A	; 26
     44e:	8a 95       	dec	r24
     450:	f1 f7       	brne	.-4      	; 0x44e <__vector_21+0x26>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_16>:
		}

    }
}

ISR(TIMER0_OVF_vect){
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	static uint8_t iov=0;
	ClrScr();
     484:	0e 94 8c 07 	call	0xf18	; 0xf18 <_Z6ClrScrv>
	Display7seg(screen_arr[iov],iov == screen_arr[4]);
     488:	20 91 08 01 	lds	r18, 0x0108
     48c:	90 91 03 01 	lds	r25, 0x0103
     490:	e9 2f       	mov	r30, r25
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	ec 5f       	subi	r30, 0xFC	; 252
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 81       	ld	r24, Z
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	29 13       	cpse	r18, r25
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z11Display7seghb>
	NextDigit(4-iov);
     4a4:	90 91 03 01 	lds	r25, 0x0103
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	89 1b       	sub	r24, r25
     4ac:	0e 94 05 08 	call	0x100a	; 0x100a <_Z9NextDigith>
	//Display7seg(screen_arr[iov],iov == screen_arr[4]);
	iov += 1;
     4b0:	80 91 03 01 	lds	r24, 0x0103
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
	if(iov > 3) iov=0;
     4b6:	84 30       	cpi	r24, 0x04	; 4
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <__vector_16+0x5e>
	static uint8_t iov=0;
	ClrScr();
	Display7seg(screen_arr[iov],iov == screen_arr[4]);
	NextDigit(4-iov);
	//Display7seg(screen_arr[iov],iov == screen_arr[4]);
	iov += 1;
     4ba:	80 93 03 01 	sts	0x0103, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__vector_16+0x62>
	if(iov > 3) iov=0;
     4c0:	10 92 03 01 	sts	0x0103, r1
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	0f 90       	pop	r0
     4e2:	1f 90       	pop	r1
     4e4:	18 95       	reti

000004e6 <_Z21EnableTimer0Interruptv>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
     4e6:	ee e6       	ldi	r30, 0x6E	; 110
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	80 83       	st	Z, r24
	TCCR0B = 2;//Prescaler
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	08 95       	ret

000004f6 <_Z10keyCheckerv>:
*PORTD4 SETUP
*/	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	//DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
	//PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
	uint8_t keyState = PIND;
     4f6:	89 b1       	in	r24, 0x09	; 9
	 keyState = (~keyState >> 3) & 3;
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	80 95       	com	r24
     4fc:	90 95       	com	r25
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	83 70       	andi	r24, 0x03	; 3
	if (keyState == keyStatePrevious && keyState) {
     50c:	90 91 02 01 	lds	r25, 0x0102
     510:	89 13       	cpse	r24, r25
     512:	22 c0       	rjmp	.+68     	; 0x558 <_Z10keyCheckerv+0x62>
     514:	88 23       	and	r24, r24
     516:	01 f1       	breq	.+64     	; 0x558 <_Z10keyCheckerv+0x62>
		if (times < 1500) {
     518:	20 91 00 01 	lds	r18, 0x0100
     51c:	30 91 01 01 	lds	r19, 0x0101
     520:	2c 3d       	cpi	r18, 0xDC	; 220
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	39 07       	cpc	r19, r25
     526:	60 f4       	brcc	.+24     	; 0x540 <_Z10keyCheckerv+0x4a>
			times += 1;
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	30 93 01 01 	sts	0x0101, r19
     530:	20 93 00 01 	sts	0x0100, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     534:	ef ec       	ldi	r30, 0xCF	; 207
     536:	f7 e0       	ldi	r31, 0x07	; 7
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <_Z10keyCheckerv+0x42>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_Z10keyCheckerv+0x48>
     53e:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10) {
     540:	20 91 00 01 	lds	r18, 0x0100
     544:	30 91 01 01 	lds	r19, 0x0101
     548:	2a 30       	cpi	r18, 0x0A	; 10
     54a:	31 05       	cpc	r19, r1
     54c:	71 f0       	breq	.+28     	; 0x56a <_Z10keyCheckerv+0x74>
			return keyState;
		}
		if (times == 1000) {
     54e:	28 3e       	cpi	r18, 0xE8	; 232
     550:	33 40       	sbci	r19, 0x03	; 3
     552:	51 f0       	breq	.+20     	; 0x568 <_Z10keyCheckerv+0x72>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
		if (times == 1000) {
			return 3;
		}
	}
	else {
		keyStatePrevious = keyState;
     558:	80 93 02 01 	sts	0x0102, r24
		times = 0;
     55c:	10 92 01 01 	sts	0x0101, r1
     560:	10 92 00 01 	sts	0x0100, r1
	}

	return 0;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	08 95       	ret
		}
		if (times == 10) {
			return keyState;
		}
		if (times == 1000) {
			return 3;
     568:	83 e0       	ldi	r24, 0x03	; 3
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
}
     56a:	08 95       	ret

0000056c <_Z8rtcCyclev>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
	TCCR0B = 2;//Prescaler
}
uint8_t rtcCycle () {
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	63 97       	sbiw	r28, 0x13	; 19
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
	uint8_t timeArr[0x13];
	while (true) {
		readTime(timeArr);
		screen_arr[0] = timeArr[1] & 0x0F;
     586:	04 e0       	ldi	r16, 0x04	; 4
     588:	11 e0       	ldi	r17, 0x01	; 1
		screen_arr[1] = timeArr[1] >> 4;
		screen_arr[2] = timeArr[2] & 0x0F;
		screen_arr[3] = timeArr[2] >> 4;
		screen_arr[4] = 2;//Dot Point Position
     58a:	68 94       	set
     58c:	ff 24       	eor	r15, r15
     58e:	f1 f8       	bld	r15, 1
	TCCR0B = 2;//Prescaler
}
uint8_t rtcCycle () {
	uint8_t timeArr[0x13];
	while (true) {
		readTime(timeArr);
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z8readTimePh>
		screen_arr[0] = timeArr[1] & 0x0F;
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	98 2f       	mov	r25, r24
     59c:	9f 70       	andi	r25, 0x0F	; 15
     59e:	f8 01       	movw	r30, r16
     5a0:	90 83       	st	Z, r25
		screen_arr[1] = timeArr[1] >> 4;
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	95 95       	asr	r25
     5a6:	87 95       	ror	r24
     5a8:	95 95       	asr	r25
     5aa:	87 95       	ror	r24
     5ac:	95 95       	asr	r25
     5ae:	87 95       	ror	r24
     5b0:	95 95       	asr	r25
     5b2:	87 95       	ror	r24
     5b4:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[2] = timeArr[2] & 0x0F;
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	98 2f       	mov	r25, r24
     5ba:	9f 70       	andi	r25, 0x0F	; 15
     5bc:	92 83       	std	Z+2, r25	; 0x02
		screen_arr[3] = timeArr[2] >> 4;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	95 95       	asr	r25
     5c2:	87 95       	ror	r24
     5c4:	95 95       	asr	r25
     5c6:	87 95       	ror	r24
     5c8:	95 95       	asr	r25
     5ca:	87 95       	ror	r24
     5cc:	95 95       	asr	r25
     5ce:	87 95       	ror	r24
     5d0:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[4] = 2;//Dot Point Position
     5d2:	f4 82       	std	Z+4, r15	; 0x04
		//_delay_ms(100);
		uint8_t key = keyChecker();
     5d4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     5d8:	88 23       	and	r24, r24
     5da:	d1 f2       	breq	.-76     	; 0x590 <_Z8rtcCyclev+0x24>
			if (key == 1) return 1;
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	19 f0       	breq	.+6      	; 0x5e6 <_Z8rtcCyclev+0x7a>
			if (key == 3) {
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	b1 f6       	brne	.-84     	; 0x590 <_Z8rtcCyclev+0x24>
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <_Z8rtcCyclev+0x7c>
		screen_arr[3] = timeArr[2] >> 4;
		screen_arr[4] = 2;//Dot Point Position
		//_delay_ms(100);
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	
}
     5e8:	63 96       	adiw	r28, 0x13	; 19
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	08 95       	ret

00000600 <_Z6dsModev>:

uint8_t dsMode() {
     600:	2f 92       	push	r2
     602:	3f 92       	push	r3
     604:	4f 92       	push	r4
     606:	5f 92       	push	r5
     608:	6f 92       	push	r6
     60a:	7f 92       	push	r7
     60c:	8f 92       	push	r8
     60e:	9f 92       	push	r9
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	29 97       	sbiw	r28, 0x09	; 9
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     634:	e4 e0       	ldi	r30, 0x04	; 4
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     63c:	8d e2       	ldi	r24, 0x2D	; 45
     63e:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     640:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     642:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     644:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     646:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     648:	e1 2c       	mov	r14, r1
     64a:	f1 2c       	mov	r15, r1
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     64c:	31 2c       	mov	r3, r1
     64e:	41 2c       	mov	r4, r1
			else {
				screen_arr[3] = -1;
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     650:	6f 01       	movw	r12, r30
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
     652:	0f 2e       	mov	r0, r31
     654:	fa e0       	ldi	r31, 0x0A	; 10
     656:	af 2e       	mov	r10, r31
     658:	b1 2c       	mov	r11, r1
     65a:	f0 2d       	mov	r31, r0
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     65c:	22 24       	eor	r2, r2
     65e:	2a 94       	dec	r2
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
					
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
     660:	0f 2e       	mov	r0, r31
     662:	f4 e6       	ldi	r31, 0x64	; 100
     664:	8f 2e       	mov	r8, r31
     666:	91 2c       	mov	r9, r1
     668:	f0 2d       	mov	r31, r0
					
					
			if(temper < 0) {
				screen_arr[3] = '-';
				temper *= -1;
				temper += 1;
     66a:	66 24       	eor	r6, r6
     66c:	63 94       	inc	r6
     66e:	71 2c       	mov	r7, r1
     670:	02 c0       	rjmp	.+4      	; 0x676 <_Z6dsModev+0x76>
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     672:	e3 2c       	mov	r14, r3
     674:	f4 2c       	mov	r15, r4
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while(true){
		if(inner_counter == 0)
     676:	e1 14       	cp	r14, r1
     678:	f1 04       	cpc	r15, r1
     67a:	81 f4       	brne	.+32     	; 0x69c <_Z6dsModev+0x9c>
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	49 e2       	ldi	r20, 0x29	; 41
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	6a e2       	ldi	r22, 0x2A	; 42
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     68e:	78 94       	sei
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     690:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	09 f0       	breq	.+2      	; 0x69a <_Z6dsModev+0x9a>
     698:	8c c0       	rjmp	.+280    	; 0x7b2 <_Z6dsModev+0x1b2>
     69a:	7e c0       	rjmp	.+252    	; 0x798 <_Z6dsModev+0x198>
		if(inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
			sei();
		}
		if(inner_counter == 1000)
     69c:	88 ee       	ldi	r24, 0xE8	; 232
     69e:	e8 16       	cp	r14, r24
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	f8 06       	cpc	r15, r24
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <_Z6dsModev+0xa8>
     6a6:	5e c0       	rjmp	.+188    	; 0x764 <_Z6dsModev+0x164>
		{
			ReadTemperatureArr(&PORTD,&DDRD,&PIND,PIND2,temperatureArr);
     6a8:	8e 01       	movw	r16, r28
     6aa:	0f 5f       	subi	r16, 0xFF	; 255
     6ac:	1f 4f       	sbci	r17, 0xFF	; 255
     6ae:	22 e0       	ldi	r18, 0x02	; 2
     6b0:	49 e2       	ldi	r20, 0x29	; 41
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	6a e2       	ldi	r22, 0x2A	; 42
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     6c0:	2a 81       	ldd	r18, Y+2	; 0x02
     6c2:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     6c4:	32 2f       	mov	r19, r18
     6c6:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	28 2b       	or	r18, r24
					
					
			if(temper < 0) {
     6cc:	33 23       	and	r19, r19
     6ce:	44 f4       	brge	.+16     	; 0x6e0 <_Z6dsModev+0xe0>
				screen_arr[3] = '-';
     6d0:	8d e2       	ldi	r24, 0x2D	; 45
     6d2:	f6 01       	movw	r30, r12
     6d4:	83 83       	std	Z+3, r24	; 0x03
				temper *= -1;
				temper += 1;
     6d6:	f3 01       	movw	r30, r6
     6d8:	e2 1b       	sub	r30, r18
     6da:	f3 0b       	sbc	r31, r19
     6dc:	9f 01       	movw	r18, r30
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_Z6dsModev+0xe4>
			}
			else {
				screen_arr[3] = -1;
     6e0:	f6 01       	movw	r30, r12
     6e2:	23 82       	std	Z+3, r2	; 0x03
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     6e4:	c9 01       	movw	r24, r18
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	99 27       	eor	r25, r25
     6ea:	ac 01       	movw	r20, r24
     6ec:	44 0f       	add	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	84 0f       	add	r24, r20
     6fe:	95 1f       	adc	r25, r21
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	f6 01       	movw	r30, r12
     712:	80 83       	st	Z, r24
					
			temper>>=4;
     714:	35 95       	asr	r19
     716:	27 95       	ror	r18
     718:	35 95       	asr	r19
     71a:	27 95       	ror	r18
     71c:	35 95       	asr	r19
     71e:	27 95       	ror	r18
     720:	35 95       	asr	r19
     722:	27 95       	ror	r18
			if(temper >= 100) {
     724:	24 36       	cpi	r18, 0x64	; 100
     726:	31 05       	cpc	r19, r1
     728:	3c f0       	brlt	.+14     	; 0x738 <_Z6dsModev+0x138>
				screen_arr[3] = temper/100;
     72a:	c9 01       	movw	r24, r18
     72c:	b4 01       	movw	r22, r8
     72e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__divmodhi4>
     732:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     734:	28 2f       	mov	r18, r24
     736:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     738:	c9 01       	movw	r24, r18
     73a:	09 96       	adiw	r24, 0x09	; 9
     73c:	43 97       	sbiw	r24, 0x13	; 19
     73e:	28 f0       	brcs	.+10     	; 0x74a <_Z6dsModev+0x14a>
     740:	c9 01       	movw	r24, r18
     742:	b5 01       	movw	r22, r10
     744:	0e 94 b4 09 	call	0x1368	; 0x1368 <__divmodhi4>
     748:	01 c0       	rjmp	.+2      	; 0x74c <_Z6dsModev+0x14c>
     74a:	62 2d       	mov	r22, r2
     74c:	f6 01       	movw	r30, r12
     74e:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper%10;
     750:	c9 01       	movw	r24, r18
     752:	b5 01       	movw	r22, r10
     754:	0e 94 b4 09 	call	0x1368	; 0x1368 <__divmodhi4>
     758:	81 83       	std	Z+1, r24	; 0x01
		}


		uint8_t key = keyChecker();
     75a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	09 f5       	brne	.+66     	; 0x7a4 <_Z6dsModev+0x1a4>
     762:	1c c0       	rjmp	.+56     	; 0x79c <_Z6dsModev+0x19c>
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     764:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	d1 f0       	breq	.+52     	; 0x7a0 <_Z6dsModev+0x1a0>
     76c:	8f ec       	ldi	r24, 0xCF	; 207
     76e:	97 e0       	ldi	r25, 0x07	; 7
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <_Z6dsModev+0x170>
     774:	00 c0       	rjmp	.+0      	; 0x776 <_Z6dsModev+0x176>
     776:	00 00       	nop
			//if (key == 2) return 3;

		}
		_delay_ms(1);
		if(inner_counter <=1000)
     778:	99 ee       	ldi	r25, 0xE9	; 233
     77a:	e9 16       	cp	r14, r25
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	f9 06       	cpc	r15, r25
     780:	20 f4       	brcc	.+8      	; 0x78a <_Z6dsModev+0x18a>
		inner_counter +=1;
     782:	ef ef       	ldi	r30, 0xFF	; 255
     784:	ee 1a       	sub	r14, r30
     786:	fe 0a       	sbc	r15, r30
     788:	76 cf       	rjmp	.-276    	; 0x676 <_Z6dsModev+0x76>
		else {
			inner_counter =0;
			exit_counter +=1;
     78a:	53 94       	inc	r5
			if(exit_counter>7) return 0;
     78c:	f7 e0       	ldi	r31, 0x07	; 7
     78e:	f5 15       	cp	r31, r5
     790:	08 f0       	brcs	.+2      	; 0x794 <_Z6dsModev+0x194>
     792:	6f cf       	rjmp	.-290    	; 0x672 <_Z6dsModev+0x72>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	14 c0       	rjmp	.+40     	; 0x7c0 <_Z6dsModev+0x1c0>
		}


		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 2;
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	12 c0       	rjmp	.+36     	; 0x7c0 <_Z6dsModev+0x1c0>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	10 c0       	rjmp	.+32     	; 0x7c0 <_Z6dsModev+0x1c0>
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <_Z6dsModev+0x1c0>
     7a4:	8f ec       	ldi	r24, 0xCF	; 207
     7a6:	97 e0       	ldi	r25, 0x07	; 7
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <_Z6dsModev+0x1a8>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <_Z6dsModev+0x1ae>
     7ae:	00 00       	nop
     7b0:	e8 cf       	rjmp	.-48     	; 0x782 <_Z6dsModev+0x182>
     7b2:	ef ec       	ldi	r30, 0xCF	; 207
     7b4:	f7 e0       	ldi	r31, 0x07	; 7
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <_Z6dsModev+0x1b6>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <_Z6dsModev+0x1bc>
     7bc:	00 00       	nop
     7be:	e1 cf       	rjmp	.-62     	; 0x782 <_Z6dsModev+0x182>
			inner_counter =0;
			exit_counter +=1;
			if(exit_counter>7) return 0;
		}
	}
}
     7c0:	29 96       	adiw	r28, 0x09	; 9
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	af 90       	pop	r10
     7e0:	9f 90       	pop	r9
     7e2:	8f 90       	pop	r8
     7e4:	7f 90       	pop	r7
     7e6:	6f 90       	pop	r6
     7e8:	5f 90       	pop	r5
     7ea:	4f 90       	pop	r4
     7ec:	3f 90       	pop	r3
     7ee:	2f 90       	pop	r2
     7f0:	08 95       	ret

000007f2 <_Z7acbModev>:

uint8_t acbMode() {
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
		screen_arr[4] = 1;
     80c:	e4 e0       	ldi	r30, 0x04	; 4
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	84 83       	std	Z+4, r24	; 0x04
		screen_arr[3] = 'u';
     814:	85 e7       	ldi	r24, 0x75	; 117
     816:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[2] = -1;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = -1;
     81c:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[0] = -1;
     81e:	80 83       	st	Z, r24
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	94 e0       	ldi	r25, 0x04	; 4
     824:	90 93 0a 01 	sts	0x010A, r25
     828:	80 93 09 01 	sts	0x0109, r24
		DataReady = false;
     82c:	10 92 0b 01 	sts	0x010B, r1
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     830:	ec e7       	ldi	r30, 0x7C	; 124
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 7f       	andi	r24, 0xF0	; 240
     838:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     83a:	80 81       	ld	r24, Z
     83c:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     83e:	ea e7       	ldi	r30, 0x7A	; 122
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	87 60       	ori	r24, 0x07	; 7
     846:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
     848:	80 81       	ld	r24, Z
     84a:	88 60       	ori	r24, 0x08	; 8
     84c:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
     84e:	80 81       	ld	r24, Z
     850:	80 68       	ori	r24, 0x80	; 128
     852:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
     854:	80 81       	ld	r24, Z
     856:	80 64       	ori	r24, 0x40	; 64
     858:	80 83       	st	Z, r24
		AdcClass adcOb;
		adcOb.Init();
		sei();
     85a:	78 94       	sei
     85c:	0f 2e       	mov	r0, r31
     85e:	f9 e5       	ldi	r31, 0x59	; 89
     860:	ef 2e       	mov	r14, r31
     862:	fb e1       	ldi	r31, 0x1B	; 27
     864:	ff 2e       	mov	r15, r31
     866:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     868:	cc e7       	ldi	r28, 0x7C	; 124
     86a:	d0 e0       	ldi	r29, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     86c:	0f 2e       	mov	r0, r31
     86e:	fa e7       	ldi	r31, 0x7A	; 122
     870:	cf 2e       	mov	r12, r31
     872:	d1 2c       	mov	r13, r1
     874:	f0 2d       	mov	r31, r0
		uint16_t exitCouter = 0;
		while(true){
			adcOb.MesureVoltage(PORTC0);
			screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     876:	0f 2e       	mov	r0, r31
     878:	fd ec       	ldi	r31, 0xCD	; 205
     87a:	bf 2e       	mov	r11, r31
     87c:	f0 2d       	mov	r31, r0
     87e:	04 e0       	ldi	r16, 0x04	; 4
     880:	11 e0       	ldi	r17, 0x01	; 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     882:	88 81       	ld	r24, Y
     884:	8f 70       	andi	r24, 0x0F	; 15
     886:	88 83       	st	Y, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     888:	88 81       	ld	r24, Y
     88a:	80 7f       	andi	r24, 0xF0	; 240
     88c:	88 83       	st	Y, r24
		ADMUX |= NumberOfPin;
     88e:	88 81       	ld	r24, Y
     890:	88 83       	st	Y, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     892:	f6 01       	movw	r30, r12
     894:	80 81       	ld	r24, Z
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     89a:	80 91 0b 01 	lds	r24, 0x010B
     89e:	88 23       	and	r24, r24
     8a0:	e1 f3       	breq	.-8      	; 0x89a <_Z7acbModev+0xa8>
		Voltage = CalculateVoltage(Data);
     8a2:	60 91 09 01 	lds	r22, 0x0109
     8a6:	70 91 0a 01 	lds	r23, 0x010A
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 b9 08 	call	0x1172	; 0x1172 <__floatunsisf>
     8b2:	2a ea       	ldi	r18, 0xAA	; 170
     8b4:	31 ef       	ldi	r19, 0xF1	; 241
     8b6:	44 e9       	ldi	r20, 0x94	; 148
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     8be:	2b 01       	movw	r4, r22
     8c0:	3c 01       	movw	r6, r24
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
     8c2:	10 92 0b 01 	sts	0x010B, r1
     8c6:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
     8ca:	6b 9d       	mul	r22, r11
     8cc:	81 2d       	mov	r24, r1
     8ce:	11 24       	eor	r1, r1
     8d0:	86 95       	lsr	r24
     8d2:	86 95       	lsr	r24
     8d4:	86 95       	lsr	r24
     8d6:	f8 01       	movw	r30, r16
     8d8:	82 83       	std	Z+2, r24	; 0x02
			screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     8da:	88 0f       	add	r24, r24
     8dc:	98 2f       	mov	r25, r24
     8de:	99 0f       	add	r25, r25
     8e0:	99 0f       	add	r25, r25
     8e2:	89 0f       	add	r24, r25
     8e4:	68 1b       	sub	r22, r24
     8e6:	61 83       	std	Z+1, r22	; 0x01
			screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e2       	ldi	r20, 0x20	; 32
     8ee:	51 e4       	ldi	r21, 0x41	; 65
     8f0:	c3 01       	movw	r24, r6
     8f2:	b2 01       	movw	r22, r4
     8f4:	0e 94 47 09 	call	0x128e	; 0x128e <__mulsf3>
     8f8:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
     8fc:	6b 9d       	mul	r22, r11
     8fe:	81 2d       	mov	r24, r1
     900:	11 24       	eor	r1, r1
     902:	86 95       	lsr	r24
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	88 0f       	add	r24, r24
     90a:	98 2f       	mov	r25, r24
     90c:	99 0f       	add	r25, r25
     90e:	99 0f       	add	r25, r25
     910:	89 0f       	add	r24, r25
     912:	68 1b       	sub	r22, r24
     914:	f8 01       	movw	r30, r16
     916:	60 83       	st	Z, r22


			uint8_t key = keyChecker();
     918:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
			if(key) {
				if (key == 1) return 0;
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	59 f0       	breq	.+22     	; 0x936 <__stack+0x37>
     920:	8f ec       	ldi	r24, 0xCF	; 207
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <__stack+0x25>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	e9 1a       	sub	r14, r25
     930:	f1 08       	sbc	r15, r1
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
			if(exitCouter > 7000) return 0;
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	a6 cf       	rjmp	.-180    	; 0x882 <_Z7acbModev+0x90>
		}
}
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	7f 90       	pop	r7
     94c:	6f 90       	pop	r6
     94e:	5f 90       	pop	r5
     950:	4f 90       	pop	r4
     952:	08 95       	ret

00000954 <_Z12setupMinutesv>:

uint8_t setupMinutes () {
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
     96a:	e4 e0       	ldi	r30, 0x04	; 4
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	90 81       	ld	r25, Z
     970:	81 81       	ldd	r24, Z+1	; 0x01
     972:	88 0f       	add	r24, r24
     974:	18 2f       	mov	r17, r24
     976:	11 0f       	add	r17, r17
     978:	11 0f       	add	r17, r17
     97a:	81 0f       	add	r24, r17
     97c:	18 2f       	mov	r17, r24
     97e:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     980:	c0 e0       	ldi	r28, 0x00	; 0
     982:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				minutes += 1;
				minutes %= 60;
     984:	0f 2e       	mov	r0, r31
     986:	f9 e8       	ldi	r31, 0x89	; 137
     988:	9f 2e       	mov	r9, r31
     98a:	f0 2d       	mov	r31, r0
     98c:	0f 2e       	mov	r0, r31
     98e:	fc e3       	ldi	r31, 0x3C	; 60
     990:	af 2e       	mov	r10, r31
     992:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
			screen_arr [0] = minutes % 10;
		}
		else {
			screen_arr [1] = -1;
     994:	7f 01       	movw	r14, r30
     996:	0f ef       	ldi	r16, 0xFF	; 255
			return 4;
			}

		}
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
     998:	0f 2e       	mov	r0, r31
     99a:	fd ec       	ldi	r31, 0xCD	; 205
     99c:	bf 2e       	mov	r11, r31
     99e:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     9a0:	c1 2c       	mov	r12, r1
     9a2:	d1 2c       	mov	r13, r1

uint8_t setupMinutes () {
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     9a4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     9a8:	88 23       	and	r24, r24
     9aa:	81 f0       	breq	.+32     	; 0x9cc <_Z12setupMinutesv+0x78>
			if (key == 1) {
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	61 f4       	brne	.+24     	; 0x9c8 <_Z12setupMinutesv+0x74>
				minutes += 1;
     9b0:	81 0f       	add	r24, r17
				minutes %= 60;
     9b2:	89 9d       	mul	r24, r9
     9b4:	11 2d       	mov	r17, r1
     9b6:	11 24       	eor	r1, r1
     9b8:	12 95       	swap	r17
     9ba:	16 95       	lsr	r17
     9bc:	17 70       	andi	r17, 0x07	; 7
     9be:	1a 9d       	mul	r17, r10
     9c0:	80 19       	sub	r24, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	18 2f       	mov	r17, r24
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <_Z12setupMinutesv+0x78>
				
			}
			if (key == 2) {
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	31 f1       	breq	.+76     	; 0xa18 <_Z12setupMinutesv+0xc4>
			screen_arr [0] = minutes % 10;
			return 4;
			}

		}
		if (blinker > 250) {
     9cc:	cb 3f       	cpi	r28, 0xFB	; 251
     9ce:	d1 05       	cpc	r29, r1
     9d0:	88 f0       	brcs	.+34     	; 0x9f4 <_Z12setupMinutesv+0xa0>
			screen_arr [1] = minutes / 10;
     9d2:	1b 9d       	mul	r17, r11
     9d4:	91 2d       	mov	r25, r1
     9d6:	11 24       	eor	r1, r1
     9d8:	96 95       	lsr	r25
     9da:	96 95       	lsr	r25
     9dc:	96 95       	lsr	r25
     9de:	f7 01       	movw	r30, r14
     9e0:	91 83       	std	Z+1, r25	; 0x01
			screen_arr [0] = minutes % 10;
     9e2:	99 0f       	add	r25, r25
     9e4:	89 2f       	mov	r24, r25
     9e6:	88 0f       	add	r24, r24
     9e8:	88 0f       	add	r24, r24
     9ea:	98 0f       	add	r25, r24
     9ec:	81 2f       	mov	r24, r17
     9ee:	89 1b       	sub	r24, r25
     9f0:	80 83       	st	Z, r24
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <_Z12setupMinutesv+0xa6>
		}
		else {
			screen_arr [1] = -1;
     9f4:	f7 01       	movw	r30, r14
     9f6:	01 83       	std	Z+1, r16	; 0x01
			screen_arr [0] = -1;
     9f8:	00 83       	st	Z, r16
		}
		if (blinker < 500) {
     9fa:	c4 3f       	cpi	r28, 0xF4	; 244
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	df 07       	cpc	r29, r31
     a00:	10 f4       	brcc	.+4      	; 0xa06 <_Z12setupMinutesv+0xb2>
			blinker += 1;
     a02:	21 96       	adiw	r28, 0x01	; 1
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <_Z12setupMinutesv+0xb6>
		}
		else {
			blinker = 0;
     a06:	cc 2d       	mov	r28, r12
     a08:	dd 2d       	mov	r29, r13
     a0a:	ef ec       	ldi	r30, 0xCF	; 207
     a0c:	f7 e0       	ldi	r31, 0x07	; 7
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <_Z12setupMinutesv+0xba>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <_Z12setupMinutesv+0xc0>
     a14:	00 00       	nop
     a16:	c6 cf       	rjmp	.-116    	; 0x9a4 <_Z12setupMinutesv+0x50>
				minutes += 1;
				minutes %= 60;
				
			}
			if (key == 2) {
			rtcSendMinutes (minutes);
     a18:	81 2f       	mov	r24, r17
     a1a:	0e 94 f0 06 	call	0xde0	; 0xde0 <_Z14rtcSendMinutesh>
			screen_arr [1] = minutes / 10;
     a1e:	8d ec       	ldi	r24, 0xCD	; 205
     a20:	18 9f       	mul	r17, r24
     a22:	81 2d       	mov	r24, r1
     a24:	11 24       	eor	r1, r1
     a26:	86 95       	lsr	r24
     a28:	86 95       	lsr	r24
     a2a:	86 95       	lsr	r24
     a2c:	e4 e0       	ldi	r30, 0x04	; 4
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     a32:	88 0f       	add	r24, r24
     a34:	98 2f       	mov	r25, r24
     a36:	99 0f       	add	r25, r25
     a38:	99 0f       	add	r25, r25
     a3a:	89 0f       	add	r24, r25
     a3c:	18 1b       	sub	r17, r24
     a3e:	10 83       	st	Z, r17
			blinker = 0;
		}
		_delay_ms(1);

	}
}
     a40:	84 e0       	ldi	r24, 0x04	; 4
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	08 95       	ret

00000a5a <_Z10setupHoursv>:
uint8_t setupHours () {
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
     a70:	e4 e0       	ldi	r30, 0x04	; 4
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	92 81       	ldd	r25, Z+2	; 0x02
     a76:	83 81       	ldd	r24, Z+3	; 0x03
     a78:	88 0f       	add	r24, r24
     a7a:	18 2f       	mov	r17, r24
     a7c:	11 0f       	add	r17, r17
     a7e:	11 0f       	add	r17, r17
     a80:	81 0f       	add	r24, r17
     a82:	18 2f       	mov	r17, r24
     a84:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				hours += 1;
				hours %= 24;
     a8a:	0f 2e       	mov	r0, r31
     a8c:	fb ea       	ldi	r31, 0xAB	; 171
     a8e:	9f 2e       	mov	r9, r31
     a90:	f0 2d       	mov	r31, r0
     a92:	0f 2e       	mov	r0, r31
     a94:	f8 e1       	ldi	r31, 0x18	; 24
     a96:	af 2e       	mov	r10, r31
     a98:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
			screen_arr [2] = hours % 10;
		}
		else {
			screen_arr [3] = -1;
     a9a:	7f 01       	movw	r14, r30
     a9c:	0f ef       	ldi	r16, 0xFF	; 255
			return 0;
			}

		}
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
     a9e:	0f 2e       	mov	r0, r31
     aa0:	fd ec       	ldi	r31, 0xCD	; 205
     aa2:	bf 2e       	mov	r11, r31
     aa4:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1
}
uint8_t setupHours () {
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     aaa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     aae:	88 23       	and	r24, r24
     ab0:	79 f0       	breq	.+30     	; 0xad0 <_Z10setupHoursv+0x76>
			if (key == 1) {
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	59 f4       	brne	.+22     	; 0xacc <_Z10setupHoursv+0x72>
				hours += 1;
     ab6:	81 0f       	add	r24, r17
				hours %= 24;
     ab8:	89 9d       	mul	r24, r9
     aba:	11 2d       	mov	r17, r1
     abc:	11 24       	eor	r1, r1
     abe:	12 95       	swap	r17
     ac0:	1f 70       	andi	r17, 0x0F	; 15
     ac2:	1a 9d       	mul	r17, r10
     ac4:	80 19       	sub	r24, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	18 2f       	mov	r17, r24
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <_Z10setupHoursv+0x76>
				
			}
			if (key == 2) {
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	31 f1       	breq	.+76     	; 0xb1c <_Z10setupHoursv+0xc2>
			rtcSendHours (hours);
			return 0;
			}

		}
		if (blinker > 250) {
     ad0:	cb 3f       	cpi	r28, 0xFB	; 251
     ad2:	d1 05       	cpc	r29, r1
     ad4:	88 f0       	brcs	.+34     	; 0xaf8 <_Z10setupHoursv+0x9e>
			screen_arr [3] = hours / 10;
     ad6:	1b 9d       	mul	r17, r11
     ad8:	91 2d       	mov	r25, r1
     ada:	11 24       	eor	r1, r1
     adc:	96 95       	lsr	r25
     ade:	96 95       	lsr	r25
     ae0:	96 95       	lsr	r25
     ae2:	f7 01       	movw	r30, r14
     ae4:	93 83       	std	Z+3, r25	; 0x03
			screen_arr [2] = hours % 10;
     ae6:	99 0f       	add	r25, r25
     ae8:	89 2f       	mov	r24, r25
     aea:	88 0f       	add	r24, r24
     aec:	88 0f       	add	r24, r24
     aee:	98 0f       	add	r25, r24
     af0:	81 2f       	mov	r24, r17
     af2:	89 1b       	sub	r24, r25
     af4:	82 83       	std	Z+2, r24	; 0x02
     af6:	03 c0       	rjmp	.+6      	; 0xafe <_Z10setupHoursv+0xa4>
		}
		else {
			screen_arr [3] = -1;
     af8:	f7 01       	movw	r30, r14
     afa:	03 83       	std	Z+3, r16	; 0x03
			screen_arr [2] = -1;
     afc:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500) {
     afe:	c4 3f       	cpi	r28, 0xF4	; 244
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	df 07       	cpc	r29, r31
     b04:	10 f4       	brcc	.+4      	; 0xb0a <_Z10setupHoursv+0xb0>
			blinker += 1;
     b06:	21 96       	adiw	r28, 0x01	; 1
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <_Z10setupHoursv+0xb4>
		}
		else {
			blinker = 0;
     b0a:	cc 2d       	mov	r28, r12
     b0c:	dd 2d       	mov	r29, r13
     b0e:	ef ec       	ldi	r30, 0xCF	; 207
     b10:	f7 e0       	ldi	r31, 0x07	; 7
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <_Z10setupHoursv+0xb8>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <_Z10setupHoursv+0xbe>
     b18:	00 00       	nop
     b1a:	c7 cf       	rjmp	.-114    	; 0xaaa <_Z10setupHoursv+0x50>
				hours += 1;
				hours %= 24;
				
			}
			if (key == 2) {
			rtcSendHours (hours);
     b1c:	81 2f       	mov	r24, r17
     b1e:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z12rtcSendHoursh>
		}
		_delay_ms(1);


	}
}
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	9f 90       	pop	r9
     b3a:	08 95       	ret

00000b3c <_Z14clrScreenArrayv>:
	}

	return 0;
}
void clrScreenArray () {
	screen_arr[0]=-1;
     b3c:	e4 e0       	ldi	r30, 0x04	; 4
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	80 83       	st	Z, r24
	screen_arr[1]=-1;
     b44:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2]=-1;
     b46:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3]=-1;
     b48:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4]=-1;
     b4a:	84 83       	std	Z+4, r24	; 0x04
     b4c:	08 95       	ret

00000b4e <main>:
		current Screen = 2 - accumulator mode;
		current Screen = 3 - setup minutes mode;
		current Screen = 4 - setum hours mode;
	*/

	DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
     b4e:	8a b1       	in	r24, 0x0a	; 10
     b50:	87 7e       	andi	r24, 0xE7	; 231
     b52:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
     b54:	8b b1       	in	r24, 0x0b	; 11
     b56:	88 61       	ori	r24, 0x18	; 24
     b58:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray();//Start from blank screen
     b5a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
     b5e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z21EnableTimer0Interruptv>
	sei();
     b62:	78 94       	sei
	rtcInit();
     b64:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_Z7rtcInitv>
uint8_t keyChecker();
void clrScreenArray ();

int main(void)
{
	uint8_t currentScreen = 0;
     b68:	80 e0       	ldi	r24, 0x00	; 0
	EnableTimer0Interrupt();
	sei();
	rtcInit();
    while (1) 
    {
		switch (currentScreen) {
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	89 f0       	breq	.+34     	; 0xb90 <main+0x42>
     b6e:	28 f4       	brcc	.+10     	; 0xb7a <main+0x2c>
     b70:	88 23       	and	r24, r24
     b72:	41 f0       	breq	.+16     	; 0xb84 <main+0x36>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	49 f0       	breq	.+18     	; 0xb8a <main+0x3c>
     b78:	14 c0       	rjmp	.+40     	; 0xba2 <main+0x54>
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	61 f0       	breq	.+24     	; 0xb96 <main+0x48>
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	69 f0       	breq	.+26     	; 0xb9c <main+0x4e>
     b82:	0f c0       	rjmp	.+30     	; 0xba2 <main+0x54>
			case 0: currentScreen = rtcCycle();
     b84:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z8rtcCyclev>
					break;
     b88:	f0 cf       	rjmp	.-32     	; 0xb6a <main+0x1c>
			case 1: currentScreen = dsMode();
     b8a:	0e 94 00 03 	call	0x600	; 0x600 <_Z6dsModev>
					break;
     b8e:	ed cf       	rjmp	.-38     	; 0xb6a <main+0x1c>
			case 2: currentScreen = acbMode();
     b90:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z7acbModev>
					break;
     b94:	ea cf       	rjmp	.-44     	; 0xb6a <main+0x1c>
			case 3: currentScreen = setupMinutes();
     b96:	0e 94 aa 04 	call	0x954	; 0x954 <_Z12setupMinutesv>
					break;
     b9a:	e7 cf       	rjmp	.-50     	; 0xb6a <main+0x1c>
			case 4: currentScreen = setupHours();
     b9c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z10setupHoursv>
					break;
     ba0:	e4 cf       	rjmp	.-56     	; 0xb6a <main+0x1c>
			default: currentScreen = rtcCycle();
     ba2:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z8rtcCyclev>
					 break;
     ba6:	e1 cf       	rjmp	.-62     	; 0xb6a <main+0x1c>

00000ba8 <_Z13i2cSetBitratej>:
void i2cSetBitrate(uint16_t bitratekHz)
{
	uint8_t bitrate_div;
	// set i2c bitrate
	// Set Prescaler to one --> TWPS = 1
	TWSR =((0<<TWPS0)|(0<<TWPS1));
     ba8:	10 92 b9 00 	sts	0x00B9, r1
	//calculate bitrate division	
	bitrate_div = (((float)F_CPU/1000.0)/(float)bitratekHz);
     bac:	bc 01       	movw	r22, r24
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 b9 08 	call	0x1172	; 0x1172 <__floatunsisf>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	8a ef       	ldi	r24, 0xFA	; 250
     bc0:	95 e4       	ldi	r25, 0x45	; 69
     bc2:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     bc6:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
	if(bitrate_div >= 16){
     bca:	60 31       	cpi	r22, 0x10	; 16
     bcc:	88 f0       	brcs	.+34     	; 0xbf0 <_Z13i2cSetBitratej+0x48>
		bitrate_div = (float)(bitrate_div-16)/8;
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	60 51       	subi	r22, 0x10	; 16
     bd2:	71 09       	sbc	r23, r1
     bd4:	07 2e       	mov	r0, r23
     bd6:	00 0c       	add	r0, r0
     bd8:	88 0b       	sbc	r24, r24
     bda:	99 0b       	sbc	r25, r25
     bdc:	0e 94 bb 08 	call	0x1176	; 0x1176 <__floatsisf>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	5e e3       	ldi	r21, 0x3E	; 62
     be8:	0e 94 47 09 	call	0x128e	; 0x128e <__mulsf3>
     bec:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
	}
	//printf("DIV: %d \n",bitrate_div);
	TWBR=(uint8_t)bitrate_div;
     bf0:	60 93 b8 00 	sts	0x00B8, r22
	//TWBR=0; -> max speed
	PORTC |= ((1<<PINC4) | (1<<PINC5));
     bf4:	88 b1       	in	r24, 0x08	; 8
     bf6:	80 63       	ori	r24, 0x30	; 48
     bf8:	88 b9       	out	0x08, r24	; 8
     bfa:	08 95       	ret

00000bfc <_Z11i2cSendStopv>:
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
     bfc:	84 e9       	ldi	r24, 0x94	; 148
     bfe:	80 93 bc 00 	sts	0x00BC, r24
// 
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
     c02:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
     c04:	ec eb       	ldi	r30, 0xBC	; 188
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	84 ff       	sbrs	r24, 4
     c0c:	08 c0       	rjmp	.+16     	; 0xc1e <_Z11i2cSendStopv+0x22>
     c0e:	9a 35       	cpi	r25, 0x5A	; 90
     c10:	51 f4       	brne	.+20     	; 0xc26 <_Z11i2cSendStopv+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	8a 95       	dec	r24
     c16:	f1 f7       	brne	.-4      	; 0xc14 <_Z11i2cSendStopv+0x18>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <_Z11i2cSendStopv+0x1e>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     c1a:	84 e6       	ldi	r24, 0x64	; 100
     c1c:	08 95       	ret
	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     c1e:	9a 35       	cpi	r25, 0x5A	; 90
     c20:	c0 f7       	brcc	.-16     	; 0xc12 <_Z11i2cSendStopv+0x16>
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	8a 95       	dec	r24
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <_Z11i2cSendStopv+0x2c>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <_Z11i2cSendStopv+0x32>
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
     c2e:	9f 5f       	subi	r25, 0xFF	; 255
     c30:	eb cf       	rjmp	.-42     	; 0xc08 <_Z11i2cSendStopv+0xc>

00000c32 <_Z18i2cWaitForCompletev>:
//----------------------------------------
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
     c32:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;	

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
     c34:	ec eb       	ldi	r30, 0xBC	; 188
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 23       	and	r24, r24
     c3c:	44 f0       	brlt	.+16     	; 0xc4e <_Z18i2cWaitForCompletev+0x1c>
     c3e:	9a 35       	cpi	r25, 0x5A	; 90
     c40:	51 f4       	brne	.+20     	; 0xc56 <_Z18i2cWaitForCompletev+0x24>
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	8a 95       	dec	r24
     c46:	f1 f7       	brne	.-4      	; 0xc44 <_Z18i2cWaitForCompletev+0x12>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <_Z18i2cWaitForCompletev+0x18>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     c4a:	84 e6       	ldi	r24, 0x64	; 100
     c4c:	08 95       	ret
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     c4e:	9a 35       	cpi	r25, 0x5A	; 90
     c50:	c0 f7       	brcc	.-16     	; 0xc42 <_Z18i2cWaitForCompletev+0x10>
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;	
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	08 95       	ret
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	8a 95       	dec	r24
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <_Z18i2cWaitForCompletev+0x26>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <_Z18i2cWaitForCompletev+0x2c>

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
     c5e:	9f 5f       	subi	r25, 0xFF	; 255
     c60:	eb cf       	rjmp	.-42     	; 0xc38 <_Z18i2cWaitForCompletev+0x6>

00000c62 <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
     c62:	20 91 b9 00 	lds	r18, 0x00B9
     c66:	28 7f       	andi	r18, 0xF8	; 248
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	11 f0       	breq	.+4      	; 0xc76 <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
     c72:	8a e0       	ldi	r24, 0x0A	; 10
     c74:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
     c76:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
     c78:	08 95       	ret

00000c7a <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
	i2cSetBitrate(400);
     c84:	80 e9       	ldi	r24, 0x90	; 144
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 d4 05 	call	0xba8	; 0xba8 <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     c8c:	cc eb       	ldi	r28, 0xBC	; 188
     c8e:	d0 e0       	ldi	r29, 0x00	; 0
     c90:	84 ea       	ldi	r24, 0xA4	; 164
     c92:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
     c94:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     c98:	0f 2e       	mov	r0, r31
     c9a:	fb eb       	ldi	r31, 0xBB	; 187
     c9c:	ef 2e       	mov	r14, r31
     c9e:	f1 2c       	mov	r15, r1
     ca0:	f0 2d       	mov	r31, r0
     ca2:	80 ed       	ldi	r24, 0xD0	; 208
     ca4:	f7 01       	movw	r30, r14
     ca6:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ca8:	14 e8       	ldi	r17, 0x84	; 132
     caa:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     cac:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     cb0:	88 e2       	ldi	r24, 0x28	; 40
     cb2:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     cb6:	8e e0       	ldi	r24, 0x0E	; 14
     cb8:	f7 01       	movw	r30, r14
     cba:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     cbc:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
     cbe:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     cc2:	88 e2       	ldi	r24, 0x28	; 40
     cc4:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	f7 01       	movw	r30, r14
     ccc:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     cce:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
     cd0:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     cd4:	88 e2       	ldi	r24, 0x28	; 40
     cd6:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     cda:	88 e0       	ldi	r24, 0x08	; 8
     cdc:	f7 01       	movw	r30, r14
     cde:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ce0:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
     ce2:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     ce6:	88 e2       	ldi	r24, 0x28	; 40
     ce8:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>

	i2cSendStop();
     cec:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z11i2cSendStopv>
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d14:	cc eb       	ldi	r28, 0xBC	; 188
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	04 ea       	ldi	r16, 0xA4	; 164
     d1a:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
     d1c:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d20:	0f 2e       	mov	r0, r31
     d22:	fb eb       	ldi	r31, 0xBB	; 187
     d24:	ef 2e       	mov	r14, r31
     d26:	f1 2c       	mov	r15, r1
     d28:	f0 2d       	mov	r31, r0
     d2a:	80 ed       	ldi	r24, 0xD0	; 208
     d2c:	f7 01       	movw	r30, r14
     d2e:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d30:	14 e8       	ldi	r17, 0x84	; 132
     d32:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     d34:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d38:	88 e2       	ldi	r24, 0x28	; 40
     d3a:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d3e:	f7 01       	movw	r30, r14
     d40:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d42:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
     d44:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d48:	88 e2       	ldi	r24, 0x28	; 40
     d4a:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>

	i2cSendStop();
     d4e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d52:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
     d54:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d58:	81 ed       	ldi	r24, 0xD1	; 209
     d5a:	f7 01       	movw	r30, r14
     d5c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d5e:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
     d60:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d64:	88 e2       	ldi	r24, 0x28	; 40
     d66:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
     d6a:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
     d6e:	e5 01       	movw	r28, r10
     d70:	65 01       	movw	r12, r10
     d72:	f3 e1       	ldi	r31, 0x13	; 19
     d74:	cf 0e       	add	r12, r31
     d76:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     d78:	0f 2e       	mov	r0, r31
     d7a:	fc eb       	ldi	r31, 0xBC	; 188
     d7c:	ef 2e       	mov	r14, r31
     d7e:	f1 2c       	mov	r15, r1
     d80:	f0 2d       	mov	r31, r0
     d82:	0f 2e       	mov	r0, r31
     d84:	f4 ec       	ldi	r31, 0xC4	; 196
     d86:	9f 2e       	mov	r9, r31
     d88:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     d8a:	0b eb       	ldi	r16, 0xBB	; 187
     d8c:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     d8e:	f7 01       	movw	r30, r14
     d90:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
     d92:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     d96:	f8 01       	movw	r30, r16
     d98:	90 81       	ld	r25, Z
		timeArr[i] = i2cGetReceivedByte();
     d9a:	99 93       	st	Y+, r25
		i2cWaitForComplete();
     d9c:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
     da0:	80 e5       	ldi	r24, 0x50	; 80
     da2:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
     da6:	cc 15       	cp	r28, r12
     da8:	dd 05       	cpc	r29, r13
     daa:	89 f7       	brne	.-30     	; 0xd8e <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
     dac:	84 e8       	ldi	r24, 0x84	; 132
     dae:	80 93 bc 00 	sts	0x00BC, r24
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
     db2:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     db6:	80 91 bb 00 	lds	r24, 0x00BB
	timeArr[6] = i2cGetReceivedByte();
     dba:	f5 01       	movw	r30, r10
     dbc:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
     dbe:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
     dc2:	88 e5       	ldi	r24, 0x58	; 88
     dc4:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>

	

}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	9f 90       	pop	r9
     dde:	08 95       	ret

00000de0 <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
     dec:	9d ec       	ldi	r25, 0xCD	; 205
     dee:	89 9f       	mul	r24, r25
     df0:	91 2d       	mov	r25, r1
     df2:	11 24       	eor	r1, r1
     df4:	96 95       	lsr	r25
     df6:	96 95       	lsr	r25
     df8:	96 95       	lsr	r25
	bdc <<= 4;
     dfa:	c9 2f       	mov	r28, r25
     dfc:	c2 95       	swap	r28
     dfe:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= minutes%10;
     e00:	99 0f       	add	r25, r25
     e02:	29 2f       	mov	r18, r25
     e04:	22 0f       	add	r18, r18
     e06:	22 0f       	add	r18, r18
     e08:	92 0f       	add	r25, r18
     e0a:	89 1b       	sub	r24, r25
     e0c:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e0e:	0c eb       	ldi	r16, 0xBC	; 188
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	84 ea       	ldi	r24, 0xA4	; 164
     e14:	f8 01       	movw	r30, r16
     e16:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
     e18:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     e1c:	0f 2e       	mov	r0, r31
     e1e:	fb eb       	ldi	r31, 0xBB	; 187
     e20:	ef 2e       	mov	r14, r31
     e22:	f1 2c       	mov	r15, r1
     e24:	f0 2d       	mov	r31, r0
     e26:	80 ed       	ldi	r24, 0xD0	; 208
     e28:	f7 01       	movw	r30, r14
     e2a:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     e2c:	d4 e8       	ldi	r29, 0x84	; 132
     e2e:	f8 01       	movw	r30, r16
     e30:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     e32:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     e36:	88 e2       	ldi	r24, 0x28	; 40
     e38:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     e3c:	f7 01       	movw	r30, r14
     e3e:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     e40:	f8 01       	movw	r30, r16
     e42:	d0 83       	st	Z, r29

	i2cSendByte(0x00);
	i2cWaitForComplete();
     e44:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     e48:	88 e2       	ldi	r24, 0x28	; 40
     e4a:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     e4e:	f7 01       	movw	r30, r14
     e50:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     e52:	f8 01       	movw	r30, r16
     e54:	d0 83       	st	Z, r29

	i2cSendByte(0);
	i2cWaitForComplete();
     e56:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     e5a:	88 e2       	ldi	r24, 0x28	; 40
     e5c:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     e60:	f7 01       	movw	r30, r14
     e62:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     e64:	f8 01       	movw	r30, r16
     e66:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
     e68:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     e6c:	88 e2       	ldi	r24, 0x28	; 40
     e6e:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>

	i2cSendStop();
     e72:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z11i2cSendStopv>
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	08 95       	ret

00000e84 <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
     e90:	9d ec       	ldi	r25, 0xCD	; 205
     e92:	89 9f       	mul	r24, r25
     e94:	91 2d       	mov	r25, r1
     e96:	11 24       	eor	r1, r1
     e98:	96 95       	lsr	r25
     e9a:	96 95       	lsr	r25
     e9c:	96 95       	lsr	r25
	bdc <<= 4;
     e9e:	c9 2f       	mov	r28, r25
     ea0:	c2 95       	swap	r28
     ea2:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= hours%10;
     ea4:	99 0f       	add	r25, r25
     ea6:	29 2f       	mov	r18, r25
     ea8:	22 0f       	add	r18, r18
     eaa:	22 0f       	add	r18, r18
     eac:	92 0f       	add	r25, r18
     eae:	89 1b       	sub	r24, r25
     eb0:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     eb2:	0c eb       	ldi	r16, 0xBC	; 188
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	84 ea       	ldi	r24, 0xA4	; 164
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
     ebc:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ec0:	0f 2e       	mov	r0, r31
     ec2:	fb eb       	ldi	r31, 0xBB	; 187
     ec4:	ef 2e       	mov	r14, r31
     ec6:	f1 2c       	mov	r15, r1
     ec8:	f0 2d       	mov	r31, r0
     eca:	80 ed       	ldi	r24, 0xD0	; 208
     ecc:	f7 01       	movw	r30, r14
     ece:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ed0:	d4 e8       	ldi	r29, 0x84	; 132
     ed2:	f8 01       	movw	r30, r16
     ed4:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     ed6:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     eda:	88 e2       	ldi	r24, 0x28	; 40
     edc:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	f7 01       	movw	r30, r14
     ee4:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ee6:	f8 01       	movw	r30, r16
     ee8:	d0 83       	st	Z, r29

	i2cSendByte(0x02);
	i2cWaitForComplete();
     eea:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     eee:	88 e2       	ldi	r24, 0x28	; 40
     ef0:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ef4:	f7 01       	movw	r30, r14
     ef6:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ef8:	f8 01       	movw	r30, r16
     efa:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
     efc:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     f00:	88 e2       	ldi	r24, 0x28	; 40
     f02:	0e 94 31 06 	call	0xc62	; 0xc62 <_Z18checki2cReturnCodeh>

	i2cSendStop();
     f06:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_Z11i2cSendStopv>
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
     f18:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
     f1a:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
     f1c:	8a b1       	in	r24, 0x0a	; 10
     f1e:	82 62       	ori	r24, 0x22	; 34
     f20:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
     f22:	8b b1       	in	r24, 0x0b	; 11
     f24:	8d 7d       	andi	r24, 0xDD	; 221
     f26:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
     f28:	84 b1       	in	r24, 0x04	; 4
     f2a:	8d 63       	ori	r24, 0x3D	; 61
     f2c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
     f2e:	85 b1       	in	r24, 0x05	; 5
     f30:	82 7c       	andi	r24, 0xC2	; 194
     f32:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
     f34:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
     f36:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
     f38:	8a b1       	in	r24, 0x0a	; 10
     f3a:	80 6c       	ori	r24, 0xC0	; 192
     f3c:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
     f3e:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
     f40:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
     f42:	8b b1       	in	r24, 0x0b	; 11
     f44:	80 6c       	ori	r24, 0xC0	; 192
     f46:	8b b9       	out	0x0b, r24	; 11
     f48:	08 95       	ret

00000f4a <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	c8 2f       	mov	r28, r24
     f50:	d6 2f       	mov	r29, r22
	ClrScr();
     f52:	0e 94 8c 07 	call	0xf18	; 0xf18 <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
     f56:	d1 11       	cpse	r29, r1
     f58:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
     f5a:	8c 2f       	mov	r24, r28
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	86 37       	cpi	r24, 0x76	; 118
     f60:	91 05       	cpc	r25, r1
     f62:	08 f0       	brcs	.+2      	; 0xf66 <_Z11Display7seghb+0x1c>
     f64:	4d c0       	rjmp	.+154    	; 0x1000 <_Z11Display7seghb+0xb6>
     f66:	fc 01       	movw	r30, r24
     f68:	ec 5c       	subi	r30, 0xCC	; 204
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
     f70:	85 b1       	in	r24, 0x05	; 5
     f72:	89 62       	ori	r24, 0x29	; 41
     f74:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     f76:	8b b1       	in	r24, 0x0b	; 11
     f78:	82 62       	ori	r24, 0x22	; 34
     f7a:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
     f7c:	42 9a       	sbi	0x08, 2	; 8
				break;
     f7e:	42 c0       	rjmp	.+132    	; 0x1004 <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
     f80:	85 b1       	in	r24, 0x05	; 5
     f82:	89 60       	ori	r24, 0x09	; 9
     f84:	85 b9       	out	0x05, r24	; 5
				break;
     f86:	3e c0       	rjmp	.+124    	; 0x1004 <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
     f88:	85 b1       	in	r24, 0x05	; 5
     f8a:	85 62       	ori	r24, 0x25	; 37
     f8c:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
     f8e:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
     f90:	42 9a       	sbi	0x08, 2	; 8
				break;
     f92:	38 c0       	rjmp	.+112    	; 0x1004 <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
     f94:	85 b1       	in	r24, 0x05	; 5
     f96:	8d 62       	ori	r24, 0x2D	; 45
     f98:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
     f9a:	59 9a       	sbi	0x0b, 1	; 11
				break;
     f9c:	33 c0       	rjmp	.+102    	; 0x1004 <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
     f9e:	85 b1       	in	r24, 0x05	; 5
     fa0:	8d 60       	ori	r24, 0x0D	; 13
     fa2:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
     fa4:	5d 9a       	sbi	0x0b, 5	; 11
				break;
     fa6:	2e c0       	rjmp	.+92     	; 0x1004 <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	8c 62       	ori	r24, 0x2C	; 44
     fac:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     fae:	8b b1       	in	r24, 0x0b	; 11
     fb0:	82 62       	ori	r24, 0x22	; 34
     fb2:	8b b9       	out	0x0b, r24	; 11
				break;
     fb4:	27 c0       	rjmp	.+78     	; 0x1004 <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
     fb6:	85 b1       	in	r24, 0x05	; 5
     fb8:	8c 62       	ori	r24, 0x2C	; 44
     fba:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     fbc:	8b b1       	in	r24, 0x0b	; 11
     fbe:	82 62       	ori	r24, 0x22	; 34
     fc0:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
     fc2:	42 9a       	sbi	0x08, 2	; 8
				break;
     fc4:	1f c0       	rjmp	.+62     	; 0x1004 <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
     fc6:	85 b1       	in	r24, 0x05	; 5
     fc8:	89 60       	ori	r24, 0x09	; 9
     fca:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     fcc:	8b b1       	in	r24, 0x0b	; 11
     fce:	82 62       	ori	r24, 0x22	; 34
     fd0:	8b b9       	out	0x0b, r24	; 11
				break;
     fd2:	18 c0       	rjmp	.+48     	; 0x1004 <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
     fd4:	85 b1       	in	r24, 0x05	; 5
     fd6:	8d 62       	ori	r24, 0x2D	; 45
     fd8:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     fda:	8b b1       	in	r24, 0x0b	; 11
     fdc:	82 62       	ori	r24, 0x22	; 34
     fde:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
     fe0:	42 9a       	sbi	0x08, 2	; 8
				break;
     fe2:	10 c0       	rjmp	.+32     	; 0x1004 <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
     fe4:	85 b1       	in	r24, 0x05	; 5
     fe6:	8d 62       	ori	r24, 0x2D	; 45
     fe8:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
     fea:	8b b1       	in	r24, 0x0b	; 11
     fec:	82 62       	ori	r24, 0x22	; 34
     fee:	8b b9       	out	0x0b, r24	; 11
				break;
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
     ff2:	85 b1       	in	r24, 0x05	; 5
     ff4:	88 62       	ori	r24, 0x28	; 40
     ff6:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
     ff8:	42 9a       	sbi	0x08, 2	; 8
				break;
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
     ffc:	2a 9a       	sbi	0x05, 2	; 5
				break;
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <_Z11Display7seghb+0xba>
		default: ClrScr();
    1000:	0e 94 8c 07 	call	0xf18	; 0xf18 <_Z6ClrScrv>
				break;

	}
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	59 f0       	breq	.+22     	; 0x1024 <_Z9NextDigith+0x1a>
    100e:	18 f4       	brcc	.+6      	; 0x1016 <_Z9NextDigith+0xc>
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	31 f0       	breq	.+12     	; 0x1020 <_Z9NextDigith+0x16>
    1014:	08 95       	ret
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	39 f0       	breq	.+14     	; 0x1028 <_Z9NextDigith+0x1e>
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	39 f0       	breq	.+14     	; 0x102c <_Z9NextDigith+0x22>
    101e:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    1020:	43 98       	cbi	0x08, 3	; 8
		break;
    1022:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    1024:	5e 98       	cbi	0x0b, 6	; 11
		break;
    1026:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    1028:	5f 98       	cbi	0x0b, 7	; 11
		break;
    102a:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    102c:	29 98       	cbi	0x05, 1	; 5
    102e:	08 95       	ret

00001030 <__divsf3>:
    1030:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divsf3x>
    1034:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_round>
    1038:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_pscB>
    103c:	58 f0       	brcs	.+22     	; 0x1054 <__divsf3+0x24>
    103e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_pscA>
    1042:	40 f0       	brcs	.+16     	; 0x1054 <__divsf3+0x24>
    1044:	29 f4       	brne	.+10     	; 0x1050 <__divsf3+0x20>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	29 f0       	breq	.+10     	; 0x1054 <__divsf3+0x24>
    104a:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>
    1054:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_nan>

00001058 <__divsf3x>:
    1058:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_split3>
    105c:	68 f3       	brcs	.-38     	; 0x1038 <__divsf3+0x8>

0000105e <__divsf3_pse>:
    105e:	99 23       	and	r25, r25
    1060:	b1 f3       	breq	.-20     	; 0x104e <__divsf3+0x1e>
    1062:	55 23       	and	r21, r21
    1064:	91 f3       	breq	.-28     	; 0x104a <__divsf3+0x1a>
    1066:	95 1b       	sub	r25, r21
    1068:	55 0b       	sbc	r21, r21
    106a:	bb 27       	eor	r27, r27
    106c:	aa 27       	eor	r26, r26
    106e:	62 17       	cp	r22, r18
    1070:	73 07       	cpc	r23, r19
    1072:	84 07       	cpc	r24, r20
    1074:	38 f0       	brcs	.+14     	; 0x1084 <__divsf3_pse+0x26>
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	44 1f       	adc	r20, r20
    1080:	aa 1f       	adc	r26, r26
    1082:	a9 f3       	breq	.-22     	; 0x106e <__divsf3_pse+0x10>
    1084:	35 d0       	rcall	.+106    	; 0x10f0 <__divsf3_pse+0x92>
    1086:	0e 2e       	mov	r0, r30
    1088:	3a f0       	brmi	.+14     	; 0x1098 <__divsf3_pse+0x3a>
    108a:	e0 e8       	ldi	r30, 0x80	; 128
    108c:	32 d0       	rcall	.+100    	; 0x10f2 <__divsf3_pse+0x94>
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	e6 95       	lsr	r30
    1094:	00 1c       	adc	r0, r0
    1096:	ca f7       	brpl	.-14     	; 0x108a <__divsf3_pse+0x2c>
    1098:	2b d0       	rcall	.+86     	; 0x10f0 <__divsf3_pse+0x92>
    109a:	fe 2f       	mov	r31, r30
    109c:	29 d0       	rcall	.+82     	; 0x10f0 <__divsf3_pse+0x92>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	bb 1f       	adc	r27, r27
    10a6:	26 17       	cp	r18, r22
    10a8:	37 07       	cpc	r19, r23
    10aa:	48 07       	cpc	r20, r24
    10ac:	ab 07       	cpc	r26, r27
    10ae:	b0 e8       	ldi	r27, 0x80	; 128
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__divsf3_pse+0x56>
    10b2:	bb 0b       	sbc	r27, r27
    10b4:	80 2d       	mov	r24, r0
    10b6:	bf 01       	movw	r22, r30
    10b8:	ff 27       	eor	r31, r31
    10ba:	93 58       	subi	r25, 0x83	; 131
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	3a f0       	brmi	.+14     	; 0x10ce <__divsf3_pse+0x70>
    10c0:	9e 3f       	cpi	r25, 0xFE	; 254
    10c2:	51 05       	cpc	r21, r1
    10c4:	78 f0       	brcs	.+30     	; 0x10e4 <__divsf3_pse+0x86>
    10c6:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    10ca:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	e4 f3       	brlt	.-8      	; 0x10ca <__divsf3_pse+0x6c>
    10d2:	98 3e       	cpi	r25, 0xE8	; 232
    10d4:	d4 f3       	brlt	.-12     	; 0x10ca <__divsf3_pse+0x6c>
    10d6:	86 95       	lsr	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	9f 5f       	subi	r25, 0xFF	; 255
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__divsf3_pse+0x78>
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret
    10f0:	e1 e0       	ldi	r30, 0x01	; 1
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	bb 1f       	adc	r27, r27
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	ba 07       	cpc	r27, r26
    1102:	20 f0       	brcs	.+8      	; 0x110c <__divsf3_pse+0xae>
    1104:	62 1b       	sub	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	ba 0b       	sbc	r27, r26
    110c:	ee 1f       	adc	r30, r30
    110e:	88 f7       	brcc	.-30     	; 0x10f2 <__divsf3_pse+0x94>
    1110:	e0 95       	com	r30
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	0e 94 26 09 	call	0x124c	; 0x124c <__fp_splitA>
    1118:	88 f0       	brcs	.+34     	; 0x113c <__fixunssfsi+0x28>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	98 f0       	brcs	.+38     	; 0x1144 <__fixunssfsi+0x30>
    111e:	b9 2f       	mov	r27, r25
    1120:	99 27       	eor	r25, r25
    1122:	b7 51       	subi	r27, 0x17	; 23
    1124:	b0 f0       	brcs	.+44     	; 0x1152 <__fixunssfsi+0x3e>
    1126:	e1 f0       	breq	.+56     	; 0x1160 <__fixunssfsi+0x4c>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	1a f0       	brmi	.+6      	; 0x1138 <__fixunssfsi+0x24>
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__fixunssfsi+0x14>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <__fixunssfsi+0x4c>
    1138:	b1 30       	cpi	r27, 0x01	; 1
    113a:	91 f0       	breq	.+36     	; 0x1160 <__fixunssfsi+0x4c>
    113c:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_zero>
    1140:	b1 e0       	ldi	r27, 0x01	; 1
    1142:	08 95       	ret
    1144:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_zero>
    1148:	67 2f       	mov	r22, r23
    114a:	78 2f       	mov	r23, r24
    114c:	88 27       	eor	r24, r24
    114e:	b8 5f       	subi	r27, 0xF8	; 248
    1150:	39 f0       	breq	.+14     	; 0x1160 <__fixunssfsi+0x4c>
    1152:	b9 3f       	cpi	r27, 0xF9	; 249
    1154:	cc f3       	brlt	.-14     	; 0x1148 <__fixunssfsi+0x34>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b3 95       	inc	r27
    115e:	d9 f7       	brne	.-10     	; 0x1156 <__fixunssfsi+0x42>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__fixunssfsi+0x5c>
    1162:	90 95       	com	r25
    1164:	80 95       	com	r24
    1166:	70 95       	com	r23
    1168:	61 95       	neg	r22
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	08 95       	ret

00001172 <__floatunsisf>:
    1172:	e8 94       	clt
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <__floatsisf+0x12>

00001176 <__floatsisf>:
    1176:	97 fb       	bst	r25, 7
    1178:	3e f4       	brtc	.+14     	; 0x1188 <__floatsisf+0x12>
    117a:	90 95       	com	r25
    117c:	80 95       	com	r24
    117e:	70 95       	com	r23
    1180:	61 95       	neg	r22
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	99 23       	and	r25, r25
    118a:	a9 f0       	breq	.+42     	; 0x11b6 <__floatsisf+0x40>
    118c:	f9 2f       	mov	r31, r25
    118e:	96 e9       	ldi	r25, 0x96	; 150
    1190:	bb 27       	eor	r27, r27
    1192:	93 95       	inc	r25
    1194:	f6 95       	lsr	r31
    1196:	87 95       	ror	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b7 95       	ror	r27
    119e:	f1 11       	cpse	r31, r1
    11a0:	f8 cf       	rjmp	.-16     	; 0x1192 <__floatsisf+0x1c>
    11a2:	fa f4       	brpl	.+62     	; 0x11e2 <__floatsisf+0x6c>
    11a4:	bb 0f       	add	r27, r27
    11a6:	11 f4       	brne	.+4      	; 0x11ac <__floatsisf+0x36>
    11a8:	60 ff       	sbrs	r22, 0
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <__floatsisf+0x6c>
    11ac:	6f 5f       	subi	r22, 0xFF	; 255
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	16 c0       	rjmp	.+44     	; 0x11e2 <__floatsisf+0x6c>
    11b6:	88 23       	and	r24, r24
    11b8:	11 f0       	breq	.+4      	; 0x11be <__floatsisf+0x48>
    11ba:	96 e9       	ldi	r25, 0x96	; 150
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <__floatsisf+0x6a>
    11be:	77 23       	and	r23, r23
    11c0:	21 f0       	breq	.+8      	; 0x11ca <__floatsisf+0x54>
    11c2:	9e e8       	ldi	r25, 0x8E	; 142
    11c4:	87 2f       	mov	r24, r23
    11c6:	76 2f       	mov	r23, r22
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <__floatsisf+0x5e>
    11ca:	66 23       	and	r22, r22
    11cc:	71 f0       	breq	.+28     	; 0x11ea <__floatsisf+0x74>
    11ce:	96 e8       	ldi	r25, 0x86	; 134
    11d0:	86 2f       	mov	r24, r22
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	2a f0       	brmi	.+10     	; 0x11e2 <__floatsisf+0x6c>
    11d8:	9a 95       	dec	r25
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	da f7       	brpl	.-10     	; 0x11d8 <__floatsisf+0x62>
    11e2:	88 0f       	add	r24, r24
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	97 f9       	bld	r25, 7
    11ea:	08 95       	ret

000011ec <__fp_inf>:
    11ec:	97 f9       	bld	r25, 7
    11ee:	9f 67       	ori	r25, 0x7F	; 127
    11f0:	80 e8       	ldi	r24, 0x80	; 128
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	08 95       	ret

000011f8 <__fp_nan>:
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	80 ec       	ldi	r24, 0xC0	; 192
    11fc:	08 95       	ret

000011fe <__fp_pscA>:
    11fe:	00 24       	eor	r0, r0
    1200:	0a 94       	dec	r0
    1202:	16 16       	cp	r1, r22
    1204:	17 06       	cpc	r1, r23
    1206:	18 06       	cpc	r1, r24
    1208:	09 06       	cpc	r0, r25
    120a:	08 95       	ret

0000120c <__fp_pscB>:
    120c:	00 24       	eor	r0, r0
    120e:	0a 94       	dec	r0
    1210:	12 16       	cp	r1, r18
    1212:	13 06       	cpc	r1, r19
    1214:	14 06       	cpc	r1, r20
    1216:	05 06       	cpc	r0, r21
    1218:	08 95       	ret

0000121a <__fp_round>:
    121a:	09 2e       	mov	r0, r25
    121c:	03 94       	inc	r0
    121e:	00 0c       	add	r0, r0
    1220:	11 f4       	brne	.+4      	; 0x1226 <__fp_round+0xc>
    1222:	88 23       	and	r24, r24
    1224:	52 f0       	brmi	.+20     	; 0x123a <__fp_round+0x20>
    1226:	bb 0f       	add	r27, r27
    1228:	40 f4       	brcc	.+16     	; 0x123a <__fp_round+0x20>
    122a:	bf 2b       	or	r27, r31
    122c:	11 f4       	brne	.+4      	; 0x1232 <__fp_round+0x18>
    122e:	60 ff       	sbrs	r22, 0
    1230:	04 c0       	rjmp	.+8      	; 0x123a <__fp_round+0x20>
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	08 95       	ret

0000123c <__fp_split3>:
    123c:	57 fd       	sbrc	r21, 7
    123e:	90 58       	subi	r25, 0x80	; 128
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	59 f0       	breq	.+22     	; 0x125c <__fp_splitA+0x10>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	71 f0       	breq	.+28     	; 0x1266 <__fp_splitA+0x1a>
    124a:	47 95       	ror	r20

0000124c <__fp_splitA>:
    124c:	88 0f       	add	r24, r24
    124e:	97 fb       	bst	r25, 7
    1250:	99 1f       	adc	r25, r25
    1252:	61 f0       	breq	.+24     	; 0x126c <__fp_splitA+0x20>
    1254:	9f 3f       	cpi	r25, 0xFF	; 255
    1256:	79 f0       	breq	.+30     	; 0x1276 <__fp_splitA+0x2a>
    1258:	87 95       	ror	r24
    125a:	08 95       	ret
    125c:	12 16       	cp	r1, r18
    125e:	13 06       	cpc	r1, r19
    1260:	14 06       	cpc	r1, r20
    1262:	55 1f       	adc	r21, r21
    1264:	f2 cf       	rjmp	.-28     	; 0x124a <__fp_split3+0xe>
    1266:	46 95       	lsr	r20
    1268:	f1 df       	rcall	.-30     	; 0x124c <__fp_splitA>
    126a:	08 c0       	rjmp	.+16     	; 0x127c <__fp_splitA+0x30>
    126c:	16 16       	cp	r1, r22
    126e:	17 06       	cpc	r1, r23
    1270:	18 06       	cpc	r1, r24
    1272:	99 1f       	adc	r25, r25
    1274:	f1 cf       	rjmp	.-30     	; 0x1258 <__fp_splitA+0xc>
    1276:	86 95       	lsr	r24
    1278:	71 05       	cpc	r23, r1
    127a:	61 05       	cpc	r22, r1
    127c:	08 94       	sec
    127e:	08 95       	ret

00001280 <__fp_zero>:
    1280:	e8 94       	clt

00001282 <__fp_szero>:
    1282:	bb 27       	eor	r27, r27
    1284:	66 27       	eor	r22, r22
    1286:	77 27       	eor	r23, r23
    1288:	cb 01       	movw	r24, r22
    128a:	97 f9       	bld	r25, 7
    128c:	08 95       	ret

0000128e <__mulsf3>:
    128e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3x>
    1292:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_round>
    1296:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_pscA>
    129a:	38 f0       	brcs	.+14     	; 0x12aa <__mulsf3+0x1c>
    129c:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_pscB>
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__mulsf3+0x1c>
    12a2:	95 23       	and	r25, r21
    12a4:	11 f0       	breq	.+4      	; 0x12aa <__mulsf3+0x1c>
    12a6:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    12aa:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_nan>
    12ae:	11 24       	eor	r1, r1
    12b0:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>

000012b4 <__mulsf3x>:
    12b4:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_split3>
    12b8:	70 f3       	brcs	.-36     	; 0x1296 <__mulsf3+0x8>

000012ba <__mulsf3_pse>:
    12ba:	95 9f       	mul	r25, r21
    12bc:	c1 f3       	breq	.-16     	; 0x12ae <__mulsf3+0x20>
    12be:	95 0f       	add	r25, r21
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	55 1f       	adc	r21, r21
    12c4:	62 9f       	mul	r22, r18
    12c6:	f0 01       	movw	r30, r0
    12c8:	72 9f       	mul	r23, r18
    12ca:	bb 27       	eor	r27, r27
    12cc:	f0 0d       	add	r31, r0
    12ce:	b1 1d       	adc	r27, r1
    12d0:	63 9f       	mul	r22, r19
    12d2:	aa 27       	eor	r26, r26
    12d4:	f0 0d       	add	r31, r0
    12d6:	b1 1d       	adc	r27, r1
    12d8:	aa 1f       	adc	r26, r26
    12da:	64 9f       	mul	r22, r20
    12dc:	66 27       	eor	r22, r22
    12de:	b0 0d       	add	r27, r0
    12e0:	a1 1d       	adc	r26, r1
    12e2:	66 1f       	adc	r22, r22
    12e4:	82 9f       	mul	r24, r18
    12e6:	22 27       	eor	r18, r18
    12e8:	b0 0d       	add	r27, r0
    12ea:	a1 1d       	adc	r26, r1
    12ec:	62 1f       	adc	r22, r18
    12ee:	73 9f       	mul	r23, r19
    12f0:	b0 0d       	add	r27, r0
    12f2:	a1 1d       	adc	r26, r1
    12f4:	62 1f       	adc	r22, r18
    12f6:	83 9f       	mul	r24, r19
    12f8:	a0 0d       	add	r26, r0
    12fa:	61 1d       	adc	r22, r1
    12fc:	22 1f       	adc	r18, r18
    12fe:	74 9f       	mul	r23, r20
    1300:	33 27       	eor	r19, r19
    1302:	a0 0d       	add	r26, r0
    1304:	61 1d       	adc	r22, r1
    1306:	23 1f       	adc	r18, r19
    1308:	84 9f       	mul	r24, r20
    130a:	60 0d       	add	r22, r0
    130c:	21 1d       	adc	r18, r1
    130e:	82 2f       	mov	r24, r18
    1310:	76 2f       	mov	r23, r22
    1312:	6a 2f       	mov	r22, r26
    1314:	11 24       	eor	r1, r1
    1316:	9f 57       	subi	r25, 0x7F	; 127
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	9a f0       	brmi	.+38     	; 0x1342 <__mulsf3_pse+0x88>
    131c:	f1 f0       	breq	.+60     	; 0x135a <__mulsf3_pse+0xa0>
    131e:	88 23       	and	r24, r24
    1320:	4a f0       	brmi	.+18     	; 0x1334 <__mulsf3_pse+0x7a>
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	bb 1f       	adc	r27, r27
    1328:	66 1f       	adc	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	91 50       	subi	r25, 0x01	; 1
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	a9 f7       	brne	.-22     	; 0x131e <__mulsf3_pse+0x64>
    1334:	9e 3f       	cpi	r25, 0xFE	; 254
    1336:	51 05       	cpc	r21, r1
    1338:	80 f0       	brcs	.+32     	; 0x135a <__mulsf3_pse+0xa0>
    133a:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    133e:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	e4 f3       	brlt	.-8      	; 0x133e <__mulsf3_pse+0x84>
    1346:	98 3e       	cpi	r25, 0xE8	; 232
    1348:	d4 f3       	brlt	.-12     	; 0x133e <__mulsf3_pse+0x84>
    134a:	86 95       	lsr	r24
    134c:	77 95       	ror	r23
    134e:	67 95       	ror	r22
    1350:	b7 95       	ror	r27
    1352:	f7 95       	ror	r31
    1354:	e7 95       	ror	r30
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	c1 f7       	brne	.-16     	; 0x134a <__mulsf3_pse+0x90>
    135a:	fe 2b       	or	r31, r30
    135c:	88 0f       	add	r24, r24
    135e:	91 1d       	adc	r25, r1
    1360:	96 95       	lsr	r25
    1362:	87 95       	ror	r24
    1364:	97 f9       	bld	r25, 7
    1366:	08 95       	ret

00001368 <__divmodhi4>:
    1368:	97 fb       	bst	r25, 7
    136a:	07 2e       	mov	r0, r23
    136c:	16 f4       	brtc	.+4      	; 0x1372 <__divmodhi4+0xa>
    136e:	00 94       	com	r0
    1370:	07 d0       	rcall	.+14     	; 0x1380 <__divmodhi4_neg1>
    1372:	77 fd       	sbrc	r23, 7
    1374:	09 d0       	rcall	.+18     	; 0x1388 <__divmodhi4_neg2>
    1376:	0e 94 ce 09 	call	0x139c	; 0x139c <__udivmodhi4>
    137a:	07 fc       	sbrc	r0, 7
    137c:	05 d0       	rcall	.+10     	; 0x1388 <__divmodhi4_neg2>
    137e:	3e f4       	brtc	.+14     	; 0x138e <__divmodhi4_exit>

00001380 <__divmodhi4_neg1>:
    1380:	90 95       	com	r25
    1382:	81 95       	neg	r24
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__divmodhi4_neg2>:
    1388:	70 95       	com	r23
    138a:	61 95       	neg	r22
    138c:	7f 4f       	sbci	r23, 0xFF	; 255

0000138e <__divmodhi4_exit>:
    138e:	08 95       	ret

00001390 <__tablejump2__>:
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	05 90       	lpm	r0, Z+
    1396:	f4 91       	lpm	r31, Z
    1398:	e0 2d       	mov	r30, r0
    139a:	09 94       	ijmp

0000139c <__udivmodhi4>:
    139c:	aa 1b       	sub	r26, r26
    139e:	bb 1b       	sub	r27, r27
    13a0:	51 e1       	ldi	r21, 0x11	; 17
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <__udivmodhi4_ep>

000013a4 <__udivmodhi4_loop>:
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	a6 17       	cp	r26, r22
    13aa:	b7 07       	cpc	r27, r23
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <__udivmodhi4_ep>
    13ae:	a6 1b       	sub	r26, r22
    13b0:	b7 0b       	sbc	r27, r23

000013b2 <__udivmodhi4_ep>:
    13b2:	88 1f       	adc	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	5a 95       	dec	r21
    13b8:	a9 f7       	brne	.-22     	; 0x13a4 <__udivmodhi4_loop>
    13ba:	80 95       	com	r24
    13bc:	90 95       	com	r25
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	08 95       	ret

000013c4 <_exit>:
    13c4:	f8 94       	cli

000013c6 <__stop_program>:
    13c6:	ff cf       	rjmp	.-2      	; 0x13c6 <__stop_program>
