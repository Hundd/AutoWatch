
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001844  000018d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800106  00800106  000018de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed0  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000776  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b1  00000000  00000000  000040fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00004ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f3  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d6b  00000000  00000000  00005aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00007816  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_21>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	73 09       	sbc	r23, r3
      6a:	7b 09       	sbc	r23, r11
      6c:	7f 09       	sbc	r23, r15
      6e:	85 09       	sbc	r24, r5
      70:	8a 09       	sbc	r24, r10
      72:	8f 09       	sbc	r24, r15
      74:	96 09       	sbc	r25, r6
      76:	9e 09       	sbc	r25, r14
      78:	a5 09       	sbc	r26, r5
      7a:	ad 09       	sbc	r26, r13
      7c:	bb 09       	sbc	r27, r11
      7e:	bb 09       	sbc	r27, r11
      80:	bb 09       	sbc	r27, r11
      82:	bb 09       	sbc	r27, r11
      84:	bb 09       	sbc	r27, r11
      86:	bb 09       	sbc	r27, r11
      88:	bb 09       	sbc	r27, r11
      8a:	bb 09       	sbc	r27, r11
      8c:	bb 09       	sbc	r27, r11
      8e:	bb 09       	sbc	r27, r11
      90:	bb 09       	sbc	r27, r11
      92:	bb 09       	sbc	r27, r11
      94:	bb 09       	sbc	r27, r11
      96:	bb 09       	sbc	r27, r11
      98:	bb 09       	sbc	r27, r11
      9a:	bb 09       	sbc	r27, r11
      9c:	bb 09       	sbc	r27, r11
      9e:	bb 09       	sbc	r27, r11
      a0:	bb 09       	sbc	r27, r11
      a2:	bb 09       	sbc	r27, r11
      a4:	bb 09       	sbc	r27, r11
      a6:	bb 09       	sbc	r27, r11
      a8:	bb 09       	sbc	r27, r11
      aa:	bb 09       	sbc	r27, r11
      ac:	bb 09       	sbc	r27, r11
      ae:	bb 09       	sbc	r27, r11
      b0:	bb 09       	sbc	r27, r11
      b2:	bb 09       	sbc	r27, r11
      b4:	bb 09       	sbc	r27, r11
      b6:	bb 09       	sbc	r27, r11
      b8:	bb 09       	sbc	r27, r11
      ba:	bb 09       	sbc	r27, r11
      bc:	bb 09       	sbc	r27, r11
      be:	bb 09       	sbc	r27, r11
      c0:	bb 09       	sbc	r27, r11
      c2:	b9 09       	sbc	r27, r9
      c4:	bb 09       	sbc	r27, r11
      c6:	bb 09       	sbc	r27, r11
      c8:	bb 09       	sbc	r27, r11
      ca:	bb 09       	sbc	r27, r11
      cc:	bb 09       	sbc	r27, r11
      ce:	bb 09       	sbc	r27, r11
      d0:	bb 09       	sbc	r27, r11
      d2:	bb 09       	sbc	r27, r11
      d4:	bb 09       	sbc	r27, r11
      d6:	bb 09       	sbc	r27, r11
      d8:	bb 09       	sbc	r27, r11
      da:	bb 09       	sbc	r27, r11
      dc:	bb 09       	sbc	r27, r11
      de:	bb 09       	sbc	r27, r11
      e0:	bb 09       	sbc	r27, r11
      e2:	bb 09       	sbc	r27, r11
      e4:	bb 09       	sbc	r27, r11
      e6:	bb 09       	sbc	r27, r11
      e8:	bb 09       	sbc	r27, r11
      ea:	bb 09       	sbc	r27, r11
      ec:	bb 09       	sbc	r27, r11
      ee:	bb 09       	sbc	r27, r11
      f0:	bb 09       	sbc	r27, r11
      f2:	bb 09       	sbc	r27, r11
      f4:	bb 09       	sbc	r27, r11
      f6:	bb 09       	sbc	r27, r11
      f8:	bb 09       	sbc	r27, r11
      fa:	bb 09       	sbc	r27, r11
      fc:	bb 09       	sbc	r27, r11
      fe:	bb 09       	sbc	r27, r11
     100:	bb 09       	sbc	r27, r11
     102:	bb 09       	sbc	r27, r11
     104:	bb 09       	sbc	r27, r11
     106:	bb 09       	sbc	r27, r11
     108:	bb 09       	sbc	r27, r11
     10a:	bb 09       	sbc	r27, r11
     10c:	bb 09       	sbc	r27, r11
     10e:	bb 09       	sbc	r27, r11
     110:	bb 09       	sbc	r27, r11
     112:	bb 09       	sbc	r27, r11
     114:	bb 09       	sbc	r27, r11
     116:	bb 09       	sbc	r27, r11
     118:	bb 09       	sbc	r27, r11
     11a:	bb 09       	sbc	r27, r11
     11c:	bb 09       	sbc	r27, r11
     11e:	bb 09       	sbc	r27, r11
     120:	bb 09       	sbc	r27, r11
     122:	bb 09       	sbc	r27, r11
     124:	bb 09       	sbc	r27, r11
     126:	bb 09       	sbc	r27, r11
     128:	bb 09       	sbc	r27, r11
     12a:	bb 09       	sbc	r27, r11
     12c:	bb 09       	sbc	r27, r11
     12e:	bb 09       	sbc	r27, r11
     130:	bb 09       	sbc	r27, r11
     132:	bb 09       	sbc	r27, r11
     134:	bb 09       	sbc	r27, r11
     136:	bb 09       	sbc	r27, r11
     138:	bb 09       	sbc	r27, r11
     13a:	bb 09       	sbc	r27, r11
     13c:	bb 09       	sbc	r27, r11
     13e:	bb 09       	sbc	r27, r11
     140:	bb 09       	sbc	r27, r11
     142:	bb 09       	sbc	r27, r11
     144:	bb 09       	sbc	r27, r11
     146:	bb 09       	sbc	r27, r11
     148:	bb 09       	sbc	r27, r11
     14a:	bb 09       	sbc	r27, r11
     14c:	bb 09       	sbc	r27, r11
     14e:	bb 09       	sbc	r27, r11
     150:	bb 09       	sbc	r27, r11
     152:	b4 09       	sbc	r27, r4

00000154 <__ctors_start>:
     154:	78 07       	cpc	r23, r24

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e4 e4       	ldi	r30, 0x44	; 68
     16a:	f8 e1       	ldi	r31, 0x18	; 24
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a6 30       	cpi	r26, 0x06	; 6
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	a6 e0       	ldi	r26, 0x06	; 6
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ab 31       	cpi	r26, 0x1B	; 27
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	cb ea       	ldi	r28, 0xAB	; 171
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__do_global_ctors+0x10>
     190:	21 97       	sbiw	r28, 0x01	; 1
     192:	fe 01       	movw	r30, r28
     194:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__tablejump2__>
     198:	ca 3a       	cpi	r28, 0xAA	; 170
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <__do_global_ctors+0x8>
     19e:	0e 94 36 07 	call	0xe6c	; 0xe6c <main>
     1a2:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_Z5resetPVhS0_h>:
		
    }
}
*/
void reset(volatile uint8_t *port,volatile uint8_t * ddr,uint8_t pin)
{
     1aa:	dc 01       	movw	r26, r24
     1ac:	fb 01       	movw	r30, r22
	*ddr|=(1<<pin);
     1ae:	80 81       	ld	r24, Z
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z5resetPVhS0_h+0x10>
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	4a 95       	dec	r20
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_Z5resetPVhS0_h+0xc>
     1be:	82 2b       	or	r24, r18
     1c0:	80 83       	st	Z, r24
	*port&=~(1<<pin);//pin off
     1c2:	9c 91       	ld	r25, X
     1c4:	32 2f       	mov	r19, r18
     1c6:	30 95       	com	r19
     1c8:	93 23       	and	r25, r19
     1ca:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1cc:	87 ee       	ldi	r24, 0xE7	; 231
     1ce:	93 e0       	ldi	r25, 0x03	; 3
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z5resetPVhS0_h+0x26>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z5resetPVhS0_h+0x2c>
     1d6:	00 00       	nop
	_delay_us(500);
	*port|=1<<pin;//pint on
     1d8:	8c 91       	ld	r24, X
     1da:	28 2b       	or	r18, r24
     1dc:	2c 93       	st	X, r18
	*ddr&=~(1<<pin);
     1de:	80 81       	ld	r24, Z
     1e0:	83 23       	and	r24, r19
     1e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e4:	8f ec       	ldi	r24, 0xCF	; 207
     1e6:	97 e0       	ldi	r25, 0x07	; 7
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <_Z5resetPVhS0_h+0x3e>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z5resetPVhS0_h+0x44>
     1ee:	00 00       	nop
     1f0:	08 95       	ret

000001f2 <_Z11SendToPort1PVhS0_h>:
	_delay_ms(1);
	
	
}
void SendToPort1(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     1f2:	dc 01       	movw	r26, r24
     1f4:	fb 01       	movw	r30, r22
     1f6:	f8 94       	cli
	*ddr|=(1<<pin);
     1f8:	90 81       	ld	r25, Z
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <_Z11SendToPort1PVhS0_h+0x12>
     200:	22 0f       	add	r18, r18
     202:	33 1f       	adc	r19, r19
     204:	4a 95       	dec	r20
     206:	e2 f7       	brpl	.-8      	; 0x200 <_Z11SendToPort1PVhS0_h+0xe>
     208:	92 2b       	or	r25, r18
     20a:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     20c:	9c 91       	ld	r25, X
     20e:	20 95       	com	r18
     210:	92 23       	and	r25, r18
     212:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	8a 95       	dec	r24
     218:	f1 f7       	brne	.-4      	; 0x216 <_Z11SendToPort1PVhS0_h+0x24>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z11SendToPort1PVhS0_h+0x2a>
	_delay_us(4);
	*ddr&=~(1<<pin);
     21c:	80 81       	ld	r24, Z
     21e:	28 23       	and	r18, r24
     220:	20 83       	st	Z, r18
     222:	8a ec       	ldi	r24, 0xCA	; 202
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <_Z11SendToPort1PVhS0_h+0x32>
     228:	00 c0       	rjmp	.+0      	; 0x22a <_Z11SendToPort1PVhS0_h+0x38>
     22a:	08 95       	ret

0000022c <_Z11SendToPort0PVhS0_h>:
	//*port|=1<<pin;//pint on
	//sei();
	_delay_us(76);
}
void SendToPort0(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     22c:	dc 01       	movw	r26, r24
     22e:	fb 01       	movw	r30, r22
     230:	f8 94       	cli
	*ddr|=(1<<pin);
     232:	90 81       	ld	r25, Z
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z11SendToPort0PVhS0_h+0x12>
     23a:	22 0f       	add	r18, r18
     23c:	33 1f       	adc	r19, r19
     23e:	4a 95       	dec	r20
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z11SendToPort0PVhS0_h+0xe>
     242:	92 2b       	or	r25, r18
     244:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     246:	9c 91       	ld	r25, X
     248:	20 95       	com	r18
     24a:	92 23       	and	r25, r18
     24c:	9c 93       	st	X, r25
     24e:	8a ea       	ldi	r24, 0xAA	; 170
     250:	8a 95       	dec	r24
     252:	f1 f7       	brne	.-4      	; 0x250 <_Z11SendToPort0PVhS0_h+0x24>
     254:	00 c0       	rjmp	.+0      	; 0x256 <_Z11SendToPort0PVhS0_h+0x2a>
	_delay_us(64);
	*ddr&=~(1<<pin);
     256:	80 81       	ld	r24, Z
     258:	28 23       	and	r18, r24
     25a:	20 83       	st	Z, r18
     25c:	8a e2       	ldi	r24, 0x2A	; 42
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <_Z11SendToPort0PVhS0_h+0x32>
     262:	00 c0       	rjmp	.+0      	; 0x264 <_Z11SendToPort0PVhS0_h+0x38>
     264:	08 95       	ret

00000266 <_Z14SendByteToPortPVhS0_hh>:
	_delay_us(16);
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	6c 01       	movw	r12, r24
     278:	7b 01       	movw	r14, r22
     27a:	04 2f       	mov	r16, r20
     27c:	12 2f       	mov	r17, r18
     27e:	c8 e0       	ldi	r28, 0x08	; 8
     280:	d0 e0       	ldi	r29, 0x00	; 0
		
		for (i=0;i<8;i++)
		{	if (byte&mask)
     282:	10 ff       	sbrs	r17, 0
     284:	06 c0       	rjmp	.+12     	; 0x292 <_Z14SendByteToPortPVhS0_hh+0x2c>
			SendToPort1(port,ddr,pin);
     286:	40 2f       	mov	r20, r16
     288:	b7 01       	movw	r22, r14
     28a:	c6 01       	movw	r24, r12
     28c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z11SendToPort1PVhS0_h>
     290:	05 c0       	rjmp	.+10     	; 0x29c <_Z14SendByteToPortPVhS0_hh+0x36>
			else SendToPort0(port,ddr,pin);
     292:	40 2f       	mov	r20, r16
     294:	b7 01       	movw	r22, r14
     296:	c6 01       	movw	r24, r12
     298:	0e 94 16 01 	call	0x22c	; 0x22c <_Z11SendToPort0PVhS0_h>
			byte>>=1;
     29c:	16 95       	lsr	r17
     29e:	21 97       	sbiw	r28, 0x01	; 1
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
		
		for (i=0;i<8;i++)
     2a0:	81 f7       	brne	.-32     	; 0x282 <_Z14SendByteToPortPVhS0_hh+0x1c>
		
		}
	
		

	}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	08 95       	ret

000002b4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
     2b4:	4f 92       	push	r4
     2b6:	5f 92       	push	r5
     2b8:	7f 92       	push	r7
     2ba:	8f 92       	push	r8
     2bc:	9f 92       	push	r9
     2be:	af 92       	push	r10
     2c0:	bf 92       	push	r11
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	db 01       	movw	r26, r22
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
     2d4:	f8 94       	cli
		for (i=0;i<number_of_bytes;i++)
     2d6:	ee 20       	and	r14, r14
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x28>
     2da:	52 c0       	rjmp	.+164    	; 0x380 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xcc>
		{	bytes[i]=0;
			for (j=0;j<8;j++)
			{
				*ddr|=(1<<pin);
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	02 2e       	mov	r0, r18
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x34>
     2e4:	66 0f       	add	r22, r22
     2e6:	77 1f       	adc	r23, r23
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x30>
     2ec:	b6 2e       	mov	r11, r22
				*port&=~(1<<pin);//pin off
     2ee:	f6 2e       	mov	r15, r22
     2f0:	f0 94       	com	r15
     2f2:	68 01       	movw	r12, r16
     2f4:	48 01       	movw	r8, r16
     2f6:	8e 0c       	add	r8, r14
     2f8:	91 1c       	adc	r9, r1
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     2fa:	e1 2c       	mov	r14, r1
     2fc:	a1 2c       	mov	r10, r1
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     2fe:	07 e0       	ldi	r16, 0x07	; 7
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	02 1b       	sub	r16, r18
     304:	11 09       	sbc	r17, r1
     306:	26 01       	movw	r4, r12
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
     308:	e6 01       	movw	r28, r12
     30a:	18 82       	st	Y, r1
			for (j=0;j<8;j++)
     30c:	ee 2d       	mov	r30, r14
     30e:	fa 2d       	mov	r31, r10
			{
				*ddr|=(1<<pin);
     310:	2c 91       	ld	r18, X
     312:	2b 29       	or	r18, r11
     314:	2c 93       	st	X, r18
				*port&=~(1<<pin);//pin off
     316:	ec 01       	movw	r28, r24
     318:	28 81       	ld	r18, Y
     31a:	2f 21       	and	r18, r15
     31c:	28 83       	st	Y, r18
     31e:	d5 e0       	ldi	r29, 0x05	; 5
     320:	da 95       	dec	r29
     322:	f1 f7       	brne	.-4      	; 0x320 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x6c>
     324:	00 00       	nop
				_delay_us(2);//4
				*ddr&=~(1<<pin);
     326:	2c 91       	ld	r18, X
     328:	2f 21       	and	r18, r15
     32a:	2c 93       	st	X, r18
     32c:	2a e2       	ldi	r18, 0x2A	; 42
     32e:	2a 95       	dec	r18
     330:	f1 f7       	brne	.-4      	; 0x32e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x7a>
     332:	00 c0       	rjmp	.+0      	; 0x334 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x80>
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     334:	ea 01       	movw	r28, r20
     336:	28 81       	ld	r18, Y
     338:	e2 01       	movw	r28, r4
     33a:	78 80       	ld	r7, Y
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	26 23       	and	r18, r22
     340:	37 23       	and	r19, r23
     342:	00 2e       	mov	r0, r16
     344:	02 c0       	rjmp	.+4      	; 0x34a <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x96>
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x92>
     34e:	27 29       	or	r18, r7
				if(j<7) bytes[i]>>=1;
     350:	e7 30       	cpi	r30, 0x07	; 7
     352:	f1 05       	cpc	r31, r1
     354:	14 f0       	brlt	.+4      	; 0x35a <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     356:	28 83       	st	Y, r18
     358:	05 c0       	rjmp	.+10     	; 0x364 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb0>
				if(j<7) bytes[i]>>=1;
     35a:	33 27       	eor	r19, r19
     35c:	35 95       	asr	r19
     35e:	27 95       	ror	r18
     360:	e2 01       	movw	r28, r4
     362:	28 83       	st	Y, r18
     364:	d5 e7       	ldi	r29, 0x75	; 117
     366:	da 95       	dec	r29
     368:	f1 f7       	brne	.-4      	; 0x366 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb2>
     36a:	00 00       	nop
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     36c:	31 96       	adiw	r30, 0x01	; 1
     36e:	e8 30       	cpi	r30, 0x08	; 8
     370:	f1 05       	cpc	r31, r1
     372:	71 f6       	brne	.-100    	; 0x310 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x5c>
     374:	ef ef       	ldi	r30, 0xFF	; 255
     376:	ce 1a       	sub	r12, r30
     378:	de 0a       	sbc	r13, r30
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
     37a:	c8 14       	cp	r12, r8
     37c:	d9 04       	cpc	r13, r9
     37e:	19 f6       	brne	.-122    	; 0x306 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
				if(j<7) bytes[i]>>=1;
				_delay_us(44);
			}			
		}
		sei();
     380:	78 94       	sei
	}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	bf 90       	pop	r11
     394:	af 90       	pop	r10
     396:	9f 90       	pop	r9
     398:	8f 90       	pop	r8
     39a:	7f 90       	pop	r7
     39c:	5f 90       	pop	r5
     39e:	4f 90       	pop	r4
     3a0:	08 95       	ret

000003a2 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
     3ae:	8b 01       	movw	r16, r22
     3b0:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     3b2:	42 2f       	mov	r20, r18
     3b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3b8:	2c ec       	ldi	r18, 0xCC	; 204
     3ba:	4f 2d       	mov	r20, r15
     3bc:	b8 01       	movw	r22, r16
     3be:	ce 01       	movw	r24, r28
     3c0:	0e 94 33 01 	call	0x266	; 0x266 <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3c4:	24 e4       	ldi	r18, 0x44	; 68
     3c6:	4f 2d       	mov	r20, r15
     3c8:	b8 01       	movw	r22, r16
     3ca:	ce 01       	movw	r24, r28
     3cc:	0e 94 33 01 	call	0x266	; 0x266 <_Z14SendByteToPortPVhS0_hh>
	}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	08 95       	ret

000003dc <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	ec 01       	movw	r28, r24
     3f2:	6b 01       	movw	r12, r22
     3f4:	5a 01       	movw	r10, r20
     3f6:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3f8:	42 2f       	mov	r20, r18
     3fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3fe:	2c ec       	ldi	r18, 0xCC	; 204
     400:	4f 2d       	mov	r20, r15
     402:	b6 01       	movw	r22, r12
     404:	ce 01       	movw	r24, r28
     406:	0e 94 33 01 	call	0x266	; 0x266 <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     40a:	2e eb       	ldi	r18, 0xBE	; 190
     40c:	4f 2d       	mov	r20, r15
     40e:	b6 01       	movw	r22, r12
     410:	ce 01       	movw	r24, r28
     412:	0e 94 33 01 	call	0x266	; 0x266 <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     416:	0f 2e       	mov	r0, r31
     418:	f9 e0       	ldi	r31, 0x09	; 9
     41a:	ef 2e       	mov	r14, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	2f 2d       	mov	r18, r15
     420:	a5 01       	movw	r20, r10
     422:	b6 01       	movw	r22, r12
     424:	ce 01       	movw	r24, r28
     426:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	08 95       	ret

00000440 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
		AdcClass::Data = ADC;
     44e:	80 91 78 00 	lds	r24, 0x0078
     452:	90 91 79 00 	lds	r25, 0x0079
     456:	90 93 19 01 	sts	0x0119, r25
     45a:	80 93 18 01 	sts	0x0118, r24
		AdcClass::DataReady = true;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 1a 01 	sts	0x011A, r24
     464:	8a e1       	ldi	r24, 0x1A	; 26
     466:	8a 95       	dec	r24
     468:	f1 f7       	brne	.-4      	; 0x466 <__vector_21+0x26>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_16>:
		}

    }
}

ISR(TIMER0_OVF_vect){
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
	static uint8_t iov=0;
	static uint8_t opacityDelay = 0;
	ClrScr();
     49c:	0e 94 47 09 	call	0x128e	; 0x128e <_Z6ClrScrv>
	if (opacityDelay == opacity) {		
     4a0:	80 91 04 01 	lds	r24, 0x0104
     4a4:	20 91 0a 01 	lds	r18, 0x010A
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	08 2e       	mov	r0, r24
     4ac:	00 0c       	add	r0, r0
     4ae:	99 0b       	sbc	r25, r25
     4b0:	28 17       	cp	r18, r24
     4b2:	39 07       	cpc	r19, r25
     4b4:	f1 f4       	brne	.+60     	; 0x4f2 <__vector_16+0x78>
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
     4b6:	20 91 17 01 	lds	r18, 0x0117
     4ba:	90 91 09 01 	lds	r25, 0x0109
     4be:	e9 2f       	mov	r30, r25
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ed 5e       	subi	r30, 0xED	; 237
     4c4:	fe 4f       	sbci	r31, 0xFE	; 254
     4c6:	80 81       	ld	r24, Z
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	29 13       	cpse	r18, r25
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	0e 94 60 09 	call	0x12c0	; 0x12c0 <_Z11Display7seghb>
		NextDigit(4-iov);
     4d2:	90 91 09 01 	lds	r25, 0x0109
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	89 1b       	sub	r24, r25
     4da:	0e 94 c0 09 	call	0x1380	; 0x1380 <_Z9NextDigith>
		iov += 1;
     4de:	80 91 09 01 	lds	r24, 0x0109
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
		if(iov > 3) iov=0;
     4e4:	84 30       	cpi	r24, 0x04	; 4
     4e6:	18 f4       	brcc	.+6      	; 0x4ee <__vector_16+0x74>
	static uint8_t opacityDelay = 0;
	ClrScr();
	if (opacityDelay == opacity) {		
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
		NextDigit(4-iov);
		iov += 1;
     4e8:	80 93 09 01 	sts	0x0109, r24
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__vector_16+0x78>
		if(iov > 3) iov=0;
     4ee:	10 92 09 01 	sts	0x0109, r1
	}
	opacityDelay = opacityDelay < opacity ? opacityDelay + 1 : 0;
     4f2:	80 91 0a 01 	lds	r24, 0x010A
     4f6:	20 91 04 01 	lds	r18, 0x0104
     4fa:	48 2f       	mov	r20, r24
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	02 2e       	mov	r0, r18
     500:	00 0c       	add	r0, r0
     502:	33 0b       	sbc	r19, r19
     504:	42 17       	cp	r20, r18
     506:	53 07       	cpc	r21, r19
     508:	14 f4       	brge	.+4      	; 0x50e <__vector_16+0x94>
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	01 c0       	rjmp	.+2      	; 0x510 <__vector_16+0x96>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	80 93 0a 01 	sts	0x010A, r24
	
}
     514:	ff 91       	pop	r31
     516:	ef 91       	pop	r30
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	7f 91       	pop	r23
     522:	6f 91       	pop	r22
     524:	5f 91       	pop	r21
     526:	4f 91       	pop	r20
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <_Z21EnableTimer0Interruptv>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
     536:	ee e6       	ldi	r30, 0x6E	; 110
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	81 60       	ori	r24, 0x01	; 1
     53e:	80 83       	st	Z, r24
	TCCR0B = 2;//Prescaler
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	85 bd       	out	0x25, r24	; 37
     544:	08 95       	ret

00000546 <_Z10keyCheckerv>:
*PORTD4 SETUP
*/	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	//DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
	//PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
	uint8_t keyState = PIND;
     546:	89 b1       	in	r24, 0x09	; 9
	 keyState = (~keyState >> 3) & 3;
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	80 95       	com	r24
     54c:	90 95       	com	r25
     54e:	95 95       	asr	r25
     550:	87 95       	ror	r24
     552:	95 95       	asr	r25
     554:	87 95       	ror	r24
     556:	95 95       	asr	r25
     558:	87 95       	ror	r24
     55a:	83 70       	andi	r24, 0x03	; 3
	if (keyState == keyStatePrevious && keyState) {
     55c:	90 91 08 01 	lds	r25, 0x0108
     560:	89 13       	cpse	r24, r25
     562:	22 c0       	rjmp	.+68     	; 0x5a8 <_Z10keyCheckerv+0x62>
     564:	88 23       	and	r24, r24
     566:	01 f1       	breq	.+64     	; 0x5a8 <_Z10keyCheckerv+0x62>
		if (times < 1500) {
     568:	20 91 06 01 	lds	r18, 0x0106
     56c:	30 91 07 01 	lds	r19, 0x0107
     570:	2c 3d       	cpi	r18, 0xDC	; 220
     572:	95 e0       	ldi	r25, 0x05	; 5
     574:	39 07       	cpc	r19, r25
     576:	60 f4       	brcc	.+24     	; 0x590 <_Z10keyCheckerv+0x4a>
			times += 1;
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	30 93 07 01 	sts	0x0107, r19
     580:	20 93 06 01 	sts	0x0106, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     584:	ef ec       	ldi	r30, 0xCF	; 207
     586:	f7 e0       	ldi	r31, 0x07	; 7
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <_Z10keyCheckerv+0x42>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <_Z10keyCheckerv+0x48>
     58e:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10) {
     590:	20 91 06 01 	lds	r18, 0x0106
     594:	30 91 07 01 	lds	r19, 0x0107
     598:	2a 30       	cpi	r18, 0x0A	; 10
     59a:	31 05       	cpc	r19, r1
     59c:	71 f0       	breq	.+28     	; 0x5ba <_Z10keyCheckerv+0x74>
			return keyState;
		}
		if (times == 1000) {
     59e:	28 3e       	cpi	r18, 0xE8	; 232
     5a0:	33 40       	sbci	r19, 0x03	; 3
     5a2:	51 f0       	breq	.+20     	; 0x5b8 <_Z10keyCheckerv+0x72>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	08 95       	ret
		if (times == 1000) {
			return 3;
		}
	}
	else {
		keyStatePrevious = keyState;
     5a8:	80 93 08 01 	sts	0x0108, r24
		times = 0;
     5ac:	10 92 07 01 	sts	0x0107, r1
     5b0:	10 92 06 01 	sts	0x0106, r1
	}

	return 0;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	08 95       	ret
		}
		if (times == 10) {
			return keyState;
		}
		if (times == 1000) {
			return 3;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
}
     5ba:	08 95       	ret

000005bc <_Z6dsModev>:
		if(opacity < 0) opacity = 0;
	}
	
}

uint8_t dsMode() {
     5bc:	2f 92       	push	r2
     5be:	3f 92       	push	r3
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	29 97       	sbiw	r28, 0x09	; 9
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     5f0:	e3 e1       	ldi	r30, 0x13	; 19
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     5f8:	8d e2       	ldi	r24, 0x2D	; 45
     5fa:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     5fc:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     5fe:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     600:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     602:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     604:	e1 2c       	mov	r14, r1
     606:	f1 2c       	mov	r15, r1
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     608:	31 2c       	mov	r3, r1
     60a:	41 2c       	mov	r4, r1
			else {
				screen_arr[3] = -1;
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     60c:	6f 01       	movw	r12, r30
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
     60e:	0f 2e       	mov	r0, r31
     610:	fa e0       	ldi	r31, 0x0A	; 10
     612:	af 2e       	mov	r10, r31
     614:	b1 2c       	mov	r11, r1
     616:	f0 2d       	mov	r31, r0
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     618:	22 24       	eor	r2, r2
     61a:	2a 94       	dec	r2
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
					
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
     61c:	0f 2e       	mov	r0, r31
     61e:	f4 e6       	ldi	r31, 0x64	; 100
     620:	8f 2e       	mov	r8, r31
     622:	91 2c       	mov	r9, r1
     624:	f0 2d       	mov	r31, r0
					
					
			if(temper < 0) {
				screen_arr[3] = '-';
				temper *= -1;
				temper += 1;
     626:	66 24       	eor	r6, r6
     628:	63 94       	inc	r6
     62a:	71 2c       	mov	r7, r1
     62c:	02 c0       	rjmp	.+4      	; 0x632 <_Z6dsModev+0x76>
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     62e:	e3 2c       	mov	r14, r3
     630:	f4 2c       	mov	r15, r4
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while(true){
		if(inner_counter == 0)
     632:	e1 14       	cp	r14, r1
     634:	f1 04       	cpc	r15, r1
     636:	81 f4       	brne	.+32     	; 0x658 <_Z6dsModev+0x9c>
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
     638:	22 e0       	ldi	r18, 0x02	; 2
     63a:	49 e2       	ldi	r20, 0x29	; 41
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6a e2       	ldi	r22, 0x2A	; 42
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	8b e2       	ldi	r24, 0x2B	; 43
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     64a:	78 94       	sei
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     64c:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	09 f0       	breq	.+2      	; 0x656 <_Z6dsModev+0x9a>
     654:	8c c0       	rjmp	.+280    	; 0x76e <_Z6dsModev+0x1b2>
     656:	7e c0       	rjmp	.+252    	; 0x754 <_Z6dsModev+0x198>
		if(inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
			sei();
		}
		if(inner_counter == 1000)
     658:	88 ee       	ldi	r24, 0xE8	; 232
     65a:	e8 16       	cp	r14, r24
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	f8 06       	cpc	r15, r24
     660:	09 f0       	breq	.+2      	; 0x664 <_Z6dsModev+0xa8>
     662:	5e c0       	rjmp	.+188    	; 0x720 <_Z6dsModev+0x164>
		{
			ReadTemperatureArr(&PORTD,&DDRD,&PIND,PIND2,temperatureArr);
     664:	8e 01       	movw	r16, r28
     666:	0f 5f       	subi	r16, 0xFF	; 255
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	49 e2       	ldi	r20, 0x29	; 41
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	6a e2       	ldi	r22, 0x2A	; 42
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	8b e2       	ldi	r24, 0x2B	; 43
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     67c:	2a 81       	ldd	r18, Y+2	; 0x02
     67e:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     680:	32 2f       	mov	r19, r18
     682:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	28 2b       	or	r18, r24
					
					
			if(temper < 0) {
     688:	33 23       	and	r19, r19
     68a:	44 f4       	brge	.+16     	; 0x69c <_Z6dsModev+0xe0>
				screen_arr[3] = '-';
     68c:	8d e2       	ldi	r24, 0x2D	; 45
     68e:	f6 01       	movw	r30, r12
     690:	83 83       	std	Z+3, r24	; 0x03
				temper *= -1;
				temper += 1;
     692:	f3 01       	movw	r30, r6
     694:	e2 1b       	sub	r30, r18
     696:	f3 0b       	sbc	r31, r19
     698:	9f 01       	movw	r18, r30
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <_Z6dsModev+0xe4>
			}
			else {
				screen_arr[3] = -1;
     69c:	f6 01       	movw	r30, r12
     69e:	23 82       	std	Z+3, r2	; 0x03
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     6a0:	c9 01       	movw	r24, r18
     6a2:	8f 70       	andi	r24, 0x0F	; 15
     6a4:	99 27       	eor	r25, r25
     6a6:	ac 01       	movw	r20, r24
     6a8:	44 0f       	add	r20, r20
     6aa:	55 1f       	adc	r21, r21
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	84 0f       	add	r24, r20
     6ba:	95 1f       	adc	r25, r21
     6bc:	95 95       	asr	r25
     6be:	87 95       	ror	r24
     6c0:	95 95       	asr	r25
     6c2:	87 95       	ror	r24
     6c4:	95 95       	asr	r25
     6c6:	87 95       	ror	r24
     6c8:	95 95       	asr	r25
     6ca:	87 95       	ror	r24
     6cc:	f6 01       	movw	r30, r12
     6ce:	80 83       	st	Z, r24
					
			temper>>=4;
     6d0:	35 95       	asr	r19
     6d2:	27 95       	ror	r18
     6d4:	35 95       	asr	r19
     6d6:	27 95       	ror	r18
     6d8:	35 95       	asr	r19
     6da:	27 95       	ror	r18
     6dc:	35 95       	asr	r19
     6de:	27 95       	ror	r18
			if(temper >= 100) {
     6e0:	24 36       	cpi	r18, 0x64	; 100
     6e2:	31 05       	cpc	r19, r1
     6e4:	3c f0       	brlt	.+14     	; 0x6f4 <_Z6dsModev+0x138>
				screen_arr[3] = temper/100;
     6e6:	c9 01       	movw	r24, r18
     6e8:	b4 01       	movw	r22, r8
     6ea:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__divmodhi4>
     6ee:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     6f0:	28 2f       	mov	r18, r24
     6f2:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     6f4:	c9 01       	movw	r24, r18
     6f6:	09 96       	adiw	r24, 0x09	; 9
     6f8:	43 97       	sbiw	r24, 0x13	; 19
     6fa:	28 f0       	brcs	.+10     	; 0x706 <_Z6dsModev+0x14a>
     6fc:	c9 01       	movw	r24, r18
     6fe:	b5 01       	movw	r22, r10
     700:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__divmodhi4>
     704:	01 c0       	rjmp	.+2      	; 0x708 <_Z6dsModev+0x14c>
     706:	62 2d       	mov	r22, r2
     708:	f6 01       	movw	r30, r12
     70a:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper%10;
     70c:	c9 01       	movw	r24, r18
     70e:	b5 01       	movw	r22, r10
     710:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__divmodhi4>
     714:	81 83       	std	Z+1, r24	; 0x01
		}


		uint8_t key = keyChecker();
     716:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	09 f5       	brne	.+66     	; 0x760 <_Z6dsModev+0x1a4>
     71e:	1c c0       	rjmp	.+56     	; 0x758 <_Z6dsModev+0x19c>
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     720:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	d1 f0       	breq	.+52     	; 0x75c <_Z6dsModev+0x1a0>
     728:	8f ec       	ldi	r24, 0xCF	; 207
     72a:	97 e0       	ldi	r25, 0x07	; 7
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <_Z6dsModev+0x170>
     730:	00 c0       	rjmp	.+0      	; 0x732 <_Z6dsModev+0x176>
     732:	00 00       	nop
			//if (key == 2) return 3;

		}
		_delay_ms(1);
		if(inner_counter <=1000)
     734:	99 ee       	ldi	r25, 0xE9	; 233
     736:	e9 16       	cp	r14, r25
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	f9 06       	cpc	r15, r25
     73c:	20 f4       	brcc	.+8      	; 0x746 <_Z6dsModev+0x18a>
		inner_counter +=1;
     73e:	ef ef       	ldi	r30, 0xFF	; 255
     740:	ee 1a       	sub	r14, r30
     742:	fe 0a       	sbc	r15, r30
     744:	76 cf       	rjmp	.-276    	; 0x632 <_Z6dsModev+0x76>
		else {
			inner_counter =0;
			exit_counter +=1;
     746:	53 94       	inc	r5
			if(exit_counter>7) return 0;
     748:	f7 e0       	ldi	r31, 0x07	; 7
     74a:	f5 15       	cp	r31, r5
     74c:	08 f0       	brcs	.+2      	; 0x750 <_Z6dsModev+0x194>
     74e:	6f cf       	rjmp	.-290    	; 0x62e <_Z6dsModev+0x72>
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	14 c0       	rjmp	.+40     	; 0x77c <_Z6dsModev+0x1c0>
		}


		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 2;
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	12 c0       	rjmp	.+36     	; 0x77c <_Z6dsModev+0x1c0>
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	10 c0       	rjmp	.+32     	; 0x77c <_Z6dsModev+0x1c0>
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	0e c0       	rjmp	.+28     	; 0x77c <_Z6dsModev+0x1c0>
     760:	8f ec       	ldi	r24, 0xCF	; 207
     762:	97 e0       	ldi	r25, 0x07	; 7
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <_Z6dsModev+0x1a8>
     768:	00 c0       	rjmp	.+0      	; 0x76a <_Z6dsModev+0x1ae>
     76a:	00 00       	nop
     76c:	e8 cf       	rjmp	.-48     	; 0x73e <_Z6dsModev+0x182>
     76e:	ef ec       	ldi	r30, 0xCF	; 207
     770:	f7 e0       	ldi	r31, 0x07	; 7
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <_Z6dsModev+0x1b6>
     776:	00 c0       	rjmp	.+0      	; 0x778 <_Z6dsModev+0x1bc>
     778:	00 00       	nop
     77a:	e1 cf       	rjmp	.-62     	; 0x73e <_Z6dsModev+0x182>
			inner_counter =0;
			exit_counter +=1;
			if(exit_counter>7) return 0;
		}
	}
}
     77c:	29 96       	adiw	r28, 0x09	; 9
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	7f 90       	pop	r7
     7a2:	6f 90       	pop	r6
     7a4:	5f 90       	pop	r5
     7a6:	4f 90       	pop	r4
     7a8:	3f 90       	pop	r3
     7aa:	2f 90       	pop	r2
     7ac:	08 95       	ret

000007ae <_Z7acbModev>:

uint8_t acbMode() {
     7ae:	3f 92       	push	r3
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
		screen_arr[4] = 1;
     7d0:	e3 e1       	ldi	r30, 0x13	; 19
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	84 83       	std	Z+4, r24	; 0x04
		screen_arr[3] = 'u';
     7d8:	85 e7       	ldi	r24, 0x75	; 117
     7da:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[2] = -1;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = -1;
     7e0:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[0] = -1;
     7e2:	80 83       	st	Z, r24
		sei();
     7e4:	78 94       	sei
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     7e6:	ec e7       	ldi	r30, 0x7C	; 124
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     7f0:	80 81       	ld	r24, Z
     7f2:	80 7f       	andi	r24, 0xF0	; 240
     7f4:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     7f6:	80 81       	ld	r24, Z
     7f8:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     7fa:	ea e7       	ldi	r30, 0x7A	; 122
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	80 64       	ori	r24, 0x40	; 64
     802:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     804:	80 91 1a 01 	lds	r24, 0x011A
     808:	88 23       	and	r24, r24
     80a:	e1 f3       	breq	.-8      	; 0x804 <_Z7acbModev+0x56>
		Voltage = CalculateVoltage(Data);
     80c:	60 91 18 01 	lds	r22, 0x0118
     810:	70 91 19 01 	lds	r23, 0x0119
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatunsisf>
     81c:	2a ea       	ldi	r18, 0xAA	; 170
     81e:	31 ef       	ldi	r19, 0xF1	; 241
     820:	44 e9       	ldi	r20, 0x94	; 148
     822:	51 e4       	ldi	r21, 0x41	; 65
     824:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     82c:	60 93 0f 01 	sts	0x010F, r22
     830:	70 93 10 01 	sts	0x0110, r23
     834:	80 93 11 01 	sts	0x0111, r24
     838:	90 93 12 01 	sts	0x0112, r25
		DataReady = false;
     83c:	10 92 1a 01 	sts	0x011A, r1
		uint16_t exitCouter = 0;
		adcOb.MesureVoltage(PORTC0);
		screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     840:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
     844:	cd ec       	ldi	r28, 0xCD	; 205
     846:	6c 9f       	mul	r22, r28
     848:	81 2d       	mov	r24, r1
     84a:	11 24       	eor	r1, r1
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	03 e1       	ldi	r16, 0x13	; 19
     854:	11 e0       	ldi	r17, 0x01	; 1
     856:	f8 01       	movw	r30, r16
     858:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     85a:	88 0f       	add	r24, r24
     85c:	28 2f       	mov	r18, r24
     85e:	22 0f       	add	r18, r18
     860:	22 0f       	add	r18, r18
     862:	82 0f       	add	r24, r18
     864:	96 2f       	mov	r25, r22
     866:	98 1b       	sub	r25, r24
     868:	91 83       	std	Z+1, r25	; 0x01
		screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     87a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
     87e:	6c 9f       	mul	r22, r28
     880:	81 2d       	mov	r24, r1
     882:	11 24       	eor	r1, r1
     884:	86 95       	lsr	r24
     886:	86 95       	lsr	r24
     888:	86 95       	lsr	r24
     88a:	88 0f       	add	r24, r24
     88c:	98 2f       	mov	r25, r24
     88e:	99 0f       	add	r25, r25
     890:	99 0f       	add	r25, r25
     892:	89 0f       	add	r24, r25
     894:	68 1b       	sub	r22, r24
     896:	f8 01       	movw	r30, r16
     898:	60 83       	st	Z, r22
		screen_arr[3] = 'u';
		screen_arr[2] = -1;
		screen_arr[1] = -1;
		screen_arr[0] = -1;
		sei();
		uint16_t exitCouter = 0;
     89a:	c0 e0       	ldi	r28, 0x00	; 0
     89c:	d0 e0       	ldi	r29, 0x00	; 0
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
			if(exitCouter % 1000) {
     89e:	0f 2e       	mov	r0, r31
     8a0:	f8 ee       	ldi	r31, 0xE8	; 232
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f3 e0       	ldi	r31, 0x03	; 3
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     8aa:	0c e7       	ldi	r16, 0x7C	; 124
     8ac:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     8ae:	0f 2e       	mov	r0, r31
     8b0:	fa e7       	ldi	r31, 0x7A	; 122
     8b2:	af 2e       	mov	r10, r31
     8b4:	b1 2c       	mov	r11, r1
     8b6:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     8b8:	0f 2e       	mov	r0, r31
     8ba:	fb e0       	ldi	r31, 0x0B	; 11
     8bc:	8f 2e       	mov	r8, r31
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	9f 2e       	mov	r9, r31
     8c2:	f0 2d       	mov	r31, r0
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     8c4:	0f 2e       	mov	r0, r31
     8c6:	fd ec       	ldi	r31, 0xCD	; 205
     8c8:	3f 2e       	mov	r3, r31
     8ca:	f0 2d       	mov	r31, r0
     8cc:	6f 01       	movw	r12, r30
		while(true){
			
			


			uint8_t key = keyChecker();
     8ce:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
			if(key) {
				if (key == 1) return 0;
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <_Z7acbModev+0x12a>
     8d6:	79 c0       	rjmp	.+242    	; 0x9ca <__stack+0xcb>
     8d8:	8f ec       	ldi	r24, 0xCF	; 207
     8da:	97 e0       	ldi	r25, 0x07	; 7
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <_Z7acbModev+0x12e>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <_Z7acbModev+0x134>
     8e2:	00 00       	nop
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
     8e4:	21 96       	adiw	r28, 0x01	; 1
			if(exitCouter % 1000) {
     8e6:	9e 01       	movw	r18, r28
     8e8:	36 95       	lsr	r19
     8ea:	27 95       	ror	r18
     8ec:	36 95       	lsr	r19
     8ee:	27 95       	ror	r18
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	a5 ec       	ldi	r26, 0xC5	; 197
     8f6:	b0 e2       	ldi	r27, 0x20	; 32
     8f8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__umulhisi3>
     8fc:	92 95       	swap	r25
     8fe:	82 95       	swap	r24
     900:	8f 70       	andi	r24, 0x0F	; 15
     902:	89 27       	eor	r24, r25
     904:	9f 70       	andi	r25, 0x0F	; 15
     906:	89 27       	eor	r24, r25
     908:	8e 9d       	mul	r24, r14
     90a:	90 01       	movw	r18, r0
     90c:	8f 9d       	mul	r24, r15
     90e:	30 0d       	add	r19, r0
     910:	9e 9d       	mul	r25, r14
     912:	30 0d       	add	r19, r0
     914:	11 24       	eor	r1, r1
     916:	c2 17       	cp	r28, r18
     918:	d3 07       	cpc	r29, r19
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
     91c:	51 c0       	rjmp	.+162    	; 0x9c0 <__stack+0xc1>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     91e:	f8 01       	movw	r30, r16
     920:	80 81       	ld	r24, Z
     922:	8f 70       	andi	r24, 0x0F	; 15
     924:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     926:	80 81       	ld	r24, Z
     928:	80 7f       	andi	r24, 0xF0	; 240
     92a:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     92c:	80 81       	ld	r24, Z
     92e:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     930:	f5 01       	movw	r30, r10
     932:	80 81       	ld	r24, Z
     934:	80 64       	ori	r24, 0x40	; 64
     936:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     938:	80 91 1a 01 	lds	r24, 0x011A
     93c:	88 23       	and	r24, r24
     93e:	e1 f3       	breq	.-8      	; 0x938 <__stack+0x39>
		Voltage = CalculateVoltage(Data);
     940:	60 91 18 01 	lds	r22, 0x0118
     944:	70 91 19 01 	lds	r23, 0x0119
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatunsisf>
     950:	2a ea       	ldi	r18, 0xAA	; 170
     952:	31 ef       	ldi	r19, 0xF1	; 241
     954:	44 e9       	ldi	r20, 0x94	; 148
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
     95c:	2b 01       	movw	r4, r22
     95e:	3c 01       	movw	r6, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     960:	f4 01       	movw	r30, r8
     962:	64 83       	std	Z+4, r22	; 0x04
     964:	75 83       	std	Z+5, r23	; 0x05
     966:	86 83       	std	Z+6, r24	; 0x06
     968:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     96a:	10 92 1a 01 	sts	0x011A, r1
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     96e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
     972:	63 9d       	mul	r22, r3
     974:	81 2d       	mov	r24, r1
     976:	11 24       	eor	r1, r1
     978:	86 95       	lsr	r24
     97a:	86 95       	lsr	r24
     97c:	86 95       	lsr	r24
     97e:	f6 01       	movw	r30, r12
     980:	82 83       	std	Z+2, r24	; 0x02
				screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     982:	88 0f       	add	r24, r24
     984:	98 2f       	mov	r25, r24
     986:	99 0f       	add	r25, r25
     988:	99 0f       	add	r25, r25
     98a:	89 0f       	add	r24, r25
     98c:	68 1b       	sub	r22, r24
     98e:	61 83       	std	Z+1, r22	; 0x01
				screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e2       	ldi	r20, 0x20	; 32
     996:	51 e4       	ldi	r21, 0x41	; 65
     998:	c3 01       	movw	r24, r6
     99a:	b2 01       	movw	r22, r4
     99c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     9a0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
     9a4:	63 9d       	mul	r22, r3
     9a6:	81 2d       	mov	r24, r1
     9a8:	11 24       	eor	r1, r1
     9aa:	86 95       	lsr	r24
     9ac:	86 95       	lsr	r24
     9ae:	86 95       	lsr	r24
     9b0:	88 0f       	add	r24, r24
     9b2:	98 2f       	mov	r25, r24
     9b4:	99 0f       	add	r25, r25
     9b6:	99 0f       	add	r25, r25
     9b8:	89 0f       	add	r24, r25
     9ba:	68 1b       	sub	r22, r24
     9bc:	f6 01       	movw	r30, r12
     9be:	60 83       	st	Z, r22
			}
			if(exitCouter > 7000) return 0;
     9c0:	c9 35       	cpi	r28, 0x59	; 89
     9c2:	fb e1       	ldi	r31, 0x1B	; 27
     9c4:	df 07       	cpc	r29, r31
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	82 cf       	rjmp	.-252    	; 0x8ce <_Z7acbModev+0x120>
		}
}
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	9f 90       	pop	r9
     9e2:	8f 90       	pop	r8
     9e4:	7f 90       	pop	r7
     9e6:	6f 90       	pop	r6
     9e8:	5f 90       	pop	r5
     9ea:	4f 90       	pop	r4
     9ec:	3f 90       	pop	r3
     9ee:	08 95       	ret

000009f0 <_Z12setupMinutesv>:

uint8_t setupMinutes () {
     9f0:	9f 92       	push	r9
     9f2:	af 92       	push	r10
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
     a06:	e3 e1       	ldi	r30, 0x13	; 19
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	90 81       	ld	r25, Z
     a0c:	81 81       	ldd	r24, Z+1	; 0x01
     a0e:	88 0f       	add	r24, r24
     a10:	18 2f       	mov	r17, r24
     a12:	11 0f       	add	r17, r17
     a14:	11 0f       	add	r17, r17
     a16:	81 0f       	add	r24, r17
     a18:	18 2f       	mov	r17, r24
     a1a:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     a1c:	c0 e0       	ldi	r28, 0x00	; 0
     a1e:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				minutes += 1;
				minutes %= 60;
     a20:	0f 2e       	mov	r0, r31
     a22:	f9 e8       	ldi	r31, 0x89	; 137
     a24:	9f 2e       	mov	r9, r31
     a26:	f0 2d       	mov	r31, r0
     a28:	0f 2e       	mov	r0, r31
     a2a:	fc e3       	ldi	r31, 0x3C	; 60
     a2c:	af 2e       	mov	r10, r31
     a2e:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
			screen_arr [0] = minutes % 10;
		}
		else {
			screen_arr [1] = -1;
     a30:	7f 01       	movw	r14, r30
     a32:	0f ef       	ldi	r16, 0xFF	; 255
			return 4;
			}

		}
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
     a34:	0f 2e       	mov	r0, r31
     a36:	fd ec       	ldi	r31, 0xCD	; 205
     a38:	bf 2e       	mov	r11, r31
     a3a:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     a3c:	c1 2c       	mov	r12, r1
     a3e:	d1 2c       	mov	r13, r1

uint8_t setupMinutes () {
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     a40:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
     a44:	88 23       	and	r24, r24
     a46:	81 f0       	breq	.+32     	; 0xa68 <_Z12setupMinutesv+0x78>
			if (key == 1) {
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	61 f4       	brne	.+24     	; 0xa64 <_Z12setupMinutesv+0x74>
				minutes += 1;
     a4c:	81 0f       	add	r24, r17
				minutes %= 60;
     a4e:	89 9d       	mul	r24, r9
     a50:	11 2d       	mov	r17, r1
     a52:	11 24       	eor	r1, r1
     a54:	12 95       	swap	r17
     a56:	16 95       	lsr	r17
     a58:	17 70       	andi	r17, 0x07	; 7
     a5a:	1a 9d       	mul	r17, r10
     a5c:	80 19       	sub	r24, r0
     a5e:	11 24       	eor	r1, r1
     a60:	18 2f       	mov	r17, r24
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <_Z12setupMinutesv+0x78>
				
			}
			if (key == 2) {
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	31 f1       	breq	.+76     	; 0xab4 <_Z12setupMinutesv+0xc4>
			screen_arr [0] = minutes % 10;
			return 4;
			}

		}
		if (blinker > 250) {
     a68:	cb 3f       	cpi	r28, 0xFB	; 251
     a6a:	d1 05       	cpc	r29, r1
     a6c:	88 f0       	brcs	.+34     	; 0xa90 <_Z12setupMinutesv+0xa0>
			screen_arr [1] = minutes / 10;
     a6e:	1b 9d       	mul	r17, r11
     a70:	91 2d       	mov	r25, r1
     a72:	11 24       	eor	r1, r1
     a74:	96 95       	lsr	r25
     a76:	96 95       	lsr	r25
     a78:	96 95       	lsr	r25
     a7a:	f7 01       	movw	r30, r14
     a7c:	91 83       	std	Z+1, r25	; 0x01
			screen_arr [0] = minutes % 10;
     a7e:	99 0f       	add	r25, r25
     a80:	89 2f       	mov	r24, r25
     a82:	88 0f       	add	r24, r24
     a84:	88 0f       	add	r24, r24
     a86:	98 0f       	add	r25, r24
     a88:	81 2f       	mov	r24, r17
     a8a:	89 1b       	sub	r24, r25
     a8c:	80 83       	st	Z, r24
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <_Z12setupMinutesv+0xa6>
		}
		else {
			screen_arr [1] = -1;
     a90:	f7 01       	movw	r30, r14
     a92:	01 83       	std	Z+1, r16	; 0x01
			screen_arr [0] = -1;
     a94:	00 83       	st	Z, r16
		}
		if (blinker < 500) {
     a96:	c4 3f       	cpi	r28, 0xF4	; 244
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	df 07       	cpc	r29, r31
     a9c:	10 f4       	brcc	.+4      	; 0xaa2 <_Z12setupMinutesv+0xb2>
			blinker += 1;
     a9e:	21 96       	adiw	r28, 0x01	; 1
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <_Z12setupMinutesv+0xb6>
		}
		else {
			blinker = 0;
     aa2:	cc 2d       	mov	r28, r12
     aa4:	dd 2d       	mov	r29, r13
     aa6:	ef ec       	ldi	r30, 0xCF	; 207
     aa8:	f7 e0       	ldi	r31, 0x07	; 7
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <_Z12setupMinutesv+0xba>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_Z12setupMinutesv+0xc0>
     ab0:	00 00       	nop
     ab2:	c6 cf       	rjmp	.-116    	; 0xa40 <_Z12setupMinutesv+0x50>
				minutes += 1;
				minutes %= 60;
				
			}
			if (key == 2) {
			rtcSendMinutes (minutes);
     ab4:	81 2f       	mov	r24, r17
     ab6:	0e 94 ab 08 	call	0x1156	; 0x1156 <_Z14rtcSendMinutesh>
			screen_arr [1] = minutes / 10;
     aba:	8d ec       	ldi	r24, 0xCD	; 205
     abc:	18 9f       	mul	r17, r24
     abe:	81 2d       	mov	r24, r1
     ac0:	11 24       	eor	r1, r1
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
     ac6:	86 95       	lsr	r24
     ac8:	e3 e1       	ldi	r30, 0x13	; 19
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     ace:	88 0f       	add	r24, r24
     ad0:	98 2f       	mov	r25, r24
     ad2:	99 0f       	add	r25, r25
     ad4:	99 0f       	add	r25, r25
     ad6:	89 0f       	add	r24, r25
     ad8:	18 1b       	sub	r17, r24
     ada:	10 83       	st	Z, r17
			blinker = 0;
		}
		_delay_ms(1);

	}
}
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	08 95       	ret

00000af6 <_Z10setupHoursv>:
uint8_t setupHours () {
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
     b0c:	e3 e1       	ldi	r30, 0x13	; 19
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	92 81       	ldd	r25, Z+2	; 0x02
     b12:	83 81       	ldd	r24, Z+3	; 0x03
     b14:	88 0f       	add	r24, r24
     b16:	18 2f       	mov	r17, r24
     b18:	11 0f       	add	r17, r17
     b1a:	11 0f       	add	r17, r17
     b1c:	81 0f       	add	r24, r17
     b1e:	18 2f       	mov	r17, r24
     b20:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     b22:	c0 e0       	ldi	r28, 0x00	; 0
     b24:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				hours += 1;
				hours %= 24;
     b26:	0f 2e       	mov	r0, r31
     b28:	fb ea       	ldi	r31, 0xAB	; 171
     b2a:	9f 2e       	mov	r9, r31
     b2c:	f0 2d       	mov	r31, r0
     b2e:	0f 2e       	mov	r0, r31
     b30:	f8 e1       	ldi	r31, 0x18	; 24
     b32:	af 2e       	mov	r10, r31
     b34:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
			screen_arr [2] = hours % 10;
		}
		else {
			screen_arr [3] = -1;
     b36:	7f 01       	movw	r14, r30
     b38:	0f ef       	ldi	r16, 0xFF	; 255
			return 0;
			}

		}
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
     b3a:	0f 2e       	mov	r0, r31
     b3c:	fd ec       	ldi	r31, 0xCD	; 205
     b3e:	bf 2e       	mov	r11, r31
     b40:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     b42:	c1 2c       	mov	r12, r1
     b44:	d1 2c       	mov	r13, r1
}
uint8_t setupHours () {
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     b46:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
     b4a:	88 23       	and	r24, r24
     b4c:	79 f0       	breq	.+30     	; 0xb6c <_Z10setupHoursv+0x76>
			if (key == 1) {
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	59 f4       	brne	.+22     	; 0xb68 <_Z10setupHoursv+0x72>
				hours += 1;
     b52:	81 0f       	add	r24, r17
				hours %= 24;
     b54:	89 9d       	mul	r24, r9
     b56:	11 2d       	mov	r17, r1
     b58:	11 24       	eor	r1, r1
     b5a:	12 95       	swap	r17
     b5c:	1f 70       	andi	r17, 0x0F	; 15
     b5e:	1a 9d       	mul	r17, r10
     b60:	80 19       	sub	r24, r0
     b62:	11 24       	eor	r1, r1
     b64:	18 2f       	mov	r17, r24
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <_Z10setupHoursv+0x76>
				
			}
			if (key == 2) {
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	31 f1       	breq	.+76     	; 0xbb8 <_Z10setupHoursv+0xc2>
			rtcSendHours (hours);
			return 0;
			}

		}
		if (blinker > 250) {
     b6c:	cb 3f       	cpi	r28, 0xFB	; 251
     b6e:	d1 05       	cpc	r29, r1
     b70:	88 f0       	brcs	.+34     	; 0xb94 <_Z10setupHoursv+0x9e>
			screen_arr [3] = hours / 10;
     b72:	1b 9d       	mul	r17, r11
     b74:	91 2d       	mov	r25, r1
     b76:	11 24       	eor	r1, r1
     b78:	96 95       	lsr	r25
     b7a:	96 95       	lsr	r25
     b7c:	96 95       	lsr	r25
     b7e:	f7 01       	movw	r30, r14
     b80:	93 83       	std	Z+3, r25	; 0x03
			screen_arr [2] = hours % 10;
     b82:	99 0f       	add	r25, r25
     b84:	89 2f       	mov	r24, r25
     b86:	88 0f       	add	r24, r24
     b88:	88 0f       	add	r24, r24
     b8a:	98 0f       	add	r25, r24
     b8c:	81 2f       	mov	r24, r17
     b8e:	89 1b       	sub	r24, r25
     b90:	82 83       	std	Z+2, r24	; 0x02
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <_Z10setupHoursv+0xa4>
		}
		else {
			screen_arr [3] = -1;
     b94:	f7 01       	movw	r30, r14
     b96:	03 83       	std	Z+3, r16	; 0x03
			screen_arr [2] = -1;
     b98:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500) {
     b9a:	c4 3f       	cpi	r28, 0xF4	; 244
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	df 07       	cpc	r29, r31
     ba0:	10 f4       	brcc	.+4      	; 0xba6 <_Z10setupHoursv+0xb0>
			blinker += 1;
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <_Z10setupHoursv+0xb4>
		}
		else {
			blinker = 0;
     ba6:	cc 2d       	mov	r28, r12
     ba8:	dd 2d       	mov	r29, r13
     baa:	ef ec       	ldi	r30, 0xCF	; 207
     bac:	f7 e0       	ldi	r31, 0x07	; 7
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <_Z10setupHoursv+0xb8>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <_Z10setupHoursv+0xbe>
     bb4:	00 00       	nop
     bb6:	c7 cf       	rjmp	.-114    	; 0xb46 <_Z10setupHoursv+0x50>
				hours += 1;
				hours %= 24;
				
			}
			if (key == 2) {
			rtcSendHours (hours);
     bb8:	81 2f       	mov	r24, r17
     bba:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z12rtcSendHoursh>
		}
		_delay_ms(1);


	}
}
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	bf 90       	pop	r11
     bd2:	af 90       	pop	r10
     bd4:	9f 90       	pop	r9
     bd6:	08 95       	ret

00000bd8 <_Z14clrScreenArrayv>:
	}

	return 0;
}
void clrScreenArray () {
	screen_arr[0]=-1;
     bd8:	e3 e1       	ldi	r30, 0x13	; 19
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	80 83       	st	Z, r24
	screen_arr[1]=-1;
     be0:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2]=-1;
     be2:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3]=-1;
     be4:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4]=-1;
     be6:	84 83       	std	Z+4, r24	; 0x04
     be8:	08 95       	ret

00000bea <_Z8rtcCyclev>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
	TCCR0B = 2;//Prescaler
}
uint8_t rtcCycle () {
     bea:	2f 92       	push	r2
     bec:	3f 92       	push	r3
     bee:	4f 92       	push	r4
     bf0:	5f 92       	push	r5
     bf2:	6f 92       	push	r6
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	67 97       	sbiw	r28, 0x17	; 23
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61



	uint8_t timeArr[0x13];

	bool powerGoodDelay = true;
     c1e:	55 24       	eor	r5, r5
     c20:	53 94       	inc	r5
	
	TIMSK0|=1<<TOIE0;
	TCCR0B = 2;//Prescaler
}
uint8_t rtcCycle () {
	int8_t startLowEnergy = -1;
     c22:	bb 24       	eor	r11, r11
     c24:	ba 94       	dec	r11
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
				if(startLowEnergy == endLowEnergy) {
					clrScreenArray();
					powerGoodDelay = false;
     c26:	a1 2c       	mov	r10, r1
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     c28:	0f 2e       	mov	r0, r31
     c2a:	fc e3       	ldi	r31, 0x3C	; 60
     c2c:	2f 2e       	mov	r2, r31
     c2e:	31 2c       	mov	r3, r1
     c30:	f0 2d       	mov	r31, r0
		//bool powerGood = false;
		
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		readTime(timeArr);
		if (powerGood || powerGoodDelay) {
			screen_arr[0] = timeArr[1] & 0x0F;
     c32:	0f 2e       	mov	r0, r31
     c34:	f3 e1       	ldi	r31, 0x13	; 19
     c36:	cf 2e       	mov	r12, r31
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	df 2e       	mov	r13, r31
     c3c:	f0 2d       	mov	r31, r0
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
     c3e:	68 94       	set
     c40:	44 24       	eor	r4, r4
     c42:	41 f8       	bld	r4, 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     c44:	0c e7       	ldi	r16, 0x7C	; 124
     c46:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     c48:	0f 2e       	mov	r0, r31
     c4a:	fa e7       	ldi	r31, 0x7A	; 122
     c4c:	8f 2e       	mov	r8, r31
     c4e:	91 2c       	mov	r9, r1
     c50:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     c52:	0f 2e       	mov	r0, r31
     c54:	fb e0       	ldi	r31, 0x0B	; 11
     c56:	6f 2e       	mov	r6, r31
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	7f 2e       	mov	r7, r31
     c5c:	f0 2d       	mov	r31, r0

	bool powerGoodDelay = true;


	while (true) {
		bool powerGood = PIND & 1;
     c5e:	89 b1       	in	r24, 0x09	; 9
     c60:	81 70       	andi	r24, 0x01	; 1
     c62:	f8 2e       	mov	r15, r24
		//bool powerGood = false;
		
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		readTime(timeArr);
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	0e 94 39 08 	call	0x1072	; 0x1072 <_Z8readTimePh>
		if (powerGood || powerGoodDelay) {
     c6c:	f1 10       	cpse	r15, r1
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <_Z8rtcCyclev+0x8a>
     c70:	55 20       	and	r5, r5
     c72:	01 f1       	breq	.+64     	; 0xcb4 <_Z8rtcCyclev+0xca>
			screen_arr[0] = timeArr[1] & 0x0F;
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	98 2f       	mov	r25, r24
     c78:	9f 70       	andi	r25, 0x0F	; 15
     c7a:	f6 01       	movw	r30, r12
     c7c:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	95 95       	asr	r25
     c82:	87 95       	ror	r24
     c84:	95 95       	asr	r25
     c86:	87 95       	ror	r24
     c88:	95 95       	asr	r25
     c8a:	87 95       	ror	r24
     c8c:	95 95       	asr	r25
     c8e:	87 95       	ror	r24
     c90:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	98 2f       	mov	r25, r24
     c96:	9f 70       	andi	r25, 0x0F	; 15
     c98:	92 83       	std	Z+2, r25	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	95 95       	asr	r25
     ca2:	87 95       	ror	r24
     ca4:	95 95       	asr	r25
     ca6:	87 95       	ror	r24
     ca8:	95 95       	asr	r25
     caa:	87 95       	ror	r24
     cac:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[4] = 2;//Dot Point Position
     cae:	44 82       	std	Z+4, r4	; 0x04
			
		}
		if(powerGood) {
     cb0:	f1 10       	cpse	r15, r1
     cb2:	34 c0       	rjmp	.+104    	; 0xd1c <_Z8rtcCyclev+0x132>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
     cb4:	ff ef       	ldi	r31, 0xFF	; 255
     cb6:	bf 12       	cpse	r11, r31
     cb8:	1f c0       	rjmp	.+62     	; 0xcf8 <_Z8rtcCyclev+0x10e>
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	2f 70       	andi	r18, 0x0F	; 15
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	95 95       	asr	r25
     cc4:	87 95       	ror	r24
     cc6:	95 95       	asr	r25
     cc8:	87 95       	ror	r24
     cca:	95 95       	asr	r25
     ccc:	87 95       	ror	r24
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	ac 01       	movw	r20, r24
     cd4:	44 0f       	add	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	84 0f       	add	r24, r20
     ce6:	95 1f       	adc	r25, r21
     ce8:	82 0f       	add	r24, r18
     cea:	91 1d       	adc	r25, r1
     cec:	05 96       	adiw	r24, 0x05	; 5
     cee:	b1 01       	movw	r22, r2
     cf0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__divmodhi4>
     cf4:	b8 2e       	mov	r11, r24
     cf6:	16 c0       	rjmp	.+44     	; 0xd24 <_Z8rtcCyclev+0x13a>
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	98 2f       	mov	r25, r24
     cfc:	96 95       	lsr	r25
     cfe:	96 95       	lsr	r25
     d00:	96 95       	lsr	r25
     d02:	9e 71       	andi	r25, 0x1E	; 30
     d04:	29 2f       	mov	r18, r25
     d06:	22 0f       	add	r18, r18
     d08:	22 0f       	add	r18, r18
     d0a:	92 0f       	add	r25, r18
     d0c:	8f 70       	andi	r24, 0x0F	; 15
     d0e:	89 0f       	add	r24, r25
				if(startLowEnergy == endLowEnergy) {
     d10:	b8 12       	cpse	r11, r24
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <_Z8rtcCyclev+0x13a>
					clrScreenArray();
     d14:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z14clrScreenArrayv>
					powerGoodDelay = false;
     d18:	5a 2c       	mov	r5, r10
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <_Z8rtcCyclev+0x13a>
			
		}
		if(powerGood) {
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
     d1c:	55 24       	eor	r5, r5
     d1e:	53 94       	inc	r5
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
			
		}
		if(powerGood) {
			startLowEnergy = -1;
     d20:	bb 24       	eor	r11, r11
     d22:	ba 94       	dec	r11
			
			}
		
		
		
		uint8_t key = keyChecker();
     d24:	0e 94 a3 02 	call	0x546	; 0x546 <_Z10keyCheckerv>
		if(key) {
     d28:	88 23       	and	r24, r24
     d2a:	61 f0       	breq	.+24     	; 0xd44 <_Z8rtcCyclev+0x15a>
			if (key == 1) {
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	39 f4       	brne	.+14     	; 0xd3e <_Z8rtcCyclev+0x154>
				if(!powerGoodDelay) {
     d30:	51 10       	cpse	r5, r1
     d32:	80 c0       	rjmp	.+256    	; 0xe34 <_Z8rtcCyclev+0x24a>
					powerGoodDelay = true;
     d34:	55 24       	eor	r5, r5
     d36:	53 94       	inc	r5
					startLowEnergy = -1;
     d38:	bb 24       	eor	r11, r11
     d3a:	ba 94       	dec	r11
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <_Z8rtcCyclev+0x15a>
					endLowEnergy = -1;
				}
				else 
				return 1;
			}
			if (key == 3) {
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	09 f4       	brne	.+2      	; 0xd44 <_Z8rtcCyclev+0x15a>
     d42:	7a c0       	rjmp	.+244    	; 0xe38 <_Z8rtcCyclev+0x24e>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     d44:	f8 01       	movw	r30, r16
     d46:	80 81       	ld	r24, Z
     d48:	8f 70       	andi	r24, 0x0F	; 15
     d4a:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     d4c:	80 81       	ld	r24, Z
     d4e:	80 7f       	andi	r24, 0xF0	; 240
     d50:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     d58:	f4 01       	movw	r30, r8
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     d60:	80 91 1a 01 	lds	r24, 0x011A
     d64:	88 23       	and	r24, r24
     d66:	e1 f3       	breq	.-8      	; 0xd60 <_Z8rtcCyclev+0x176>
		Voltage = CalculateVoltage(Data);
     d68:	60 91 18 01 	lds	r22, 0x0118
     d6c:	70 91 19 01 	lds	r23, 0x0119
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatunsisf>
     d78:	2a ea       	ldi	r18, 0xAA	; 170
     d7a:	31 ef       	ldi	r19, 0xF1	; 241
     d7c:	44 e9       	ldi	r20, 0x94	; 148
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     d84:	f3 01       	movw	r30, r6
     d86:	64 83       	std	Z+4, r22	; 0x04
     d88:	75 83       	std	Z+5, r23	; 0x05
     d8a:	86 83       	std	Z+6, r24	; 0x06
     d8c:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     d8e:	a0 92 1a 01 	sts	0x011A, r10
		}
		adcOb.MesureVoltage(PORTC1);
		//opacity = 15 - adcOb.Data/64;
		//Opacity Correction
		const double corrector = 4096;
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
     d92:	e0 90 18 01 	lds	r14, 0x0118
     d96:	f0 90 19 01 	lds	r15, 0x0119
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 ef       	ldi	r19, 0xF0	; 240
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	55 e4       	ldi	r21, 0x45	; 69
     da2:	60 91 00 01 	lds	r22, 0x0100
     da6:	70 91 01 01 	lds	r23, 0x0101
     daa:	80 91 02 01 	lds	r24, 0x0102
     dae:	90 91 03 01 	lds	r25, 0x0103
     db2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e8       	ldi	r20, 0x80	; 128
     dbc:	59 e3       	ldi	r21, 0x39	; 57
     dbe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     dc2:	6c 8b       	std	Y+20, r22	; 0x14
     dc4:	7d 8b       	std	Y+21, r23	; 0x15
     dc6:	8e 8b       	std	Y+22, r24	; 0x16
     dc8:	9f 8b       	std	Y+23, r25	; 0x17
     dca:	b7 01       	movw	r22, r14
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatunsisf>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	59 e3       	ldi	r21, 0x39	; 57
     ddc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     de0:	9b 01       	movw	r18, r22
     de2:	ac 01       	movw	r20, r24
     de4:	6c 89       	ldd	r22, Y+20	; 0x14
     de6:	7d 89       	ldd	r23, Y+21	; 0x15
     de8:	8e 89       	ldd	r24, Y+22	; 0x16
     dea:	9f 89       	ldd	r25, Y+23	; 0x17
     dec:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__addsf3>
     df0:	60 93 00 01 	sts	0x0100, r22
     df4:	70 93 01 01 	sts	0x0101, r23
     df8:	80 93 02 01 	sts	0x0102, r24
     dfc:	90 93 03 01 	sts	0x0103, r25
		opacity = 15 - adcAvg/64;
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5c e3       	ldi	r21, 0x3C	; 60
     e08:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     e0c:	9b 01       	movw	r18, r22
     e0e:	ac 01       	movw	r20, r24
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	80 e7       	ldi	r24, 0x70	; 112
     e16:	91 e4       	ldi	r25, 0x41	; 65
     e18:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__subsf3>
     e1c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixsfsi>
     e20:	60 93 04 01 	sts	0x0104, r22
		if(opacity < 0) opacity = 0;
     e24:	80 91 04 01 	lds	r24, 0x0104
     e28:	88 23       	and	r24, r24
     e2a:	0c f0       	brlt	.+2      	; 0xe2e <_Z8rtcCyclev+0x244>
     e2c:	18 cf       	rjmp	.-464    	; 0xc5e <_Z8rtcCyclev+0x74>
     e2e:	a0 92 04 01 	sts	0x0104, r10
     e32:	15 cf       	rjmp	.-470    	; 0xc5e <_Z8rtcCyclev+0x74>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else 
				return 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <_Z8rtcCyclev+0x250>
			}
			if (key == 3) {
			
			return 3;
     e38:	83 e0       	ldi	r24, 0x03	; 3
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
		opacity = 15 - adcAvg/64;
		if(opacity < 0) opacity = 0;
	}
	
}
     e3a:	67 96       	adiw	r28, 0x17	; 23
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	9f 90       	pop	r9
     e5c:	8f 90       	pop	r8
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	3f 90       	pop	r3
     e68:	2f 90       	pop	r2
     e6a:	08 95       	ret

00000e6c <main>:
		current Screen = 2 - accumulator mode;
		current Screen = 3 - setup minutes mode;
		current Screen = 4 - setum hours mode;
	*/

	DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
     e6c:	8a b1       	in	r24, 0x0a	; 10
     e6e:	87 7e       	andi	r24, 0xE7	; 231
     e70:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
     e72:	8b b1       	in	r24, 0x0b	; 11
     e74:	88 61       	ori	r24, 0x18	; 24
     e76:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray();//Start from blank screen
     e78:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
     e7c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z21EnableTimer0Interruptv>
	sei();
     e80:	78 94       	sei
	rtcInit();
     e82:	0e 94 f8 07 	call	0xff0	; 0xff0 <_Z7rtcInitv>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     e86:	ec e7       	ldi	r30, 0x7C	; 124
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 7f       	andi	r24, 0xF0	; 240
     e8e:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     e90:	80 81       	ld	r24, Z
     e92:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e94:	ea e7       	ldi	r30, 0x7A	; 122
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	87 60       	ori	r24, 0x07	; 7
     e9c:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
     e9e:	80 81       	ld	r24, Z
     ea0:	88 60       	ori	r24, 0x08	; 8
     ea2:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
     ea4:	80 81       	ld	r24, Z
     ea6:	80 68       	ori	r24, 0x80	; 128
     ea8:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 83       	st	Z, r24
uint8_t keyChecker();
void clrScreenArray ();

int main(void)
{
	uint8_t currentScreen = 0;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
	sei();
	rtcInit();
	adcOb.Init();
    while (1) 
    {
		switch (currentScreen) {
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	89 f0       	breq	.+34     	; 0xed8 <main+0x6c>
     eb6:	28 f4       	brcc	.+10     	; 0xec2 <main+0x56>
     eb8:	88 23       	and	r24, r24
     eba:	41 f0       	breq	.+16     	; 0xecc <main+0x60>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	49 f0       	breq	.+18     	; 0xed2 <main+0x66>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <main+0x7e>
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	61 f0       	breq	.+24     	; 0xede <main+0x72>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	69 f0       	breq	.+26     	; 0xee4 <main+0x78>
     eca:	0f c0       	rjmp	.+30     	; 0xeea <main+0x7e>
			case 0: currentScreen = rtcCycle();
     ecc:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z8rtcCyclev>
					break;
     ed0:	f0 cf       	rjmp	.-32     	; 0xeb2 <main+0x46>
			case 1: currentScreen = dsMode();
     ed2:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z6dsModev>
					break;
     ed6:	ed cf       	rjmp	.-38     	; 0xeb2 <main+0x46>
			case 2: currentScreen = acbMode();
     ed8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z7acbModev>
					break;
     edc:	ea cf       	rjmp	.-44     	; 0xeb2 <main+0x46>
			case 3: currentScreen = setupMinutes();
     ede:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z12setupMinutesv>
					break;
     ee2:	e7 cf       	rjmp	.-50     	; 0xeb2 <main+0x46>
			case 4: currentScreen = setupHours();
     ee4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z10setupHoursv>
					break;
     ee8:	e4 cf       	rjmp	.-56     	; 0xeb2 <main+0x46>
			default: currentScreen = rtcCycle();
     eea:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z8rtcCyclev>
					 break;
     eee:	e1 cf       	rjmp	.-62     	; 0xeb2 <main+0x46>

00000ef0 <_GLOBAL__sub_I_temperature_byte1>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	90 93 19 01 	sts	0x0119, r25
     ef8:	80 93 18 01 	sts	0x0118, r24
		DataReady = false;
     efc:	10 92 1a 01 	sts	0x011A, r1
		Resistor = INFINITY;
     f00:	eb e0       	ldi	r30, 0x0B	; 11
     f02:	f1 e0       	ldi	r31, 0x01	; 1
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a0 e8       	ldi	r26, 0x80	; 128
     f0a:	bf e7       	ldi	r27, 0x7F	; 127
     f0c:	80 83       	st	Z, r24
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	a2 83       	std	Z+2, r26	; 0x02
     f12:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
     f14:	84 83       	std	Z+4, r24	; 0x04
     f16:	95 83       	std	Z+5, r25	; 0x05
     f18:	a6 83       	std	Z+6, r26	; 0x06
     f1a:	b7 83       	std	Z+7, r27	; 0x07
     f1c:	08 95       	ret

00000f1e <_Z13i2cSetBitratej>:
void i2cSetBitrate(uint16_t bitratekHz)
{
	uint8_t bitrate_div;
	// set i2c bitrate
	// Set Prescaler to one --> TWPS = 1
	TWSR =((0<<TWPS0)|(0<<TWPS1));
     f1e:	10 92 b9 00 	sts	0x00B9, r1
	//calculate bitrate division	
	bitrate_div = (((float)F_CPU/1000.0)/(float)bitratekHz);
     f22:	bc 01       	movw	r22, r24
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatunsisf>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	8a ef       	ldi	r24, 0xFA	; 250
     f36:	95 e4       	ldi	r25, 0x45	; 69
     f38:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
     f3c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
	if(bitrate_div >= 16){
     f40:	60 31       	cpi	r22, 0x10	; 16
     f42:	88 f0       	brcs	.+34     	; 0xf66 <_Z13i2cSetBitratej+0x48>
		bitrate_div = (float)(bitrate_div-16)/8;
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 51       	subi	r22, 0x10	; 16
     f48:	71 09       	sbc	r23, r1
     f4a:	07 2e       	mov	r0, r23
     f4c:	00 0c       	add	r0, r0
     f4e:	88 0b       	sbc	r24, r24
     f50:	99 0b       	sbc	r25, r25
     f52:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__floatsisf>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	5e e3       	ldi	r21, 0x3E	; 62
     f5e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__mulsf3>
     f62:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
	}
	//printf("DIV: %d \n",bitrate_div);
	TWBR=(uint8_t)bitrate_div;
     f66:	60 93 b8 00 	sts	0x00B8, r22
	//TWBR=0; -> max speed
	PORTC |= ((1<<PINC4) | (1<<PINC5));
     f6a:	88 b1       	in	r24, 0x08	; 8
     f6c:	80 63       	ori	r24, 0x30	; 48
     f6e:	88 b9       	out	0x08, r24	; 8
     f70:	08 95       	ret

00000f72 <_Z11i2cSendStopv>:
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
     f72:	84 e9       	ldi	r24, 0x94	; 148
     f74:	80 93 bc 00 	sts	0x00BC, r24
// 
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
     f78:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
     f7a:	ec eb       	ldi	r30, 0xBC	; 188
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	84 ff       	sbrs	r24, 4
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <_Z11i2cSendStopv+0x22>
     f84:	9a 35       	cpi	r25, 0x5A	; 90
     f86:	51 f4       	brne	.+20     	; 0xf9c <_Z11i2cSendStopv+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	8a 95       	dec	r24
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <_Z11i2cSendStopv+0x18>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <_Z11i2cSendStopv+0x1e>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     f90:	84 e6       	ldi	r24, 0x64	; 100
     f92:	08 95       	ret
	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     f94:	9a 35       	cpi	r25, 0x5A	; 90
     f96:	c0 f7       	brcc	.-16     	; 0xf88 <_Z11i2cSendStopv+0x16>
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	08 95       	ret
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	8a 95       	dec	r24
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <_Z11i2cSendStopv+0x2c>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <_Z11i2cSendStopv+0x32>
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	eb cf       	rjmp	.-42     	; 0xf7e <_Z11i2cSendStopv+0xc>

00000fa8 <_Z18i2cWaitForCompletev>:
//----------------------------------------
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
     fa8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;	

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
     faa:	ec eb       	ldi	r30, 0xBC	; 188
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 23       	and	r24, r24
     fb2:	44 f0       	brlt	.+16     	; 0xfc4 <_Z18i2cWaitForCompletev+0x1c>
     fb4:	9a 35       	cpi	r25, 0x5A	; 90
     fb6:	51 f4       	brne	.+20     	; 0xfcc <_Z18i2cWaitForCompletev+0x24>
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	8a 95       	dec	r24
     fbc:	f1 f7       	brne	.-4      	; 0xfba <_Z18i2cWaitForCompletev+0x12>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <_Z18i2cWaitForCompletev+0x18>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     fc0:	84 e6       	ldi	r24, 0x64	; 100
     fc2:	08 95       	ret
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     fc4:	9a 35       	cpi	r25, 0x5A	; 90
     fc6:	c0 f7       	brcc	.-16     	; 0xfb8 <_Z18i2cWaitForCompletev+0x10>
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;	
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	8a 95       	dec	r24
     fd0:	f1 f7       	brne	.-4      	; 0xfce <_Z18i2cWaitForCompletev+0x26>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <_Z18i2cWaitForCompletev+0x2c>

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	eb cf       	rjmp	.-42     	; 0xfae <_Z18i2cWaitForCompletev+0x6>

00000fd8 <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
     fd8:	20 91 b9 00 	lds	r18, 0x00B9
     fdc:	28 7f       	andi	r18, 0xF8	; 248
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	11 f0       	breq	.+4      	; 0xfec <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
     fe8:	8a e0       	ldi	r24, 0x0A	; 10
     fea:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
     fec:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
     fee:	08 95       	ret

00000ff0 <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
	i2cSetBitrate(400);
     ffa:	80 e9       	ldi	r24, 0x90	; 144
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1002:	cc eb       	ldi	r28, 0xBC	; 188
    1004:	d0 e0       	ldi	r29, 0x00	; 0
    1006:	84 ea       	ldi	r24, 0xA4	; 164
    1008:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    100a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    100e:	0f 2e       	mov	r0, r31
    1010:	fb eb       	ldi	r31, 0xBB	; 187
    1012:	ef 2e       	mov	r14, r31
    1014:	f1 2c       	mov	r15, r1
    1016:	f0 2d       	mov	r31, r0
    1018:	80 ed       	ldi	r24, 0xD0	; 208
    101a:	f7 01       	movw	r30, r14
    101c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    101e:	14 e8       	ldi	r17, 0x84	; 132
    1020:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1022:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1026:	88 e2       	ldi	r24, 0x28	; 40
    1028:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    102c:	8e e0       	ldi	r24, 0x0E	; 14
    102e:	f7 01       	movw	r30, r14
    1030:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1032:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
    1034:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1038:	88 e2       	ldi	r24, 0x28	; 40
    103a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	f7 01       	movw	r30, r14
    1042:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1044:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
    1046:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    104a:	88 e2       	ldi	r24, 0x28	; 40
    104c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	f7 01       	movw	r30, r14
    1054:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1056:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
    1058:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    105c:	88 e2       	ldi	r24, 0x28	; 40
    105e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1062:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11i2cSendStopv>
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    108a:	cc eb       	ldi	r28, 0xBC	; 188
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	04 ea       	ldi	r16, 0xA4	; 164
    1090:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
    1092:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1096:	0f 2e       	mov	r0, r31
    1098:	fb eb       	ldi	r31, 0xBB	; 187
    109a:	ef 2e       	mov	r14, r31
    109c:	f1 2c       	mov	r15, r1
    109e:	f0 2d       	mov	r31, r0
    10a0:	80 ed       	ldi	r24, 0xD0	; 208
    10a2:	f7 01       	movw	r30, r14
    10a4:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    10a6:	14 e8       	ldi	r17, 0x84	; 132
    10a8:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    10aa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    10ae:	88 e2       	ldi	r24, 0x28	; 40
    10b0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    10b4:	f7 01       	movw	r30, r14
    10b6:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    10b8:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    10ba:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    10be:	88 e2       	ldi	r24, 0x28	; 40
    10c0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    10c4:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    10c8:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
    10ca:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    10ce:	81 ed       	ldi	r24, 0xD1	; 209
    10d0:	f7 01       	movw	r30, r14
    10d2:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    10d4:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
    10d6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    10da:	88 e2       	ldi	r24, 0x28	; 40
    10dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
    10e0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
    10e4:	e5 01       	movw	r28, r10
    10e6:	65 01       	movw	r12, r10
    10e8:	f3 e1       	ldi	r31, 0x13	; 19
    10ea:	cf 0e       	add	r12, r31
    10ec:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    10ee:	0f 2e       	mov	r0, r31
    10f0:	fc eb       	ldi	r31, 0xBC	; 188
    10f2:	ef 2e       	mov	r14, r31
    10f4:	f1 2c       	mov	r15, r1
    10f6:	f0 2d       	mov	r31, r0
    10f8:	0f 2e       	mov	r0, r31
    10fa:	f4 ec       	ldi	r31, 0xC4	; 196
    10fc:	9f 2e       	mov	r9, r31
    10fe:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1100:	0b eb       	ldi	r16, 0xBB	; 187
    1102:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1104:	f7 01       	movw	r30, r14
    1106:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
    1108:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    110c:	f8 01       	movw	r30, r16
    110e:	90 81       	ld	r25, Z
		timeArr[i] = i2cGetReceivedByte();
    1110:	99 93       	st	Y+, r25
		i2cWaitForComplete();
    1112:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
    1116:	80 e5       	ldi	r24, 0x50	; 80
    1118:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
    111c:	cc 15       	cp	r28, r12
    111e:	dd 05       	cpc	r29, r13
    1120:	89 f7       	brne	.-30     	; 0x1104 <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
    1122:	84 e8       	ldi	r24, 0x84	; 132
    1124:	80 93 bc 00 	sts	0x00BC, r24
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
    1128:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    112c:	80 91 bb 00 	lds	r24, 0x00BB
	timeArr[6] = i2cGetReceivedByte();
    1130:	f5 01       	movw	r30, r10
    1132:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
    1134:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
    1138:	88 e5       	ldi	r24, 0x58	; 88
    113a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>

	

}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	08 95       	ret

00001156 <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
    1162:	9d ec       	ldi	r25, 0xCD	; 205
    1164:	89 9f       	mul	r24, r25
    1166:	91 2d       	mov	r25, r1
    1168:	11 24       	eor	r1, r1
    116a:	96 95       	lsr	r25
    116c:	96 95       	lsr	r25
    116e:	96 95       	lsr	r25
	bdc <<= 4;
    1170:	c9 2f       	mov	r28, r25
    1172:	c2 95       	swap	r28
    1174:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= minutes%10;
    1176:	99 0f       	add	r25, r25
    1178:	29 2f       	mov	r18, r25
    117a:	22 0f       	add	r18, r18
    117c:	22 0f       	add	r18, r18
    117e:	92 0f       	add	r25, r18
    1180:	89 1b       	sub	r24, r25
    1182:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1184:	0c eb       	ldi	r16, 0xBC	; 188
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	84 ea       	ldi	r24, 0xA4	; 164
    118a:	f8 01       	movw	r30, r16
    118c:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
    118e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1192:	0f 2e       	mov	r0, r31
    1194:	fb eb       	ldi	r31, 0xBB	; 187
    1196:	ef 2e       	mov	r14, r31
    1198:	f1 2c       	mov	r15, r1
    119a:	f0 2d       	mov	r31, r0
    119c:	80 ed       	ldi	r24, 0xD0	; 208
    119e:	f7 01       	movw	r30, r14
    11a0:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    11a2:	d4 e8       	ldi	r29, 0x84	; 132
    11a4:	f8 01       	movw	r30, r16
    11a6:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    11a8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    11ac:	88 e2       	ldi	r24, 0x28	; 40
    11ae:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    11b2:	f7 01       	movw	r30, r14
    11b4:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    11b6:	f8 01       	movw	r30, r16
    11b8:	d0 83       	st	Z, r29

	i2cSendByte(0x00);
	i2cWaitForComplete();
    11ba:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    11be:	88 e2       	ldi	r24, 0x28	; 40
    11c0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    11c4:	f7 01       	movw	r30, r14
    11c6:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    11c8:	f8 01       	movw	r30, r16
    11ca:	d0 83       	st	Z, r29

	i2cSendByte(0);
	i2cWaitForComplete();
    11cc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    11d0:	88 e2       	ldi	r24, 0x28	; 40
    11d2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    11d6:	f7 01       	movw	r30, r14
    11d8:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    11da:	f8 01       	movw	r30, r16
    11dc:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
    11de:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    11e2:	88 e2       	ldi	r24, 0x28	; 40
    11e4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    11e8:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11i2cSendStopv>
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
    1206:	9d ec       	ldi	r25, 0xCD	; 205
    1208:	89 9f       	mul	r24, r25
    120a:	91 2d       	mov	r25, r1
    120c:	11 24       	eor	r1, r1
    120e:	96 95       	lsr	r25
    1210:	96 95       	lsr	r25
    1212:	96 95       	lsr	r25
	bdc <<= 4;
    1214:	c9 2f       	mov	r28, r25
    1216:	c2 95       	swap	r28
    1218:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= hours%10;
    121a:	99 0f       	add	r25, r25
    121c:	29 2f       	mov	r18, r25
    121e:	22 0f       	add	r18, r18
    1220:	22 0f       	add	r18, r18
    1222:	92 0f       	add	r25, r18
    1224:	89 1b       	sub	r24, r25
    1226:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1228:	0c eb       	ldi	r16, 0xBC	; 188
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	84 ea       	ldi	r24, 0xA4	; 164
    122e:	f8 01       	movw	r30, r16
    1230:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
    1232:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1236:	0f 2e       	mov	r0, r31
    1238:	fb eb       	ldi	r31, 0xBB	; 187
    123a:	ef 2e       	mov	r14, r31
    123c:	f1 2c       	mov	r15, r1
    123e:	f0 2d       	mov	r31, r0
    1240:	80 ed       	ldi	r24, 0xD0	; 208
    1242:	f7 01       	movw	r30, r14
    1244:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1246:	d4 e8       	ldi	r29, 0x84	; 132
    1248:	f8 01       	movw	r30, r16
    124a:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    124c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1250:	88 e2       	ldi	r24, 0x28	; 40
    1252:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	f7 01       	movw	r30, r14
    125a:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    125c:	f8 01       	movw	r30, r16
    125e:	d0 83       	st	Z, r29

	i2cSendByte(0x02);
	i2cWaitForComplete();
    1260:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1264:	88 e2       	ldi	r24, 0x28	; 40
    1266:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    126a:	f7 01       	movw	r30, r14
    126c:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    126e:	f8 01       	movw	r30, r16
    1270:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
    1272:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1276:	88 e2       	ldi	r24, 0x28	; 40
    1278:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    127c:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11i2cSendStopv>
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	08 95       	ret

0000128e <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
    128e:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
    1290:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
    1292:	8a b1       	in	r24, 0x0a	; 10
    1294:	82 62       	ori	r24, 0x22	; 34
    1296:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
    1298:	8b b1       	in	r24, 0x0b	; 11
    129a:	8d 7d       	andi	r24, 0xDD	; 221
    129c:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
    129e:	84 b1       	in	r24, 0x04	; 4
    12a0:	8d 63       	ori	r24, 0x3D	; 61
    12a2:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
    12a4:	85 b1       	in	r24, 0x05	; 5
    12a6:	82 7c       	andi	r24, 0xC2	; 194
    12a8:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
    12aa:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
    12ac:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
    12ae:	8a b1       	in	r24, 0x0a	; 10
    12b0:	80 6c       	ori	r24, 0xC0	; 192
    12b2:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
    12b4:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
    12b6:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
    12b8:	8b b1       	in	r24, 0x0b	; 11
    12ba:	80 6c       	ori	r24, 0xC0	; 192
    12bc:	8b b9       	out	0x0b, r24	; 11
    12be:	08 95       	ret

000012c0 <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	c8 2f       	mov	r28, r24
    12c6:	d6 2f       	mov	r29, r22
	ClrScr();
    12c8:	0e 94 47 09 	call	0x128e	; 0x128e <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
    12cc:	d1 11       	cpse	r29, r1
    12ce:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
    12d0:	8c 2f       	mov	r24, r28
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	86 37       	cpi	r24, 0x76	; 118
    12d6:	91 05       	cpc	r25, r1
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <_Z11Display7seghb+0x1c>
    12da:	4d c0       	rjmp	.+154    	; 0x1376 <_Z11Display7seghb+0xb6>
    12dc:	fc 01       	movw	r30, r24
    12de:	ec 5c       	subi	r30, 0xCC	; 204
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    12e6:	85 b1       	in	r24, 0x05	; 5
    12e8:	89 62       	ori	r24, 0x29	; 41
    12ea:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    12ec:	8b b1       	in	r24, 0x0b	; 11
    12ee:	82 62       	ori	r24, 0x22	; 34
    12f0:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    12f2:	42 9a       	sbi	0x08, 2	; 8
				break;
    12f4:	42 c0       	rjmp	.+132    	; 0x137a <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    12f6:	85 b1       	in	r24, 0x05	; 5
    12f8:	89 60       	ori	r24, 0x09	; 9
    12fa:	85 b9       	out	0x05, r24	; 5
				break;
    12fc:	3e c0       	rjmp	.+124    	; 0x137a <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    12fe:	85 b1       	in	r24, 0x05	; 5
    1300:	85 62       	ori	r24, 0x25	; 37
    1302:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1304:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    1306:	42 9a       	sbi	0x08, 2	; 8
				break;
    1308:	38 c0       	rjmp	.+112    	; 0x137a <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    130a:	85 b1       	in	r24, 0x05	; 5
    130c:	8d 62       	ori	r24, 0x2D	; 45
    130e:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1310:	59 9a       	sbi	0x0b, 1	; 11
				break;
    1312:	33 c0       	rjmp	.+102    	; 0x137a <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    1314:	85 b1       	in	r24, 0x05	; 5
    1316:	8d 60       	ori	r24, 0x0D	; 13
    1318:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    131a:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    131c:	2e c0       	rjmp	.+92     	; 0x137a <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    131e:	85 b1       	in	r24, 0x05	; 5
    1320:	8c 62       	ori	r24, 0x2C	; 44
    1322:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1324:	8b b1       	in	r24, 0x0b	; 11
    1326:	82 62       	ori	r24, 0x22	; 34
    1328:	8b b9       	out	0x0b, r24	; 11
				break;
    132a:	27 c0       	rjmp	.+78     	; 0x137a <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    132c:	85 b1       	in	r24, 0x05	; 5
    132e:	8c 62       	ori	r24, 0x2C	; 44
    1330:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1332:	8b b1       	in	r24, 0x0b	; 11
    1334:	82 62       	ori	r24, 0x22	; 34
    1336:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1338:	42 9a       	sbi	0x08, 2	; 8
				break;
    133a:	1f c0       	rjmp	.+62     	; 0x137a <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    133c:	85 b1       	in	r24, 0x05	; 5
    133e:	89 60       	ori	r24, 0x09	; 9
    1340:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1342:	8b b1       	in	r24, 0x0b	; 11
    1344:	82 62       	ori	r24, 0x22	; 34
    1346:	8b b9       	out	0x0b, r24	; 11
				break;
    1348:	18 c0       	rjmp	.+48     	; 0x137a <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    134a:	85 b1       	in	r24, 0x05	; 5
    134c:	8d 62       	ori	r24, 0x2D	; 45
    134e:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1350:	8b b1       	in	r24, 0x0b	; 11
    1352:	82 62       	ori	r24, 0x22	; 34
    1354:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1356:	42 9a       	sbi	0x08, 2	; 8
				break;
    1358:	10 c0       	rjmp	.+32     	; 0x137a <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    135a:	85 b1       	in	r24, 0x05	; 5
    135c:	8d 62       	ori	r24, 0x2D	; 45
    135e:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1360:	8b b1       	in	r24, 0x0b	; 11
    1362:	82 62       	ori	r24, 0x22	; 34
    1364:	8b b9       	out	0x0b, r24	; 11
				break;
    1366:	09 c0       	rjmp	.+18     	; 0x137a <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    1368:	85 b1       	in	r24, 0x05	; 5
    136a:	88 62       	ori	r24, 0x28	; 40
    136c:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    136e:	42 9a       	sbi	0x08, 2	; 8
				break;
    1370:	04 c0       	rjmp	.+8      	; 0x137a <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    1372:	2a 9a       	sbi	0x05, 2	; 5
				break;
    1374:	02 c0       	rjmp	.+4      	; 0x137a <_Z11Display7seghb+0xba>
		default: ClrScr();
    1376:	0e 94 47 09 	call	0x128e	; 0x128e <_Z6ClrScrv>
				break;

	}
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	59 f0       	breq	.+22     	; 0x139a <_Z9NextDigith+0x1a>
    1384:	18 f4       	brcc	.+6      	; 0x138c <_Z9NextDigith+0xc>
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	31 f0       	breq	.+12     	; 0x1396 <_Z9NextDigith+0x16>
    138a:	08 95       	ret
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	39 f0       	breq	.+14     	; 0x139e <_Z9NextDigith+0x1e>
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	39 f0       	breq	.+14     	; 0x13a2 <_Z9NextDigith+0x22>
    1394:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    1396:	43 98       	cbi	0x08, 3	; 8
		break;
    1398:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    139a:	5e 98       	cbi	0x0b, 6	; 11
		break;
    139c:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    139e:	5f 98       	cbi	0x0b, 7	; 11
		break;
    13a0:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    13a2:	29 98       	cbi	0x05, 1	; 5
    13a4:	08 95       	ret

000013a6 <__subsf3>:
    13a6:	50 58       	subi	r21, 0x80	; 128

000013a8 <__addsf3>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	aa 27       	eor	r26, r26
    13ac:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__addsf3x>
    13b0:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    13b4:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    13b8:	38 f0       	brcs	.+14     	; 0x13c8 <__addsf3+0x20>
    13ba:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    13be:	20 f0       	brcs	.+8      	; 0x13c8 <__addsf3+0x20>
    13c0:	39 f4       	brne	.+14     	; 0x13d0 <__addsf3+0x28>
    13c2:	9f 3f       	cpi	r25, 0xFF	; 255
    13c4:	19 f4       	brne	.+6      	; 0x13cc <__addsf3+0x24>
    13c6:	26 f4       	brtc	.+8      	; 0x13d0 <__addsf3+0x28>
    13c8:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_nan>
    13cc:	0e f4       	brtc	.+2      	; 0x13d0 <__addsf3+0x28>
    13ce:	e0 95       	com	r30
    13d0:	e7 fb       	bst	r30, 7
    13d2:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>

000013d6 <__addsf3x>:
    13d6:	e9 2f       	mov	r30, r25
    13d8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_split3>
    13dc:	58 f3       	brcs	.-42     	; 0x13b4 <__addsf3+0xc>
    13de:	ba 17       	cp	r27, r26
    13e0:	62 07       	cpc	r22, r18
    13e2:	73 07       	cpc	r23, r19
    13e4:	84 07       	cpc	r24, r20
    13e6:	95 07       	cpc	r25, r21
    13e8:	20 f0       	brcs	.+8      	; 0x13f2 <__addsf3x+0x1c>
    13ea:	79 f4       	brne	.+30     	; 0x140a <__addsf3x+0x34>
    13ec:	a6 f5       	brtc	.+104    	; 0x1456 <__addsf3x+0x80>
    13ee:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_zero>
    13f2:	0e f4       	brtc	.+2      	; 0x13f6 <__addsf3x+0x20>
    13f4:	e0 95       	com	r30
    13f6:	0b 2e       	mov	r0, r27
    13f8:	ba 2f       	mov	r27, r26
    13fa:	a0 2d       	mov	r26, r0
    13fc:	0b 01       	movw	r0, r22
    13fe:	b9 01       	movw	r22, r18
    1400:	90 01       	movw	r18, r0
    1402:	0c 01       	movw	r0, r24
    1404:	ca 01       	movw	r24, r20
    1406:	a0 01       	movw	r20, r0
    1408:	11 24       	eor	r1, r1
    140a:	ff 27       	eor	r31, r31
    140c:	59 1b       	sub	r21, r25
    140e:	99 f0       	breq	.+38     	; 0x1436 <__addsf3x+0x60>
    1410:	59 3f       	cpi	r21, 0xF9	; 249
    1412:	50 f4       	brcc	.+20     	; 0x1428 <__addsf3x+0x52>
    1414:	50 3e       	cpi	r21, 0xE0	; 224
    1416:	68 f1       	brcs	.+90     	; 0x1472 <__addsf3x+0x9c>
    1418:	1a 16       	cp	r1, r26
    141a:	f0 40       	sbci	r31, 0x00	; 0
    141c:	a2 2f       	mov	r26, r18
    141e:	23 2f       	mov	r18, r19
    1420:	34 2f       	mov	r19, r20
    1422:	44 27       	eor	r20, r20
    1424:	58 5f       	subi	r21, 0xF8	; 248
    1426:	f3 cf       	rjmp	.-26     	; 0x140e <__addsf3x+0x38>
    1428:	46 95       	lsr	r20
    142a:	37 95       	ror	r19
    142c:	27 95       	ror	r18
    142e:	a7 95       	ror	r26
    1430:	f0 40       	sbci	r31, 0x00	; 0
    1432:	53 95       	inc	r21
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__addsf3x+0x52>
    1436:	7e f4       	brtc	.+30     	; 0x1456 <__addsf3x+0x80>
    1438:	1f 16       	cp	r1, r31
    143a:	ba 0b       	sbc	r27, r26
    143c:	62 0b       	sbc	r22, r18
    143e:	73 0b       	sbc	r23, r19
    1440:	84 0b       	sbc	r24, r20
    1442:	ba f0       	brmi	.+46     	; 0x1472 <__addsf3x+0x9c>
    1444:	91 50       	subi	r25, 0x01	; 1
    1446:	a1 f0       	breq	.+40     	; 0x1470 <__addsf3x+0x9a>
    1448:	ff 0f       	add	r31, r31
    144a:	bb 1f       	adc	r27, r27
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	c2 f7       	brpl	.-16     	; 0x1444 <__addsf3x+0x6e>
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <__addsf3x+0x9c>
    1456:	ba 0f       	add	r27, r26
    1458:	62 1f       	adc	r22, r18
    145a:	73 1f       	adc	r23, r19
    145c:	84 1f       	adc	r24, r20
    145e:	48 f4       	brcc	.+18     	; 0x1472 <__addsf3x+0x9c>
    1460:	87 95       	ror	r24
    1462:	77 95       	ror	r23
    1464:	67 95       	ror	r22
    1466:	b7 95       	ror	r27
    1468:	f7 95       	ror	r31
    146a:	9e 3f       	cpi	r25, 0xFE	; 254
    146c:	08 f0       	brcs	.+2      	; 0x1470 <__addsf3x+0x9a>
    146e:	b0 cf       	rjmp	.-160    	; 0x13d0 <__addsf3+0x28>
    1470:	93 95       	inc	r25
    1472:	88 0f       	add	r24, r24
    1474:	08 f0       	brcs	.+2      	; 0x1478 <__addsf3x+0xa2>
    1476:	99 27       	eor	r25, r25
    1478:	ee 0f       	add	r30, r30
    147a:	97 95       	ror	r25
    147c:	87 95       	ror	r24
    147e:	08 95       	ret

00001480 <__divsf3>:
    1480:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__divsf3x>
    1484:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    1488:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    148c:	58 f0       	brcs	.+22     	; 0x14a4 <__divsf3+0x24>
    148e:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    1492:	40 f0       	brcs	.+16     	; 0x14a4 <__divsf3+0x24>
    1494:	29 f4       	brne	.+10     	; 0x14a0 <__divsf3+0x20>
    1496:	5f 3f       	cpi	r21, 0xFF	; 255
    1498:	29 f0       	breq	.+10     	; 0x14a4 <__divsf3+0x24>
    149a:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    149e:	51 11       	cpse	r21, r1
    14a0:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>
    14a4:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_nan>

000014a8 <__divsf3x>:
    14a8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_split3>
    14ac:	68 f3       	brcs	.-38     	; 0x1488 <__divsf3+0x8>

000014ae <__divsf3_pse>:
    14ae:	99 23       	and	r25, r25
    14b0:	b1 f3       	breq	.-20     	; 0x149e <__divsf3+0x1e>
    14b2:	55 23       	and	r21, r21
    14b4:	91 f3       	breq	.-28     	; 0x149a <__divsf3+0x1a>
    14b6:	95 1b       	sub	r25, r21
    14b8:	55 0b       	sbc	r21, r21
    14ba:	bb 27       	eor	r27, r27
    14bc:	aa 27       	eor	r26, r26
    14be:	62 17       	cp	r22, r18
    14c0:	73 07       	cpc	r23, r19
    14c2:	84 07       	cpc	r24, r20
    14c4:	38 f0       	brcs	.+14     	; 0x14d4 <__divsf3_pse+0x26>
    14c6:	9f 5f       	subi	r25, 0xFF	; 255
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	44 1f       	adc	r20, r20
    14d0:	aa 1f       	adc	r26, r26
    14d2:	a9 f3       	breq	.-22     	; 0x14be <__divsf3_pse+0x10>
    14d4:	35 d0       	rcall	.+106    	; 0x1540 <__divsf3_pse+0x92>
    14d6:	0e 2e       	mov	r0, r30
    14d8:	3a f0       	brmi	.+14     	; 0x14e8 <__divsf3_pse+0x3a>
    14da:	e0 e8       	ldi	r30, 0x80	; 128
    14dc:	32 d0       	rcall	.+100    	; 0x1542 <__divsf3_pse+0x94>
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	e6 95       	lsr	r30
    14e4:	00 1c       	adc	r0, r0
    14e6:	ca f7       	brpl	.-14     	; 0x14da <__divsf3_pse+0x2c>
    14e8:	2b d0       	rcall	.+86     	; 0x1540 <__divsf3_pse+0x92>
    14ea:	fe 2f       	mov	r31, r30
    14ec:	29 d0       	rcall	.+82     	; 0x1540 <__divsf3_pse+0x92>
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	bb 1f       	adc	r27, r27
    14f6:	26 17       	cp	r18, r22
    14f8:	37 07       	cpc	r19, r23
    14fa:	48 07       	cpc	r20, r24
    14fc:	ab 07       	cpc	r26, r27
    14fe:	b0 e8       	ldi	r27, 0x80	; 128
    1500:	09 f0       	breq	.+2      	; 0x1504 <__divsf3_pse+0x56>
    1502:	bb 0b       	sbc	r27, r27
    1504:	80 2d       	mov	r24, r0
    1506:	bf 01       	movw	r22, r30
    1508:	ff 27       	eor	r31, r31
    150a:	93 58       	subi	r25, 0x83	; 131
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	3a f0       	brmi	.+14     	; 0x151e <__divsf3_pse+0x70>
    1510:	9e 3f       	cpi	r25, 0xFE	; 254
    1512:	51 05       	cpc	r21, r1
    1514:	78 f0       	brcs	.+30     	; 0x1534 <__divsf3_pse+0x86>
    1516:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    151a:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	e4 f3       	brlt	.-8      	; 0x151a <__divsf3_pse+0x6c>
    1522:	98 3e       	cpi	r25, 0xE8	; 232
    1524:	d4 f3       	brlt	.-12     	; 0x151a <__divsf3_pse+0x6c>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	9f 5f       	subi	r25, 0xFF	; 255
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__divsf3_pse+0x78>
    1534:	88 0f       	add	r24, r24
    1536:	91 1d       	adc	r25, r1
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret
    1540:	e1 e0       	ldi	r30, 0x01	; 1
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	bb 1f       	adc	r27, r27
    154a:	62 17       	cp	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	ba 07       	cpc	r27, r26
    1552:	20 f0       	brcs	.+8      	; 0x155c <__divsf3_pse+0xae>
    1554:	62 1b       	sub	r22, r18
    1556:	73 0b       	sbc	r23, r19
    1558:	84 0b       	sbc	r24, r20
    155a:	ba 0b       	sbc	r27, r26
    155c:	ee 1f       	adc	r30, r30
    155e:	88 f7       	brcc	.-30     	; 0x1542 <__divsf3_pse+0x94>
    1560:	e0 95       	com	r30
    1562:	08 95       	ret

00001564 <__fixsfsi>:
    1564:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixunssfsi>
    1568:	68 94       	set
    156a:	b1 11       	cpse	r27, r1
    156c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>
    1570:	08 95       	ret

00001572 <__fixunssfsi>:
    1572:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__fp_splitA>
    1576:	88 f0       	brcs	.+34     	; 0x159a <__fixunssfsi+0x28>
    1578:	9f 57       	subi	r25, 0x7F	; 127
    157a:	98 f0       	brcs	.+38     	; 0x15a2 <__fixunssfsi+0x30>
    157c:	b9 2f       	mov	r27, r25
    157e:	99 27       	eor	r25, r25
    1580:	b7 51       	subi	r27, 0x17	; 23
    1582:	b0 f0       	brcs	.+44     	; 0x15b0 <__fixunssfsi+0x3e>
    1584:	e1 f0       	breq	.+56     	; 0x15be <__fixunssfsi+0x4c>
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	1a f0       	brmi	.+6      	; 0x1596 <__fixunssfsi+0x24>
    1590:	ba 95       	dec	r27
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__fixunssfsi+0x14>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <__fixunssfsi+0x4c>
    1596:	b1 30       	cpi	r27, 0x01	; 1
    1598:	91 f0       	breq	.+36     	; 0x15be <__fixunssfsi+0x4c>
    159a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fp_zero>
    159e:	b1 e0       	ldi	r27, 0x01	; 1
    15a0:	08 95       	ret
    15a2:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_zero>
    15a6:	67 2f       	mov	r22, r23
    15a8:	78 2f       	mov	r23, r24
    15aa:	88 27       	eor	r24, r24
    15ac:	b8 5f       	subi	r27, 0xF8	; 248
    15ae:	39 f0       	breq	.+14     	; 0x15be <__fixunssfsi+0x4c>
    15b0:	b9 3f       	cpi	r27, 0xF9	; 249
    15b2:	cc f3       	brlt	.-14     	; 0x15a6 <__fixunssfsi+0x34>
    15b4:	86 95       	lsr	r24
    15b6:	77 95       	ror	r23
    15b8:	67 95       	ror	r22
    15ba:	b3 95       	inc	r27
    15bc:	d9 f7       	brne	.-10     	; 0x15b4 <__fixunssfsi+0x42>
    15be:	3e f4       	brtc	.+14     	; 0x15ce <__fixunssfsi+0x5c>
    15c0:	90 95       	com	r25
    15c2:	80 95       	com	r24
    15c4:	70 95       	com	r23
    15c6:	61 95       	neg	r22
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	8f 4f       	sbci	r24, 0xFF	; 255
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	08 95       	ret

000015d0 <__floatunsisf>:
    15d0:	e8 94       	clt
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <__floatsisf+0x12>

000015d4 <__floatsisf>:
    15d4:	97 fb       	bst	r25, 7
    15d6:	3e f4       	brtc	.+14     	; 0x15e6 <__floatsisf+0x12>
    15d8:	90 95       	com	r25
    15da:	80 95       	com	r24
    15dc:	70 95       	com	r23
    15de:	61 95       	neg	r22
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8f 4f       	sbci	r24, 0xFF	; 255
    15e4:	9f 4f       	sbci	r25, 0xFF	; 255
    15e6:	99 23       	and	r25, r25
    15e8:	a9 f0       	breq	.+42     	; 0x1614 <__floatsisf+0x40>
    15ea:	f9 2f       	mov	r31, r25
    15ec:	96 e9       	ldi	r25, 0x96	; 150
    15ee:	bb 27       	eor	r27, r27
    15f0:	93 95       	inc	r25
    15f2:	f6 95       	lsr	r31
    15f4:	87 95       	ror	r24
    15f6:	77 95       	ror	r23
    15f8:	67 95       	ror	r22
    15fa:	b7 95       	ror	r27
    15fc:	f1 11       	cpse	r31, r1
    15fe:	f8 cf       	rjmp	.-16     	; 0x15f0 <__floatsisf+0x1c>
    1600:	fa f4       	brpl	.+62     	; 0x1640 <__floatsisf+0x6c>
    1602:	bb 0f       	add	r27, r27
    1604:	11 f4       	brne	.+4      	; 0x160a <__floatsisf+0x36>
    1606:	60 ff       	sbrs	r22, 0
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <__floatsisf+0x6c>
    160a:	6f 5f       	subi	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	8f 4f       	sbci	r24, 0xFF	; 255
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	16 c0       	rjmp	.+44     	; 0x1640 <__floatsisf+0x6c>
    1614:	88 23       	and	r24, r24
    1616:	11 f0       	breq	.+4      	; 0x161c <__floatsisf+0x48>
    1618:	96 e9       	ldi	r25, 0x96	; 150
    161a:	11 c0       	rjmp	.+34     	; 0x163e <__floatsisf+0x6a>
    161c:	77 23       	and	r23, r23
    161e:	21 f0       	breq	.+8      	; 0x1628 <__floatsisf+0x54>
    1620:	9e e8       	ldi	r25, 0x8E	; 142
    1622:	87 2f       	mov	r24, r23
    1624:	76 2f       	mov	r23, r22
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <__floatsisf+0x5e>
    1628:	66 23       	and	r22, r22
    162a:	71 f0       	breq	.+28     	; 0x1648 <__floatsisf+0x74>
    162c:	96 e8       	ldi	r25, 0x86	; 134
    162e:	86 2f       	mov	r24, r22
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	2a f0       	brmi	.+10     	; 0x1640 <__floatsisf+0x6c>
    1636:	9a 95       	dec	r25
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	88 1f       	adc	r24, r24
    163e:	da f7       	brpl	.-10     	; 0x1636 <__floatsisf+0x62>
    1640:	88 0f       	add	r24, r24
    1642:	96 95       	lsr	r25
    1644:	87 95       	ror	r24
    1646:	97 f9       	bld	r25, 7
    1648:	08 95       	ret

0000164a <__fp_inf>:
    164a:	97 f9       	bld	r25, 7
    164c:	9f 67       	ori	r25, 0x7F	; 127
    164e:	80 e8       	ldi	r24, 0x80	; 128
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	08 95       	ret

00001656 <__fp_nan>:
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	80 ec       	ldi	r24, 0xC0	; 192
    165a:	08 95       	ret

0000165c <__fp_pscA>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	18 06       	cpc	r1, r24
    1666:	09 06       	cpc	r0, r25
    1668:	08 95       	ret

0000166a <__fp_pscB>:
    166a:	00 24       	eor	r0, r0
    166c:	0a 94       	dec	r0
    166e:	12 16       	cp	r1, r18
    1670:	13 06       	cpc	r1, r19
    1672:	14 06       	cpc	r1, r20
    1674:	05 06       	cpc	r0, r21
    1676:	08 95       	ret

00001678 <__fp_round>:
    1678:	09 2e       	mov	r0, r25
    167a:	03 94       	inc	r0
    167c:	00 0c       	add	r0, r0
    167e:	11 f4       	brne	.+4      	; 0x1684 <__fp_round+0xc>
    1680:	88 23       	and	r24, r24
    1682:	52 f0       	brmi	.+20     	; 0x1698 <__fp_round+0x20>
    1684:	bb 0f       	add	r27, r27
    1686:	40 f4       	brcc	.+16     	; 0x1698 <__fp_round+0x20>
    1688:	bf 2b       	or	r27, r31
    168a:	11 f4       	brne	.+4      	; 0x1690 <__fp_round+0x18>
    168c:	60 ff       	sbrs	r22, 0
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__fp_round+0x20>
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	08 95       	ret

0000169a <__fp_split3>:
    169a:	57 fd       	sbrc	r21, 7
    169c:	90 58       	subi	r25, 0x80	; 128
    169e:	44 0f       	add	r20, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	59 f0       	breq	.+22     	; 0x16ba <__fp_splitA+0x10>
    16a4:	5f 3f       	cpi	r21, 0xFF	; 255
    16a6:	71 f0       	breq	.+28     	; 0x16c4 <__fp_splitA+0x1a>
    16a8:	47 95       	ror	r20

000016aa <__fp_splitA>:
    16aa:	88 0f       	add	r24, r24
    16ac:	97 fb       	bst	r25, 7
    16ae:	99 1f       	adc	r25, r25
    16b0:	61 f0       	breq	.+24     	; 0x16ca <__fp_splitA+0x20>
    16b2:	9f 3f       	cpi	r25, 0xFF	; 255
    16b4:	79 f0       	breq	.+30     	; 0x16d4 <__fp_splitA+0x2a>
    16b6:	87 95       	ror	r24
    16b8:	08 95       	ret
    16ba:	12 16       	cp	r1, r18
    16bc:	13 06       	cpc	r1, r19
    16be:	14 06       	cpc	r1, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	f2 cf       	rjmp	.-28     	; 0x16a8 <__fp_split3+0xe>
    16c4:	46 95       	lsr	r20
    16c6:	f1 df       	rcall	.-30     	; 0x16aa <__fp_splitA>
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <__fp_splitA+0x30>
    16ca:	16 16       	cp	r1, r22
    16cc:	17 06       	cpc	r1, r23
    16ce:	18 06       	cpc	r1, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	f1 cf       	rjmp	.-30     	; 0x16b6 <__fp_splitA+0xc>
    16d4:	86 95       	lsr	r24
    16d6:	71 05       	cpc	r23, r1
    16d8:	61 05       	cpc	r22, r1
    16da:	08 94       	sec
    16dc:	08 95       	ret

000016de <__fp_zero>:
    16de:	e8 94       	clt

000016e0 <__fp_szero>:
    16e0:	bb 27       	eor	r27, r27
    16e2:	66 27       	eor	r22, r22
    16e4:	77 27       	eor	r23, r23
    16e6:	cb 01       	movw	r24, r22
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret

000016ec <__mulsf3>:
    16ec:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3x>
    16f0:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_round>
    16f4:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscA>
    16f8:	38 f0       	brcs	.+14     	; 0x1708 <__mulsf3+0x1c>
    16fa:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscB>
    16fe:	20 f0       	brcs	.+8      	; 0x1708 <__mulsf3+0x1c>
    1700:	95 23       	and	r25, r21
    1702:	11 f0       	breq	.+4      	; 0x1708 <__mulsf3+0x1c>
    1704:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    1708:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_nan>
    170c:	11 24       	eor	r1, r1
    170e:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>

00001712 <__mulsf3x>:
    1712:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_split3>
    1716:	70 f3       	brcs	.-36     	; 0x16f4 <__mulsf3+0x8>

00001718 <__mulsf3_pse>:
    1718:	95 9f       	mul	r25, r21
    171a:	c1 f3       	breq	.-16     	; 0x170c <__mulsf3+0x20>
    171c:	95 0f       	add	r25, r21
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	55 1f       	adc	r21, r21
    1722:	62 9f       	mul	r22, r18
    1724:	f0 01       	movw	r30, r0
    1726:	72 9f       	mul	r23, r18
    1728:	bb 27       	eor	r27, r27
    172a:	f0 0d       	add	r31, r0
    172c:	b1 1d       	adc	r27, r1
    172e:	63 9f       	mul	r22, r19
    1730:	aa 27       	eor	r26, r26
    1732:	f0 0d       	add	r31, r0
    1734:	b1 1d       	adc	r27, r1
    1736:	aa 1f       	adc	r26, r26
    1738:	64 9f       	mul	r22, r20
    173a:	66 27       	eor	r22, r22
    173c:	b0 0d       	add	r27, r0
    173e:	a1 1d       	adc	r26, r1
    1740:	66 1f       	adc	r22, r22
    1742:	82 9f       	mul	r24, r18
    1744:	22 27       	eor	r18, r18
    1746:	b0 0d       	add	r27, r0
    1748:	a1 1d       	adc	r26, r1
    174a:	62 1f       	adc	r22, r18
    174c:	73 9f       	mul	r23, r19
    174e:	b0 0d       	add	r27, r0
    1750:	a1 1d       	adc	r26, r1
    1752:	62 1f       	adc	r22, r18
    1754:	83 9f       	mul	r24, r19
    1756:	a0 0d       	add	r26, r0
    1758:	61 1d       	adc	r22, r1
    175a:	22 1f       	adc	r18, r18
    175c:	74 9f       	mul	r23, r20
    175e:	33 27       	eor	r19, r19
    1760:	a0 0d       	add	r26, r0
    1762:	61 1d       	adc	r22, r1
    1764:	23 1f       	adc	r18, r19
    1766:	84 9f       	mul	r24, r20
    1768:	60 0d       	add	r22, r0
    176a:	21 1d       	adc	r18, r1
    176c:	82 2f       	mov	r24, r18
    176e:	76 2f       	mov	r23, r22
    1770:	6a 2f       	mov	r22, r26
    1772:	11 24       	eor	r1, r1
    1774:	9f 57       	subi	r25, 0x7F	; 127
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	9a f0       	brmi	.+38     	; 0x17a0 <__mulsf3_pse+0x88>
    177a:	f1 f0       	breq	.+60     	; 0x17b8 <__mulsf3_pse+0xa0>
    177c:	88 23       	and	r24, r24
    177e:	4a f0       	brmi	.+18     	; 0x1792 <__mulsf3_pse+0x7a>
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	bb 1f       	adc	r27, r27
    1786:	66 1f       	adc	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	91 50       	subi	r25, 0x01	; 1
    178e:	50 40       	sbci	r21, 0x00	; 0
    1790:	a9 f7       	brne	.-22     	; 0x177c <__mulsf3_pse+0x64>
    1792:	9e 3f       	cpi	r25, 0xFE	; 254
    1794:	51 05       	cpc	r21, r1
    1796:	80 f0       	brcs	.+32     	; 0x17b8 <__mulsf3_pse+0xa0>
    1798:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__fp_inf>
    179c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_szero>
    17a0:	5f 3f       	cpi	r21, 0xFF	; 255
    17a2:	e4 f3       	brlt	.-8      	; 0x179c <__mulsf3_pse+0x84>
    17a4:	98 3e       	cpi	r25, 0xE8	; 232
    17a6:	d4 f3       	brlt	.-12     	; 0x179c <__mulsf3_pse+0x84>
    17a8:	86 95       	lsr	r24
    17aa:	77 95       	ror	r23
    17ac:	67 95       	ror	r22
    17ae:	b7 95       	ror	r27
    17b0:	f7 95       	ror	r31
    17b2:	e7 95       	ror	r30
    17b4:	9f 5f       	subi	r25, 0xFF	; 255
    17b6:	c1 f7       	brne	.-16     	; 0x17a8 <__mulsf3_pse+0x90>
    17b8:	fe 2b       	or	r31, r30
    17ba:	88 0f       	add	r24, r24
    17bc:	91 1d       	adc	r25, r1
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <__divmodhi4>:
    17c6:	97 fb       	bst	r25, 7
    17c8:	07 2e       	mov	r0, r23
    17ca:	16 f4       	brtc	.+4      	; 0x17d0 <__divmodhi4+0xa>
    17cc:	00 94       	com	r0
    17ce:	07 d0       	rcall	.+14     	; 0x17de <__divmodhi4_neg1>
    17d0:	77 fd       	sbrc	r23, 7
    17d2:	09 d0       	rcall	.+18     	; 0x17e6 <__divmodhi4_neg2>
    17d4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__udivmodhi4>
    17d8:	07 fc       	sbrc	r0, 7
    17da:	05 d0       	rcall	.+10     	; 0x17e6 <__divmodhi4_neg2>
    17dc:	3e f4       	brtc	.+14     	; 0x17ec <__divmodhi4_exit>

000017de <__divmodhi4_neg1>:
    17de:	90 95       	com	r25
    17e0:	81 95       	neg	r24
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	08 95       	ret

000017e6 <__divmodhi4_neg2>:
    17e6:	70 95       	com	r23
    17e8:	61 95       	neg	r22
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255

000017ec <__divmodhi4_exit>:
    17ec:	08 95       	ret

000017ee <__tablejump2__>:
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	05 90       	lpm	r0, Z+
    17f4:	f4 91       	lpm	r31, Z
    17f6:	e0 2d       	mov	r30, r0
    17f8:	09 94       	ijmp

000017fa <__umulhisi3>:
    17fa:	a2 9f       	mul	r26, r18
    17fc:	b0 01       	movw	r22, r0
    17fe:	b3 9f       	mul	r27, r19
    1800:	c0 01       	movw	r24, r0
    1802:	a3 9f       	mul	r26, r19
    1804:	70 0d       	add	r23, r0
    1806:	81 1d       	adc	r24, r1
    1808:	11 24       	eor	r1, r1
    180a:	91 1d       	adc	r25, r1
    180c:	b2 9f       	mul	r27, r18
    180e:	70 0d       	add	r23, r0
    1810:	81 1d       	adc	r24, r1
    1812:	11 24       	eor	r1, r1
    1814:	91 1d       	adc	r25, r1
    1816:	08 95       	ret

00001818 <__udivmodhi4>:
    1818:	aa 1b       	sub	r26, r26
    181a:	bb 1b       	sub	r27, r27
    181c:	51 e1       	ldi	r21, 0x11	; 17
    181e:	07 c0       	rjmp	.+14     	; 0x182e <__udivmodhi4_ep>

00001820 <__udivmodhi4_loop>:
    1820:	aa 1f       	adc	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	a6 17       	cp	r26, r22
    1826:	b7 07       	cpc	r27, r23
    1828:	10 f0       	brcs	.+4      	; 0x182e <__udivmodhi4_ep>
    182a:	a6 1b       	sub	r26, r22
    182c:	b7 0b       	sbc	r27, r23

0000182e <__udivmodhi4_ep>:
    182e:	88 1f       	adc	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	5a 95       	dec	r21
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__udivmodhi4_loop>
    1836:	80 95       	com	r24
    1838:	90 95       	com	r25
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	08 95       	ret

00001840 <_exit>:
    1840:	f8 94       	cli

00001842 <__stop_program>:
    1842:	ff cf       	rjmp	.-2      	; 0x1842 <__stop_program>
