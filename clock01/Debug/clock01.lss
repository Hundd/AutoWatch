
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001c38  00001ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800106  00800106  00001cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002425  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00004311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001660  00000000  00000000  00004a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  000060f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b65  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002523  00000000  00000000  00007309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_16>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_21>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	4d 09       	sbc	r20, r13
      6a:	50 09       	sbc	r21, r0
      6c:	53 09       	sbc	r21, r3
      6e:	56 09       	sbc	r21, r6
      70:	59 09       	sbc	r21, r9
      72:	5c 09       	sbc	r21, r12
      74:	5f 09       	sbc	r21, r15
      76:	57 0b       	sbc	r21, r23
      78:	5f 0b       	sbc	r21, r31
      7a:	63 0b       	sbc	r22, r19
      7c:	69 0b       	sbc	r22, r25
      7e:	6e 0b       	sbc	r22, r30
      80:	73 0b       	sbc	r23, r19
      82:	7a 0b       	sbc	r23, r26
      84:	82 0b       	sbc	r24, r18
      86:	89 0b       	sbc	r24, r25
      88:	91 0b       	sbc	r25, r17
      8a:	9f 0b       	sbc	r25, r31
      8c:	9f 0b       	sbc	r25, r31
      8e:	9f 0b       	sbc	r25, r31
      90:	9f 0b       	sbc	r25, r31
      92:	9f 0b       	sbc	r25, r31
      94:	9f 0b       	sbc	r25, r31
      96:	9f 0b       	sbc	r25, r31
      98:	9f 0b       	sbc	r25, r31
      9a:	9f 0b       	sbc	r25, r31
      9c:	9f 0b       	sbc	r25, r31
      9e:	9f 0b       	sbc	r25, r31
      a0:	9f 0b       	sbc	r25, r31
      a2:	9f 0b       	sbc	r25, r31
      a4:	9f 0b       	sbc	r25, r31
      a6:	9f 0b       	sbc	r25, r31
      a8:	9f 0b       	sbc	r25, r31
      aa:	9f 0b       	sbc	r25, r31
      ac:	9f 0b       	sbc	r25, r31
      ae:	9f 0b       	sbc	r25, r31
      b0:	9f 0b       	sbc	r25, r31
      b2:	9f 0b       	sbc	r25, r31
      b4:	9f 0b       	sbc	r25, r31
      b6:	9f 0b       	sbc	r25, r31
      b8:	9f 0b       	sbc	r25, r31
      ba:	9f 0b       	sbc	r25, r31
      bc:	9f 0b       	sbc	r25, r31
      be:	9f 0b       	sbc	r25, r31
      c0:	9f 0b       	sbc	r25, r31
      c2:	9f 0b       	sbc	r25, r31
      c4:	9f 0b       	sbc	r25, r31
      c6:	9f 0b       	sbc	r25, r31
      c8:	9f 0b       	sbc	r25, r31
      ca:	9f 0b       	sbc	r25, r31
      cc:	9f 0b       	sbc	r25, r31
      ce:	9f 0b       	sbc	r25, r31
      d0:	9d 0b       	sbc	r25, r29
      d2:	9f 0b       	sbc	r25, r31
      d4:	9f 0b       	sbc	r25, r31
      d6:	9f 0b       	sbc	r25, r31
      d8:	9f 0b       	sbc	r25, r31
      da:	9f 0b       	sbc	r25, r31
      dc:	9f 0b       	sbc	r25, r31
      de:	9f 0b       	sbc	r25, r31
      e0:	9f 0b       	sbc	r25, r31
      e2:	9f 0b       	sbc	r25, r31
      e4:	9f 0b       	sbc	r25, r31
      e6:	9f 0b       	sbc	r25, r31
      e8:	9f 0b       	sbc	r25, r31
      ea:	9f 0b       	sbc	r25, r31
      ec:	9f 0b       	sbc	r25, r31
      ee:	9f 0b       	sbc	r25, r31
      f0:	9f 0b       	sbc	r25, r31
      f2:	9f 0b       	sbc	r25, r31
      f4:	9f 0b       	sbc	r25, r31
      f6:	9f 0b       	sbc	r25, r31
      f8:	9f 0b       	sbc	r25, r31
      fa:	9f 0b       	sbc	r25, r31
      fc:	9f 0b       	sbc	r25, r31
      fe:	9f 0b       	sbc	r25, r31
     100:	9f 0b       	sbc	r25, r31
     102:	9f 0b       	sbc	r25, r31
     104:	9f 0b       	sbc	r25, r31
     106:	9f 0b       	sbc	r25, r31
     108:	9f 0b       	sbc	r25, r31
     10a:	9f 0b       	sbc	r25, r31
     10c:	9f 0b       	sbc	r25, r31
     10e:	9f 0b       	sbc	r25, r31
     110:	9f 0b       	sbc	r25, r31
     112:	9f 0b       	sbc	r25, r31
     114:	9f 0b       	sbc	r25, r31
     116:	9f 0b       	sbc	r25, r31
     118:	9f 0b       	sbc	r25, r31
     11a:	9f 0b       	sbc	r25, r31
     11c:	9f 0b       	sbc	r25, r31
     11e:	9f 0b       	sbc	r25, r31
     120:	9f 0b       	sbc	r25, r31
     122:	9f 0b       	sbc	r25, r31
     124:	9f 0b       	sbc	r25, r31
     126:	9f 0b       	sbc	r25, r31
     128:	9f 0b       	sbc	r25, r31
     12a:	9f 0b       	sbc	r25, r31
     12c:	9f 0b       	sbc	r25, r31
     12e:	9f 0b       	sbc	r25, r31
     130:	9f 0b       	sbc	r25, r31
     132:	9f 0b       	sbc	r25, r31
     134:	9f 0b       	sbc	r25, r31
     136:	9f 0b       	sbc	r25, r31
     138:	9f 0b       	sbc	r25, r31
     13a:	9f 0b       	sbc	r25, r31
     13c:	9f 0b       	sbc	r25, r31
     13e:	9f 0b       	sbc	r25, r31
     140:	9f 0b       	sbc	r25, r31
     142:	9f 0b       	sbc	r25, r31
     144:	9f 0b       	sbc	r25, r31
     146:	9f 0b       	sbc	r25, r31
     148:	9f 0b       	sbc	r25, r31
     14a:	9f 0b       	sbc	r25, r31
     14c:	9f 0b       	sbc	r25, r31
     14e:	9f 0b       	sbc	r25, r31
     150:	9f 0b       	sbc	r25, r31
     152:	9f 0b       	sbc	r25, r31
     154:	9f 0b       	sbc	r25, r31
     156:	9f 0b       	sbc	r25, r31
     158:	9f 0b       	sbc	r25, r31
     15a:	9f 0b       	sbc	r25, r31
     15c:	9f 0b       	sbc	r25, r31
     15e:	9f 0b       	sbc	r25, r31
     160:	98 0b       	sbc	r25, r24

00000162 <__ctors_start>:
     162:	65 09       	sbc	r22, r5

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e8 e3       	ldi	r30, 0x38	; 56
     178:	fc e1       	ldi	r31, 0x1C	; 28
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a6 30       	cpi	r26, 0x06	; 6
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	a6 e0       	ldi	r26, 0x06	; 6
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ae 31       	cpi	r26, 0x1E	; 30
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	c2 eb       	ldi	r28, 0xB2	; 178
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__tablejump2__>
     1a6:	c1 3b       	cpi	r28, 0xB1	; 177
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 0d 09 	call	0x121a	; 0x121a <main>
     1b0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_Z5resetPVhS0_h>:
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		return temperature_byte;
	}
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	dc 01       	movw	r26, r24
     1be:	fb 01       	movw	r30, r22
     1c0:	80 81       	ld	r24, Z
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z5resetPVhS0_h+0x14>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	4a 95       	dec	r20
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_Z5resetPVhS0_h+0x10>
     1d0:	82 2b       	or	r24, r18
     1d2:	80 83       	st	Z, r24
     1d4:	8c 91       	ld	r24, X
     1d6:	92 2f       	mov	r25, r18
     1d8:	90 95       	com	r25
     1da:	89 23       	and	r24, r25
     1dc:	8c 93       	st	X, r24
     1de:	c7 ee       	ldi	r28, 0xE7	; 231
     1e0:	d3 e0       	ldi	r29, 0x03	; 3
     1e2:	21 97       	sbiw	r28, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z5resetPVhS0_h+0x2a>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z5resetPVhS0_h+0x30>
     1e8:	00 00       	nop
     1ea:	8c 91       	ld	r24, X
     1ec:	28 2b       	or	r18, r24
     1ee:	2c 93       	st	X, r18
     1f0:	80 81       	ld	r24, Z
     1f2:	98 23       	and	r25, r24
     1f4:	90 83       	st	Z, r25
     1f6:	8f ec       	ldi	r24, 0xCF	; 207
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z5resetPVhS0_h+0x42>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z5resetPVhS0_h+0x48>
     200:	00 00       	nop
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_Z11SendToPort1PVhS0_h>:
     208:	dc 01       	movw	r26, r24
     20a:	fb 01       	movw	r30, r22
     20c:	f8 94       	cli
     20e:	90 81       	ld	r25, Z
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z11SendToPort1PVhS0_h+0x12>
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	4a 95       	dec	r20
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z11SendToPort1PVhS0_h+0xe>
     21e:	92 2b       	or	r25, r18
     220:	90 83       	st	Z, r25
     222:	9c 91       	ld	r25, X
     224:	20 95       	com	r18
     226:	92 23       	and	r25, r18
     228:	9c 93       	st	X, r25
     22a:	8a e0       	ldi	r24, 0x0A	; 10
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <_Z11SendToPort1PVhS0_h+0x24>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_Z11SendToPort1PVhS0_h+0x2a>
     232:	80 81       	ld	r24, Z
     234:	28 23       	and	r18, r24
     236:	20 83       	st	Z, r18
     238:	8a ec       	ldi	r24, 0xCA	; 202
     23a:	8a 95       	dec	r24
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z11SendToPort1PVhS0_h+0x32>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z11SendToPort1PVhS0_h+0x38>
     240:	08 95       	ret

00000242 <_Z11SendToPort0PVhS0_h>:
     242:	dc 01       	movw	r26, r24
     244:	fb 01       	movw	r30, r22
     246:	f8 94       	cli
     248:	90 81       	ld	r25, Z
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11SendToPort0PVhS0_h+0x12>
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	4a 95       	dec	r20
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11SendToPort0PVhS0_h+0xe>
     258:	92 2b       	or	r25, r18
     25a:	90 83       	st	Z, r25
     25c:	9c 91       	ld	r25, X
     25e:	20 95       	com	r18
     260:	92 23       	and	r25, r18
     262:	9c 93       	st	X, r25
     264:	8a ea       	ldi	r24, 0xAA	; 170
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <_Z11SendToPort0PVhS0_h+0x24>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z11SendToPort0PVhS0_h+0x2a>
     26c:	80 81       	ld	r24, Z
     26e:	28 23       	and	r18, r24
     270:	20 83       	st	Z, r18
     272:	8a e2       	ldi	r24, 0x2A	; 42
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <_Z11SendToPort0PVhS0_h+0x32>
     278:	00 c0       	rjmp	.+0      	; 0x27a <_Z11SendToPort0PVhS0_h+0x38>
     27a:	08 95       	ret

0000027c <_Z14SendByteToPortPVhS0_hh>:
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	6c 01       	movw	r12, r24
     28e:	7b 01       	movw	r14, r22
     290:	04 2f       	mov	r16, r20
     292:	12 2f       	mov	r17, r18
     294:	c8 e0       	ldi	r28, 0x08	; 8
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	10 ff       	sbrs	r17, 0
     29a:	06 c0       	rjmp	.+12     	; 0x2a8 <_Z14SendByteToPortPVhS0_hh+0x2c>
     29c:	40 2f       	mov	r20, r16
     29e:	b7 01       	movw	r22, r14
     2a0:	c6 01       	movw	r24, r12
     2a2:	0e 94 04 01 	call	0x208	; 0x208 <_Z11SendToPort1PVhS0_h>
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <_Z14SendByteToPortPVhS0_hh+0x36>
     2a8:	40 2f       	mov	r20, r16
     2aa:	b7 01       	movw	r22, r14
     2ac:	c6 01       	movw	r24, r12
     2ae:	0e 94 21 01 	call	0x242	; 0x242 <_Z11SendToPort0PVhS0_h>
     2b2:	16 95       	lsr	r17
     2b4:	21 97       	sbiw	r28, 0x01	; 1
     2b6:	81 f7       	brne	.-32     	; 0x298 <_Z14SendByteToPortPVhS0_hh+0x1c>
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	db 01       	movw	r26, r22
     2e4:	f8 94       	cli
     2e6:	ee 20       	and	r14, r14
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x22>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xc2>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	02 2e       	mov	r0, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2e>
     2f4:	66 0f       	add	r22, r22
     2f6:	77 1f       	adc	r23, r23
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2a>
     2fc:	a6 2e       	mov	r10, r22
     2fe:	b6 2e       	mov	r11, r22
     300:	b0 94       	com	r11
     302:	68 01       	movw	r12, r16
     304:	0e 0d       	add	r16, r14
     306:	11 1d       	adc	r17, r1
     308:	e7 e0       	ldi	r30, 0x07	; 7
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	7f 01       	movw	r14, r30
     30e:	e2 1a       	sub	r14, r18
     310:	f1 08       	sbc	r15, r1
     312:	46 01       	movw	r8, r12
     314:	e6 01       	movw	r28, r12
     316:	18 82       	st	Y, r1
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	2c 91       	ld	r18, X
     31e:	2a 29       	or	r18, r10
     320:	2c 93       	st	X, r18
     322:	ec 01       	movw	r28, r24
     324:	28 81       	ld	r18, Y
     326:	2b 21       	and	r18, r11
     328:	28 83       	st	Y, r18
     32a:	d5 e0       	ldi	r29, 0x05	; 5
     32c:	da 95       	dec	r29
     32e:	f1 f7       	brne	.-4      	; 0x32c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x62>
     330:	00 00       	nop
     332:	2c 91       	ld	r18, X
     334:	2b 21       	and	r18, r11
     336:	2c 93       	st	X, r18
     338:	2a e2       	ldi	r18, 0x2A	; 42
     33a:	2a 95       	dec	r18
     33c:	f1 f7       	brne	.-4      	; 0x33a <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x70>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x76>
     340:	ea 01       	movw	r28, r20
     342:	28 81       	ld	r18, Y
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	26 23       	and	r18, r22
     348:	37 23       	and	r19, r23
     34a:	0e 2c       	mov	r0, r14
     34c:	02 c0       	rjmp	.+4      	; 0x352 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x88>
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	0a 94       	dec	r0
     354:	e2 f7       	brpl	.-8      	; 0x34e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x84>
     356:	e4 01       	movw	r28, r8
     358:	38 81       	ld	r19, Y
     35a:	23 2b       	or	r18, r19
     35c:	e7 30       	cpi	r30, 0x07	; 7
     35e:	f1 05       	cpc	r31, r1
     360:	14 f0       	brlt	.+4      	; 0x366 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x9c>
     362:	28 83       	st	Y, r18
     364:	05 c0       	rjmp	.+10     	; 0x370 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	35 95       	asr	r19
     36a:	27 95       	ror	r18
     36c:	e4 01       	movw	r28, r8
     36e:	28 83       	st	Y, r18
     370:	d5 e7       	ldi	r29, 0x75	; 117
     372:	da 95       	dec	r29
     374:	f1 f7       	brne	.-4      	; 0x372 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa8>
     376:	00 00       	nop
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	e8 30       	cpi	r30, 0x08	; 8
     37c:	f1 05       	cpc	r31, r1
     37e:	71 f6       	brne	.-100    	; 0x31c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
     380:	ef ef       	ldi	r30, 0xFF	; 255
     382:	ce 1a       	sub	r12, r30
     384:	de 0a       	sbc	r13, r30
     386:	0c 15       	cp	r16, r12
     388:	1d 05       	cpc	r17, r13
     38a:	19 f6       	brne	.-122    	; 0x312 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x48>
     38c:	78 94       	sei
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	08 95       	ret

000003a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	8b 01       	movw	r16, r22
     3b6:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     3b8:	42 2f       	mov	r20, r18
     3ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3be:	2c ec       	ldi	r18, 0xCC	; 204
     3c0:	4f 2d       	mov	r20, r15
     3c2:	b8 01       	movw	r22, r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3ca:	24 e4       	ldi	r18, 0x44	; 68
     3cc:	4f 2d       	mov	r20, r15
     3ce:	b8 01       	movw	r22, r16
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
	}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
     3f8:	6b 01       	movw	r12, r22
     3fa:	5a 01       	movw	r10, r20
     3fc:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3fe:	42 2f       	mov	r20, r18
     400:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     404:	2c ec       	ldi	r18, 0xCC	; 204
     406:	4f 2d       	mov	r20, r15
     408:	b6 01       	movw	r22, r12
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     410:	2e eb       	ldi	r18, 0xBE	; 190
     412:	4f 2d       	mov	r20, r15
     414:	b6 01       	movw	r22, r12
     416:	ce 01       	movw	r24, r28
     418:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     41c:	0f 2e       	mov	r0, r31
     41e:	f9 e0       	ldi	r31, 0x09	; 9
     420:	ef 2e       	mov	r14, r31
     422:	f0 2d       	mov	r31, r0
     424:	2f 2d       	mov	r18, r15
     426:	a5 01       	movw	r20, r10
     428:	b6 01       	movw	r22, r12
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	08 95       	ret

00000446 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
		AdcClass::Data = ADC;
     454:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     458:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     45c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     460:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN8AdcClass4DataE>
		AdcClass::DataReady = true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZN8AdcClass9DataReadyE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	8a e1       	ldi	r24, 0x1A	; 26
     46c:	8a 95       	dec	r24
     46e:	f1 f7       	brne	.-4      	; 0x46c <__vector_21+0x26>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	af 93       	push	r26
     49c:	bf 93       	push	r27
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
	static uint8_t iov = 0;
	static uint8_t opacityDelay = 0;

	if (opacityDelay == MAXGRADES)
     4a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ11__vector_16E12opacityDelay>
     4a6:	8f 30       	cpi	r24, 0x0F	; 15
     4a8:	09 f5       	brne	.+66     	; 0x4ec <__vector_16+0x6c>
	{
		ClrScr();
     4aa:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_Z6ClrScrv>
		Display7seg(screen_arr[iov], iov == screen_arr[4]);
     4ae:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <screen_arr+0x4>
     4b2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZZ11__vector_16E3iov>
     4b6:	e9 2f       	mov	r30, r25
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	ea 5e       	subi	r30, 0xEA	; 234
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	29 13       	cpse	r18, r25
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	0e 94 44 0b 	call	0x1688	; 0x1688 <_Z11Display7seghb>
		NextDigit(4 - iov);
     4ca:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZZ11__vector_16E3iov>
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	89 1b       	sub	r24, r25
     4d2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_Z9NextDigith>
		iov += 1;
     4d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ11__vector_16E3iov>
     4da:	8f 5f       	subi	r24, 0xFF	; 255
		if (iov > 3)
     4dc:	84 30       	cpi	r24, 0x04	; 4
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <__vector_16+0x66>
	if (opacityDelay == MAXGRADES)
	{
		ClrScr();
		Display7seg(screen_arr[iov], iov == screen_arr[4]);
		NextDigit(4 - iov);
		iov += 1;
     4e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ11__vector_16E3iov>
     4e4:	11 c0       	rjmp	.+34     	; 0x508 <__vector_16+0x88>
		if (iov > 3)
			iov = 0;
     4e6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ11__vector_16E3iov>
     4ea:	0e c0       	rjmp	.+28     	; 0x508 <__vector_16+0x88>
	}
	else if (opacityDelay == (MAXGRADES - opacity))
     4ec:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <opacity>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2f e0       	ldi	r18, 0x0F	; 15
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	24 1b       	sub	r18, r20
     4f8:	31 09       	sbc	r19, r1
     4fa:	47 fd       	sbrc	r20, 7
     4fc:	33 95       	inc	r19
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	11 f4       	brne	.+4      	; 0x508 <__vector_16+0x88>
	{
		ClrScr();
     504:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_Z6ClrScrv>
	}
	opacityDelay = opacityDelay < MAXGRADES ? opacityDelay + 1 : 0;
     508:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ11__vector_16E12opacityDelay>
     50c:	8f 30       	cpi	r24, 0x0F	; 15
     50e:	10 f4       	brcc	.+4      	; 0x514 <__vector_16+0x94>
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <__vector_16+0x96>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZZ11__vector_16E12opacityDelay>
}
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	bf 91       	pop	r27
     520:	af 91       	pop	r26
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	7f 91       	pop	r23
     528:	6f 91       	pop	r22
     52a:	5f 91       	pop	r21
     52c:	4f 91       	pop	r20
     52e:	3f 91       	pop	r19
     530:	2f 91       	pop	r18
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <_Z21EnableTimer0Interruptv>:

volatile void EnableTimer0Interrupt()
{
	TIMSK0 |= 1 << TOIE0;
     53c:	ee e6       	ldi	r30, 0x6E	; 110
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	81 60       	ori	r24, 0x01	; 1
     544:	80 83       	st	Z, r24
	TCCR0B = 1; //Prescaler
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	85 bd       	out	0x25, r24	; 37
     54a:	08 95       	ret

0000054c <_Z10resetTimerv>:
}

void resetTimer()
{
	screen_arr[4] = 2; // DP position
     54c:	e6 e1       	ldi	r30, 0x16	; 22
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 0;
     554:	13 82       	std	Z+3, r1	; 0x03
	screen_arr[2] = 0;
     556:	12 82       	std	Z+2, r1	; 0x02
	screen_arr[1] = 0;
     558:	11 82       	std	Z+1, r1	; 0x01
	screen_arr[0] = 0;
     55a:	10 82       	st	Z, r1
     55c:	08 95       	ret

0000055e <_Z6buzzerb>:
}

void buzzer(bool on)
{
	DDRB |= 1 << PORTB6;
     55e:	26 9a       	sbi	0x04, 6	; 4

	if (on)
     560:	88 23       	and	r24, r24
     562:	11 f0       	breq	.+4      	; 0x568 <_Z6buzzerb+0xa>
	{
		PORTB |= 1 << PORTB6;
     564:	2e 9a       	sbi	0x05, 6	; 5
     566:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PORTB6);
     568:	2e 98       	cbi	0x05, 6	; 5
     56a:	08 95       	ret

0000056c <_Z10doubleBeepv>:
	}
}

void doubleBeep()
{
	buzzer(true);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     572:	2f e7       	ldi	r18, 0x7F	; 127
     574:	88 e3       	ldi	r24, 0x38	; 56
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <_Z10doubleBeepv+0xc>
     580:	00 c0       	rjmp	.+0      	; 0x582 <_Z10doubleBeepv+0x16>
     582:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     58a:	2f e7       	ldi	r18, 0x7F	; 127
     58c:	88 e3       	ldi	r24, 0x38	; 56
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <_Z10doubleBeepv+0x24>
     598:	00 c0       	rjmp	.+0      	; 0x59a <_Z10doubleBeepv+0x2e>
     59a:	00 00       	nop
	_delay_ms(50);
	buzzer(true);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5a2:	2f e7       	ldi	r18, 0x7F	; 127
     5a4:	88 e3       	ldi	r24, 0x38	; 56
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <_Z10doubleBeepv+0x3c>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <_Z10doubleBeepv+0x46>
     5b2:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5ba:	08 95       	ret

000005bc <_Z8longBeepv>:
}

void longBeep()
{
	buzzer(true);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	9c e0       	ldi	r25, 0x0C	; 12
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <_Z8longBeepv+0xc>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_Z8longBeepv+0x16>
     5d2:	00 00       	nop
	_delay_ms(500);
	buzzer(false);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5da:	08 95       	ret

000005dc <_Z10singleBeepv>:
}

void singleBeep()
{
	buzzer(true);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5e2:	2f ef       	ldi	r18, 0xFF	; 255
     5e4:	80 e7       	ldi	r24, 0x70	; 112
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <_Z10singleBeepv+0xc>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_Z10singleBeepv+0x16>
     5f2:	00 00       	nop
	_delay_ms(100);
	buzzer(false);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5fa:	08 95       	ret

000005fc <_Z14displaySecondsj>:
		}
	}
}

void displaySeconds(uint16_t secondsTotal)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ac 01       	movw	r20, r24
	screen_arr[0] = secondsTotal % 10;
     602:	9c 01       	movw	r18, r24
     604:	ad ec       	ldi	r26, 0xCD	; 205
     606:	bc ec       	ldi	r27, 0xCC	; 204
     608:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	9c 01       	movw	r18, r24
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	9a 01       	movw	r18, r20
     630:	28 1b       	sub	r18, r24
     632:	39 0b       	sbc	r19, r25
     634:	c6 e1       	ldi	r28, 0x16	; 22
     636:	d1 e0       	ldi	r29, 0x01	; 1
     638:	28 83       	st	Y, r18
	screen_arr[1] = secondsTotal % 60 / 10;
     63a:	9a 01       	movw	r18, r20
     63c:	a9 e8       	ldi	r26, 0x89	; 137
     63e:	b8 e8       	ldi	r27, 0x88	; 136
     640:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     644:	fc 01       	movw	r30, r24
     646:	f6 95       	lsr	r31
     648:	e7 95       	ror	r30
     64a:	f2 95       	swap	r31
     64c:	e2 95       	swap	r30
     64e:	ef 70       	andi	r30, 0x0F	; 15
     650:	ef 27       	eor	r30, r31
     652:	ff 70       	andi	r31, 0x0F	; 15
     654:	ef 27       	eor	r30, r31
     656:	2c e3       	ldi	r18, 0x3C	; 60
     658:	2e 9f       	mul	r18, r30
     65a:	c0 01       	movw	r24, r0
     65c:	2f 9f       	mul	r18, r31
     65e:	90 0d       	add	r25, r0
     660:	11 24       	eor	r1, r1
     662:	9a 01       	movw	r18, r20
     664:	28 1b       	sub	r18, r24
     666:	39 0b       	sbc	r19, r25
     668:	ad ec       	ldi	r26, 0xCD	; 205
     66a:	bc ec       	ldi	r27, 0xCC	; 204
     66c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	89 83       	std	Y+1, r24	; 0x01
	screen_arr[2] = secondsTotal / 60 % 10;
     67e:	9f 01       	movw	r18, r30
     680:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	e8 1b       	sub	r30, r24
     6a8:	f9 0b       	sbc	r31, r25
     6aa:	ea 83       	std	Y+2, r30	; 0x02
	screen_arr[3] = secondsTotal / 60 / 10;
     6ac:	9a 01       	movw	r18, r20
     6ae:	36 95       	lsr	r19
     6b0:	27 95       	ror	r18
     6b2:	36 95       	lsr	r19
     6b4:	27 95       	ror	r18
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	af e4       	ldi	r26, 0x4F	; 79
     6bc:	bb e1       	ldi	r27, 0x1B	; 27
     6be:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	8b 83       	std	Y+3, r24	; 0x03
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_Z10keyCheckerv>:
*PORTD4 SETUP
*/
	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	static uint8_t savedKeyState = 0;
	uint8_t keyState = PIND;
     6d6:	89 b1       	in	r24, 0x09	; 9
	keyState = (~keyState >> 3) & 3;
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	80 95       	com	r24
     6dc:	90 95       	com	r25
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	93 70       	andi	r25, 0x03	; 3

	if (keyState == keyStatePrevious && keyState)
     6ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZZ10keyCheckervE16keyStatePrevious>
     6f2:	98 13       	cpse	r25, r24
     6f4:	2b c0       	rjmp	.+86     	; 0x74c <_Z10keyCheckerv+0x76>
     6f6:	99 23       	and	r25, r25
     6f8:	49 f1       	breq	.+82     	; 0x74c <_Z10keyCheckerv+0x76>
	{
		if (times < 1500)
     6fa:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZZ10keyCheckervE5times>
     6fe:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     702:	2c 3d       	cpi	r18, 0xDC	; 220
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	38 07       	cpc	r19, r24
     708:	60 f4       	brcc	.+24     	; 0x722 <_Z10keyCheckerv+0x4c>
		{
			times += 1;
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     712:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <_ZZ10keyCheckervE5times>
     716:	ef ec       	ldi	r30, 0xCF	; 207
     718:	f7 e0       	ldi	r31, 0x07	; 7
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <_Z10keyCheckerv+0x44>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <_Z10keyCheckerv+0x4a>
     720:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10)
     722:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <_ZZ10keyCheckervE5times>
     726:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     72a:	2a 30       	cpi	r18, 0x0A	; 10
     72c:	31 05       	cpc	r19, r1
     72e:	21 f4       	brne	.+8      	; 0x738 <_Z10keyCheckerv+0x62>
		{
			savedKeyState = keyState;
     730:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
	{
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	08 95       	ret
		}
		if (times == 10)
		{
			savedKeyState = keyState;
		}
		if (times == 600)
     738:	28 35       	cpi	r18, 0x58	; 88
     73a:	32 40       	sbci	r19, 0x02	; 2
     73c:	a9 f4       	brne	.+42     	; 0x768 <_Z10keyCheckerv+0x92>
		{
			longBeep();
     73e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
			savedKeyState = 3;
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	{
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret
		{
			longBeep();
			savedKeyState = 3;
		}
	}
	else if (savedKeyState)
     74c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     750:	88 23       	and	r24, r24
     752:	19 f0       	breq	.+6      	; 0x75a <_Z10keyCheckerv+0x84>
	{
		uint8_t tempKeyState = savedKeyState;
		savedKeyState = 0;
     754:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>

		return tempKeyState;
     758:	08 95       	ret
	}
	else
	{
		keyStatePrevious = keyState;
     75a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ10keyCheckervE16keyStatePrevious>
		times = 0;
     75e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_ZZ10keyCheckervE5times+0x1>
     762:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZZ10keyCheckervE5times>
     766:	08 95       	ret
	}

	return 0;
     768:	80 e0       	ldi	r24, 0x00	; 0
}
     76a:	08 95       	ret

0000076c <_Z10setupTimerv>:

uint8_t setupTimer()
{
	while (true)
	{
		displaySeconds(alarmTime);
     76c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
		uint8_t key = keyChecker();
     776:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>

		if (key)
     77a:	88 23       	and	r24, r24
     77c:	b9 f3       	breq	.-18     	; 0x76c <_Z10setupTimerv>
		{
			if (key == 1 && alarmTime < 255)
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	51 f4       	brne	.+20     	; 0x796 <_Z10setupTimerv+0x2a>
     782:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     786:	8f 3f       	cpi	r24, 0xFF	; 255
     788:	89 f3       	breq	.-30     	; 0x76c <_Z10setupTimerv>
			{
				// short press button 1
				alarmTime += 1;
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     790:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     794:	eb cf       	rjmp	.-42     	; 0x76c <_Z10setupTimerv>
			}

			if (key == 2 && alarmTime > 0)
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	51 f4       	brne	.+20     	; 0x7ae <_Z10setupTimerv+0x42>
     79a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     79e:	88 23       	and	r24, r24
     7a0:	29 f3       	breq	.-54     	; 0x76c <_Z10setupTimerv>
			{
				// short press button 2
				alarmTime -= 1;
     7a2:	81 50       	subi	r24, 0x01	; 1
     7a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     7a8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     7ac:	df cf       	rjmp	.-66     	; 0x76c <_Z10setupTimerv>
			}

			if (key == 3)
     7ae:	83 30       	cpi	r24, 0x03	; 3
     7b0:	e9 f6       	brne	.-70     	; 0x76c <_Z10setupTimerv>
			{
				// long press button 2
				eeprom_write_byte(EEP_TIMER_ALARM_TIME, alarmTime);
     7b2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <alarmTime>
     7b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <EEP_TIMER_ALARM_TIME>
     7ba:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <EEP_TIMER_ALARM_TIME+0x1>
     7be:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <eeprom_write_byte>
				return 0;
			}
		}
	}
}
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret

000007c6 <_Z9timerModev>:
	screen_arr[2] = secondsTotal / 60 % 10;
	screen_arr[3] = secondsTotal / 60 / 10;
}

uint8_t timerMode()
{
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	63 97       	sbiw	r28, 0x13	; 19
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
	resetTimer();
     7e8:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
	doubleBeep();
     7ec:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
     7f0:	b1 2c       	mov	r11, r1
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
     7f2:	d1 2c       	mov	r13, r1
uint8_t timerMode()
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	10 e0       	ldi	r17, 0x00	; 0

uint8_t timerMode()
{
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
     7f8:	e1 2c       	mov	r14, r1
     7fa:	cc 24       	eor	r12, r12
     7fc:	c3 94       	inc	r12
	resetTimer();
	doubleBeep();

	while (true)
	{
		readTime(timeArr);
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z8readTimePh>
		currentSeconds = timeArr[0];
     806:	f9 80       	ldd	r15, Y+1	; 0x01

		if (conunerEnabled && currentSeconds != lastSeconds)
     808:	dd 20       	and	r13, r13
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z9timerModev+0x48>
     80c:	63 c0       	rjmp	.+198    	; 0x8d4 <_Z9timerModev+0x10e>
     80e:	ef 14       	cp	r14, r15
     810:	09 f4       	brne	.+2      	; 0x814 <_Z9timerModev+0x4e>
     812:	55 c0       	rjmp	.+170    	; 0x8be <_Z9timerModev+0xf8>
		{
			secondsTotal += 1;
     814:	0f 5f       	subi	r16, 0xFF	; 255
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	52 c0       	rjmp	.+164    	; 0x8be <_Z9timerModev+0xf8>
		if (conunerEnabled)
		{
			if (secondsTotal == alarmTime)
			{
				buzzering = true;
				buzzer(true);
     81a:	8c 2d       	mov	r24, r12
     81c:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     820:	02 c0       	rjmp	.+4      	; 0x826 <_Z9timerModev+0x60>
			}
			if (buzzering && secondsTotal <= (uint16_t)(alarmTime + 4) && secondsTotal > alarmTime)
     822:	bb 20       	and	r11, r11
     824:	29 f1       	breq	.+74     	; 0x870 <_Z9timerModev+0xaa>
     826:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <alarmTime>
     82a:	82 2f       	mov	r24, r18
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	04 96       	adiw	r24, 0x04	; 4
     830:	80 17       	cp	r24, r16
     832:	91 07       	cpc	r25, r17
     834:	a8 f0       	brcs	.+42     	; 0x860 <_Z9timerModev+0x9a>
     836:	82 2f       	mov	r24, r18
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	80 17       	cp	r24, r16
     83c:	91 07       	cpc	r25, r17
     83e:	a8 f4       	brcc	.+42     	; 0x86a <_Z9timerModev+0xa4>
			{
				buzzer((secondsTotal - alarmTime) % 2 - 1);
     840:	98 01       	movw	r18, r16
     842:	28 1b       	sub	r18, r24
     844:	39 0b       	sbc	r19, r25
     846:	c9 01       	movw	r24, r18
     848:	31 e0       	ldi	r19, 0x01	; 1
     84a:	83 27       	eor	r24, r19
     84c:	81 70       	andi	r24, 0x01	; 1
     84e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
			}

			if (buzzering && secondsTotal > (uint16_t)(alarmTime + 4))
     852:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	04 96       	adiw	r24, 0x04	; 4
     85a:	80 17       	cp	r24, r16
     85c:	91 07       	cpc	r25, r17
     85e:	38 f4       	brcc	.+14     	; 0x86e <_Z9timerModev+0xa8>
			{
				buzzer(false);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     866:	bc 2c       	mov	r11, r12
     868:	03 c0       	rjmp	.+6      	; 0x870 <_Z9timerModev+0xaa>
     86a:	bc 2c       	mov	r11, r12
     86c:	01 c0       	rjmp	.+2      	; 0x870 <_Z9timerModev+0xaa>
     86e:	bc 2c       	mov	r11, r12
			}
		}

		if (secondsTotal > 15 * 60)
     870:	05 38       	cpi	r16, 0x85	; 133
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	18 07       	cpc	r17, r24
     876:	90 f5       	brcc	.+100    	; 0x8dc <_Z9timerModev+0x116>
		{
			return 0;
		}

		uint8_t key = keyChecker();
     878:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>

		if (key)
     87c:	88 23       	and	r24, r24
     87e:	b9 f0       	breq	.+46     	; 0x8ae <_Z9timerModev+0xe8>
		{
			if (key == 1)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	29 f4       	brne	.+10     	; 0x88e <_Z9timerModev+0xc8>
			{
				// short press button 1
				singleBeep();
     884:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
				buzzering = false;
     888:	b1 2c       	mov	r11, r1
				conunerEnabled = true;
     88a:	dc 2c       	mov	r13, r12
     88c:	10 c0       	rjmp	.+32     	; 0x8ae <_Z9timerModev+0xe8>
			}

			if (key == 2)
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	49 f4       	brne	.+18     	; 0x8a4 <_Z9timerModev+0xde>
			{
				// short press button 2
				doubleBeep();
     892:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
     896:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
     89a:	b1 2c       	mov	r11, r1
			if (key == 2)
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
     89c:	d1 2c       	mov	r13, r1

			if (key == 2)
			{
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <_Z9timerModev+0xe8>
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
			}

			if (key == 3)
     8a4:	83 30       	cpi	r24, 0x03	; 3
     8a6:	19 f4       	brne	.+6      	; 0x8ae <_Z9timerModev+0xe8>
			{
				// long press button 2
				longBeep();
     8a8:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
				return 0;
     8ac:	17 c0       	rjmp	.+46     	; 0x8dc <_Z9timerModev+0x116>
     8ae:	8f ec       	ldi	r24, 0xCF	; 207
     8b0:	97 e0       	ldi	r25, 0x07	; 7
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <_Z9timerModev+0xec>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <_Z9timerModev+0xf2>
     8b8:	00 00       	nop
		if (conunerEnabled && currentSeconds != lastSeconds)
		{
			secondsTotal += 1;
		}

		lastSeconds = currentSeconds;
     8ba:	ef 2c       	mov	r14, r15
     8bc:	a0 cf       	rjmp	.-192    	; 0x7fe <_Z9timerModev+0x38>

		displaySeconds(secondsTotal);
     8be:	c8 01       	movw	r24, r16
     8c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>

		if (conunerEnabled)
		{
			if (secondsTotal == alarmTime)
     8c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	80 17       	cp	r24, r16
     8cc:	91 07       	cpc	r25, r17
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <_Z9timerModev+0x10c>
     8d0:	a8 cf       	rjmp	.-176    	; 0x822 <_Z9timerModev+0x5c>
     8d2:	a3 cf       	rjmp	.-186    	; 0x81a <_Z9timerModev+0x54>
			secondsTotal += 1;
		}

		lastSeconds = currentSeconds;

		displaySeconds(secondsTotal);
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
     8da:	ca cf       	rjmp	.-108    	; 0x870 <_Z9timerModev+0xaa>
			}
		}

		_delay_ms(1);
	}
}
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	63 96       	adiw	r28, 0x13	; 19
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	08 95       	ret

000008fe <_Z6dsModev>:
			opacity = 0;
	}
}

uint8_t dsMode()
{
     8fe:	3f 92       	push	r3
     900:	4f 92       	push	r4
     902:	5f 92       	push	r5
     904:	6f 92       	push	r6
     906:	7f 92       	push	r7
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	29 97       	sbiw	r28, 0x09	; 9
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     930:	e6 e1       	ldi	r30, 0x16	; 22
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     938:	8d e2       	ldi	r24, 0x2D	; 45
     93a:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     93c:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     93e:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     940:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     942:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     944:	e1 2c       	mov	r14, r1
     946:	f1 2c       	mov	r15, r1
			else
			{
				screen_arr[3] = -1;
			}

			screen_arr[0] = ((temper & 0x0F) * 10) / 16;
     948:	6f 01       	movw	r12, r30
			{
				screen_arr[3] = temper / 100;
				temper %= 100;
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
     94a:	0f 2e       	mov	r0, r31
     94c:	fa e0       	ldi	r31, 0x0A	; 10
     94e:	af 2e       	mov	r10, r31
     950:	b1 2c       	mov	r11, r1
     952:	f0 2d       	mov	r31, r0
			if (temper >= 100)
			{
				screen_arr[3] = temper / 100;
				temper %= 100;
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
     954:	44 24       	eor	r4, r4
     956:	4a 94       	dec	r4
			screen_arr[0] = ((temper & 0x0F) * 10) / 16;

			temper >>= 4;
			if (temper >= 100)
			{
				screen_arr[3] = temper / 100;
     958:	0f 2e       	mov	r0, r31
     95a:	f4 e6       	ldi	r31, 0x64	; 100
     95c:	8f 2e       	mov	r8, r31
     95e:	91 2c       	mov	r9, r1
     960:	f0 2d       	mov	r31, r0
			temper <<= 8;
			temper |= temperatureArr[0];

			if (temper < 0)
			{
				screen_arr[3] = '-';
     962:	0f 2e       	mov	r0, r31
     964:	fd e2       	ldi	r31, 0x2D	; 45
     966:	3f 2e       	mov	r3, r31
     968:	f0 2d       	mov	r31, r0
				temper *= -1;
				temper += 1;
     96a:	66 24       	eor	r6, r6
     96c:	63 94       	inc	r6
     96e:	71 2c       	mov	r7, r1
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
		_delay_ms(1);
		if (inner_counter <= 1000)
			inner_counter += 1;
		else
		{
			inner_counter = 0;
     972:	e1 2c       	mov	r14, r1
     974:	f1 2c       	mov	r15, r1
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while (true)
	{
		if (inner_counter == 0)
     976:	e1 14       	cp	r14, r1
     978:	f1 04       	cpc	r15, r1
     97a:	79 f4       	brne	.+30     	; 0x99a <__stack+0x9b>
		{
			ReadTemperature_StartConvert(&PORTD, &DDRD, &PIND, PORTD2);
     97c:	22 e0       	ldi	r18, 0x02	; 2
     97e:	49 e2       	ldi	r20, 0x29	; 41
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	6a e2       	ldi	r22, 0x2A	; 42
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8b e2       	ldi	r24, 0x2B	; 43
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     98e:	78 94       	sei
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
		}

		uint8_t key = keyChecker();
     990:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     994:	81 11       	cpse	r24, r1
     996:	68 c0       	rjmp	.+208    	; 0xa68 <__stack+0x169>
     998:	8c c0       	rjmp	.+280    	; 0xab2 <__stack+0x1b3>
		if (inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD, &DDRD, &PIND, PORTD2);
			sei();
		}
		if (inner_counter == 1000)
     99a:	88 ee       	ldi	r24, 0xE8	; 232
     99c:	e8 16       	cp	r14, r24
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	f8 06       	cpc	r15, r24
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	5d c0       	rjmp	.+186    	; 0xa60 <__stack+0x161>
		{
			ReadTemperatureArr(&PORTD, &DDRD, &PIND, PIND2, temperatureArr);
     9a6:	8e 01       	movw	r16, r28
     9a8:	0f 5f       	subi	r16, 0xFF	; 255
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	22 e0       	ldi	r18, 0x02	; 2
     9ae:	49 e2       	ldi	r20, 0x29	; 41
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	6a e2       	ldi	r22, 0x2A	; 42
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     9be:	2a 81       	ldd	r18, Y+2	; 0x02
     9c0:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     9c2:	32 2f       	mov	r19, r18
     9c4:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	28 2b       	or	r18, r24

			if (temper < 0)
     9ca:	33 23       	and	r19, r19
     9cc:	3c f4       	brge	.+14     	; 0x9dc <__stack+0xdd>
			{
				screen_arr[3] = '-';
     9ce:	f6 01       	movw	r30, r12
     9d0:	33 82       	std	Z+3, r3	; 0x03
				temper *= -1;
				temper += 1;
     9d2:	c3 01       	movw	r24, r6
     9d4:	82 1b       	sub	r24, r18
     9d6:	93 0b       	sbc	r25, r19
     9d8:	9c 01       	movw	r18, r24
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
			}
			else
			{
				screen_arr[3] = -1;
     9dc:	f6 01       	movw	r30, r12
     9de:	43 82       	std	Z+3, r4	; 0x03
			}

			screen_arr[0] = ((temper & 0x0F) * 10) / 16;
     9e0:	c9 01       	movw	r24, r18
     9e2:	8f 70       	andi	r24, 0x0F	; 15
     9e4:	99 27       	eor	r25, r25
     9e6:	ac 01       	movw	r20, r24
     9e8:	44 0f       	add	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	84 0f       	add	r24, r20
     9fa:	95 1f       	adc	r25, r21
     9fc:	95 95       	asr	r25
     9fe:	87 95       	ror	r24
     a00:	95 95       	asr	r25
     a02:	87 95       	ror	r24
     a04:	95 95       	asr	r25
     a06:	87 95       	ror	r24
     a08:	95 95       	asr	r25
     a0a:	87 95       	ror	r24
     a0c:	f6 01       	movw	r30, r12
     a0e:	80 83       	st	Z, r24

			temper >>= 4;
     a10:	35 95       	asr	r19
     a12:	27 95       	ror	r18
     a14:	35 95       	asr	r19
     a16:	27 95       	ror	r18
     a18:	35 95       	asr	r19
     a1a:	27 95       	ror	r18
     a1c:	35 95       	asr	r19
     a1e:	27 95       	ror	r18
			if (temper >= 100)
     a20:	24 36       	cpi	r18, 0x64	; 100
     a22:	31 05       	cpc	r19, r1
     a24:	3c f0       	brlt	.+14     	; 0xa34 <__stack+0x135>
			{
				screen_arr[3] = temper / 100;
     a26:	c9 01       	movw	r24, r18
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
     a2e:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     a30:	28 2f       	mov	r18, r24
     a32:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
     a34:	c9 01       	movw	r24, r18
     a36:	09 96       	adiw	r24, 0x09	; 9
     a38:	43 97       	sbiw	r24, 0x13	; 19
     a3a:	28 f0       	brcs	.+10     	; 0xa46 <__stack+0x147>
     a3c:	c9 01       	movw	r24, r18
     a3e:	b5 01       	movw	r22, r10
     a40:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <__stack+0x149>
     a46:	64 2d       	mov	r22, r4
     a48:	f6 01       	movw	r30, r12
     a4a:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper % 10;
     a4c:	c9 01       	movw	r24, r18
     a4e:	b5 01       	movw	r22, r10
     a50:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
     a54:	81 83       	std	Z+1, r24	; 0x01
		}

		uint8_t key = keyChecker();
     a56:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     a5a:	81 11       	cpse	r24, r1
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <__stack+0x169>
     a5e:	22 c0       	rjmp	.+68     	; 0xaa4 <__stack+0x1a5>
			}
			screen_arr[2] = (temper / 10) ? (temper / 10) : -1;
			screen_arr[1] = temper % 10;
		}

		uint8_t key = keyChecker();
     a60:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     a64:	88 23       	and	r24, r24
     a66:	21 f0       	breq	.+8      	; 0xa70 <__stack+0x171>
		{
			if (key == 1)
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	c1 f0       	breq	.+48     	; 0xa9c <__stack+0x19d>
				return 2;

			if (key == 2)
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	c1 f0       	breq	.+48     	; 0xaa0 <__stack+0x1a1>
     a70:	8f ec       	ldi	r24, 0xCF	; 207
     a72:	97 e0       	ldi	r25, 0x07	; 7
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <__stack+0x175>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <__stack+0x17b>
     a7a:	00 00       	nop
				// short press button 2
				return 5;
			}
		}
		_delay_ms(1);
		if (inner_counter <= 1000)
     a7c:	99 ee       	ldi	r25, 0xE9	; 233
     a7e:	e9 16       	cp	r14, r25
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	f9 06       	cpc	r15, r25
     a84:	20 f4       	brcc	.+8      	; 0xa8e <__stack+0x18f>
			inner_counter += 1;
     a86:	ef ef       	ldi	r30, 0xFF	; 255
     a88:	ee 1a       	sub	r14, r30
     a8a:	fe 0a       	sbc	r15, r30
     a8c:	74 cf       	rjmp	.-280    	; 0x976 <__stack+0x77>
		else
		{
			inner_counter = 0;
			exit_counter += 1;
     a8e:	53 94       	inc	r5
			if (exit_counter > 7)
     a90:	f7 e0       	ldi	r31, 0x07	; 7
     a92:	f5 15       	cp	r31, r5
     a94:	08 f0       	brcs	.+2      	; 0xa98 <__stack+0x199>
     a96:	6d cf       	rjmp	.-294    	; 0x972 <__stack+0x73>
				return 0;
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	12 c0       	rjmp	.+36     	; 0xac0 <__stack+0x1c1>

		uint8_t key = keyChecker();
		if (key)
		{
			if (key == 1)
				return 2;
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	10 c0       	rjmp	.+32     	; 0xac0 <__stack+0x1c1>

			if (key == 2)
			{
				// short press button 2
				return 5;
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	0e c0       	rjmp	.+28     	; 0xac0 <__stack+0x1c1>
     aa4:	8f ec       	ldi	r24, 0xCF	; 207
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <__stack+0x1a9>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <__stack+0x1af>
     aae:	00 00       	nop
     ab0:	ea cf       	rjmp	.-44     	; 0xa86 <__stack+0x187>
     ab2:	ef ec       	ldi	r30, 0xCF	; 207
     ab4:	f7 e0       	ldi	r31, 0x07	; 7
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <__stack+0x1b7>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <__stack+0x1bd>
     abc:	00 00       	nop
     abe:	e3 cf       	rjmp	.-58     	; 0xa86 <__stack+0x187>
			exit_counter += 1;
			if (exit_counter > 7)
				return 0;
		}
	}
}
     ac0:	29 96       	adiw	r28, 0x09	; 9
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	08 95       	ret

00000af0 <_Z7acbModev>:

uint8_t acbMode()
{
     af0:	3f 92       	push	r3
     af2:	4f 92       	push	r4
     af4:	5f 92       	push	r5
     af6:	6f 92       	push	r6
     af8:	7f 92       	push	r7
     afa:	8f 92       	push	r8
     afc:	9f 92       	push	r9
     afe:	af 92       	push	r10
     b00:	bf 92       	push	r11
     b02:	cf 92       	push	r12
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
	screen_arr[4] = 1;
     b12:	e6 e1       	ldi	r30, 0x16	; 22
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 'u';
     b1a:	85 e7       	ldi	r24, 0x75	; 117
     b1c:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = -1;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = -1;
     b22:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = -1;
     b24:	80 83       	st	Z, r24
	sei();
     b26:	78 94       	sei
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     b28:	ec e7       	ldi	r30, 0x7C	; 124
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     b32:	80 81       	ld	r24, Z
     b34:	80 7f       	andi	r24, 0xF0	; 240
     b36:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     b38:	80 81       	ld	r24, Z
     b3a:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     b3c:	ea e7       	ldi	r30, 0x7A	; 122
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	80 64       	ori	r24, 0x40	; 64
     b44:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     b46:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     b4a:	88 23       	and	r24, r24
     b4c:	e1 f3       	breq	.-8      	; 0xb46 <_Z7acbModev+0x56>
		Voltage = CalculateVoltage(Data);
     b4e:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     b52:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
     b5e:	2a ea       	ldi	r18, 0xAA	; 170
     b60:	31 ef       	ldi	r19, 0xF1	; 241
     b62:	44 e9       	ldi	r20, 0x94	; 148
     b64:	51 e4       	ldi	r21, 0x41	; 65
     b66:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3>
     b6a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adcOb+0x4>
     b6e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adcOb+0x5>
     b72:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adcOb+0x6>
     b76:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adcOb+0x7>
		DataReady = false;
     b7a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
     b7e:	8f e1       	ldi	r24, 0x1F	; 31
     b80:	9e e4       	ldi	r25, 0x4E	; 78
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <_Z7acbModev+0x92>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <_Z7acbModev+0x98>
     b88:	00 00       	nop
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     b8a:	ec e7       	ldi	r30, 0x7C	; 124
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 70       	andi	r24, 0x0F	; 15
     b92:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     b94:	80 81       	ld	r24, Z
     b96:	80 7f       	andi	r24, 0xF0	; 240
     b98:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     b9a:	80 81       	ld	r24, Z
     b9c:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     b9e:	ea e7       	ldi	r30, 0x7A	; 122
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 64       	ori	r24, 0x40	; 64
     ba6:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     ba8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     bac:	88 23       	and	r24, r24
     bae:	e1 f3       	breq	.-8      	; 0xba8 <_Z7acbModev+0xb8>
		Voltage = CalculateVoltage(Data);
     bb0:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     bb4:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
     bc0:	2a ea       	ldi	r18, 0xAA	; 170
     bc2:	31 ef       	ldi	r19, 0xF1	; 241
     bc4:	44 e9       	ldi	r20, 0x94	; 148
     bc6:	51 e4       	ldi	r21, 0x41	; 65
     bc8:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     bd0:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adcOb+0x4>
     bd4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adcOb+0x5>
     bd8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adcOb+0x6>
     bdc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adcOb+0x7>
		DataReady = false;
     be0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
	uint16_t exitCouter = 0;
	adcOb.MesureVoltage(PORTC0);
	_delay_ms(10);
	adcOb.MesureVoltage(PORTC0);
	screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     be4:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
     be8:	cd ec       	ldi	r28, 0xCD	; 205
     bea:	6c 9f       	mul	r22, r28
     bec:	81 2d       	mov	r24, r1
     bee:	11 24       	eor	r1, r1
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	86 95       	lsr	r24
     bf6:	06 e1       	ldi	r16, 0x16	; 22
     bf8:	11 e0       	ldi	r17, 0x01	; 1
     bfa:	f8 01       	movw	r30, r16
     bfc:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
     bfe:	88 0f       	add	r24, r24
     c00:	98 2f       	mov	r25, r24
     c02:	99 0f       	add	r25, r25
     c04:	99 0f       	add	r25, r25
     c06:	89 0f       	add	r24, r25
     c08:	68 1b       	sub	r22, r24
     c0a:	61 83       	std	Z+1, r22	; 0x01
	screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e2       	ldi	r20, 0x20	; 32
     c12:	51 e4       	ldi	r21, 0x41	; 65
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
     c1c:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
     c20:	6c 9f       	mul	r22, r28
     c22:	81 2d       	mov	r24, r1
     c24:	11 24       	eor	r1, r1
     c26:	86 95       	lsr	r24
     c28:	86 95       	lsr	r24
     c2a:	86 95       	lsr	r24
     c2c:	88 0f       	add	r24, r24
     c2e:	98 2f       	mov	r25, r24
     c30:	99 0f       	add	r25, r25
     c32:	99 0f       	add	r25, r25
     c34:	89 0f       	add	r24, r25
     c36:	68 1b       	sub	r22, r24
     c38:	f8 01       	movw	r30, r16
     c3a:	60 83       	st	Z, r22
	screen_arr[3] = 'u';
	screen_arr[2] = -1;
	screen_arr[1] = -1;
	screen_arr[0] = -1;
	sei();
	uint16_t exitCouter = 0;
     c3c:	c0 e0       	ldi	r28, 0x00	; 0
     c3e:	d0 e0       	ldi	r29, 0x00	; 0
				return 0;
			//if (key == 2) return 3;
		}
		_delay_ms(1);
		exitCouter += 1;
		if (exitCouter % 1000 == 0)
     c40:	0f 2e       	mov	r0, r31
     c42:	f8 ee       	ldi	r31, 0xE8	; 232
     c44:	ef 2e       	mov	r14, r31
     c46:	f3 e0       	ldi	r31, 0x03	; 3
     c48:	ff 2e       	mov	r15, r31
     c4a:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     c4c:	0c e7       	ldi	r16, 0x7C	; 124
     c4e:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     c50:	0f 2e       	mov	r0, r31
     c52:	fa e7       	ldi	r31, 0x7A	; 122
     c54:	af 2e       	mov	r10, r31
     c56:	b1 2c       	mov	r11, r1
     c58:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     c5a:	0f 2e       	mov	r0, r31
     c5c:	fe e0       	ldi	r31, 0x0E	; 14
     c5e:	8f 2e       	mov	r8, r31
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	9f 2e       	mov	r9, r31
     c64:	f0 2d       	mov	r31, r0
		{
			//Do it every second
			adcOb.MesureVoltage(PORTC0);
			_delay_ms(1);
			screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     c66:	0f 2e       	mov	r0, r31
     c68:	fd ec       	ldi	r31, 0xCD	; 205
     c6a:	3f 2e       	mov	r3, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	6f 01       	movw	r12, r30
	screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
	screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
	while (true)
	{

		uint8_t key = keyChecker();
     c70:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
		{
			if (key == 1)
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	09 f4       	brne	.+2      	; 0xc7a <_Z7acbModev+0x18a>
     c78:	83 c0       	rjmp	.+262    	; 0xd80 <_Z7acbModev+0x290>
     c7a:	8f ec       	ldi	r24, 0xCF	; 207
     c7c:	97 e0       	ldi	r25, 0x07	; 7
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <_Z7acbModev+0x18e>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <_Z7acbModev+0x194>
     c84:	00 00       	nop
				return 0;
			//if (key == 2) return 3;
		}
		_delay_ms(1);
		exitCouter += 1;
     c86:	21 96       	adiw	r28, 0x01	; 1
		if (exitCouter % 1000 == 0)
     c88:	9e 01       	movw	r18, r28
     c8a:	36 95       	lsr	r19
     c8c:	27 95       	ror	r18
     c8e:	36 95       	lsr	r19
     c90:	27 95       	ror	r18
     c92:	36 95       	lsr	r19
     c94:	27 95       	ror	r18
     c96:	a5 ec       	ldi	r26, 0xC5	; 197
     c98:	b0 e2       	ldi	r27, 0x20	; 32
     c9a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
     c9e:	92 95       	swap	r25
     ca0:	82 95       	swap	r24
     ca2:	8f 70       	andi	r24, 0x0F	; 15
     ca4:	89 27       	eor	r24, r25
     ca6:	9f 70       	andi	r25, 0x0F	; 15
     ca8:	89 27       	eor	r24, r25
     caa:	8e 9d       	mul	r24, r14
     cac:	90 01       	movw	r18, r0
     cae:	8f 9d       	mul	r24, r15
     cb0:	30 0d       	add	r19, r0
     cb2:	9e 9d       	mul	r25, r14
     cb4:	30 0d       	add	r19, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	c2 17       	cp	r28, r18
     cba:	d3 07       	cpc	r29, r19
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <_Z7acbModev+0x1d0>
     cbe:	5b c0       	rjmp	.+182    	; 0xd76 <_Z7acbModev+0x286>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 70       	andi	r24, 0x0F	; 15
     cc6:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     cc8:	80 81       	ld	r24, Z
     cca:	80 7f       	andi	r24, 0xF0	; 240
     ccc:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     cce:	80 81       	ld	r24, Z
     cd0:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     cd2:	f5 01       	movw	r30, r10
     cd4:	80 81       	ld	r24, Z
     cd6:	80 64       	ori	r24, 0x40	; 64
     cd8:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     cda:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     cde:	88 23       	and	r24, r24
     ce0:	e1 f3       	breq	.-8      	; 0xcda <_Z7acbModev+0x1ea>
		Voltage = CalculateVoltage(Data);
     ce2:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     ce6:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
     cf2:	2a ea       	ldi	r18, 0xAA	; 170
     cf4:	31 ef       	ldi	r19, 0xF1	; 241
     cf6:	44 e9       	ldi	r20, 0x94	; 148
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3>
     cfe:	f4 01       	movw	r30, r8
     d00:	64 83       	std	Z+4, r22	; 0x04
     d02:	75 83       	std	Z+5, r23	; 0x05
     d04:	86 83       	std	Z+6, r24	; 0x06
     d06:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     d08:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
     d0c:	8f ec       	ldi	r24, 0xCF	; 207
     d0e:	97 e0       	ldi	r25, 0x07	; 7
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <_Z7acbModev+0x220>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <_Z7acbModev+0x226>
     d16:	00 00       	nop
		{
			//Do it every second
			adcOb.MesureVoltage(PORTC0);
			_delay_ms(1);
			screen_arr[2] = (uint8_t)adcOb.Voltage / 10;
     d18:	44 80       	ldd	r4, Z+4	; 0x04
     d1a:	55 80       	ldd	r5, Z+5	; 0x05
     d1c:	66 80       	ldd	r6, Z+6	; 0x06
     d1e:	77 80       	ldd	r7, Z+7	; 0x07
     d20:	c3 01       	movw	r24, r6
     d22:	b2 01       	movw	r22, r4
     d24:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
     d28:	63 9d       	mul	r22, r3
     d2a:	81 2d       	mov	r24, r1
     d2c:	11 24       	eor	r1, r1
     d2e:	86 95       	lsr	r24
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	f6 01       	movw	r30, r12
     d36:	82 83       	std	Z+2, r24	; 0x02
			screen_arr[1] = (uint8_t)adcOb.Voltage % 10;
     d38:	88 0f       	add	r24, r24
     d3a:	98 2f       	mov	r25, r24
     d3c:	99 0f       	add	r25, r25
     d3e:	99 0f       	add	r25, r25
     d40:	89 0f       	add	r24, r25
     d42:	68 1b       	sub	r22, r24
     d44:	61 83       	std	Z+1, r22	; 0x01
			screen_arr[0] = ((uint8_t)(adcOb.Voltage * 10)) % 10;
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	c3 01       	movw	r24, r6
     d50:	b2 01       	movw	r22, r4
     d52:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
     d56:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
     d5a:	63 9d       	mul	r22, r3
     d5c:	81 2d       	mov	r24, r1
     d5e:	11 24       	eor	r1, r1
     d60:	86 95       	lsr	r24
     d62:	86 95       	lsr	r24
     d64:	86 95       	lsr	r24
     d66:	88 0f       	add	r24, r24
     d68:	98 2f       	mov	r25, r24
     d6a:	99 0f       	add	r25, r25
     d6c:	99 0f       	add	r25, r25
     d6e:	89 0f       	add	r24, r25
     d70:	68 1b       	sub	r22, r24
     d72:	f6 01       	movw	r30, r12
     d74:	60 83       	st	Z, r22
		}
		if (exitCouter > 7000)
     d76:	c9 35       	cpi	r28, 0x59	; 89
     d78:	fb e1       	ldi	r31, 0x1B	; 27
     d7a:	df 07       	cpc	r29, r31
     d7c:	09 f0       	breq	.+2      	; 0xd80 <_Z7acbModev+0x290>
     d7e:	78 cf       	rjmp	.-272    	; 0xc70 <_Z7acbModev+0x180>
			return 0;
	}
}
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	7f 90       	pop	r7
     d9c:	6f 90       	pop	r6
     d9e:	5f 90       	pop	r5
     da0:	4f 90       	pop	r4
     da2:	3f 90       	pop	r3
     da4:	08 95       	ret

00000da6 <_Z12setupMinutesv>:

uint8_t setupMinutes()
{
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr[1];
     db8:	e6 e1       	ldi	r30, 0x16	; 22
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	90 81       	ld	r25, Z
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	88 0f       	add	r24, r24
     dc2:	18 2f       	mov	r17, r24
     dc4:	11 0f       	add	r17, r17
     dc6:	11 0f       	add	r17, r17
     dc8:	81 0f       	add	r24, r17
     dca:	18 2f       	mov	r17, r24
     dcc:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     dce:	c0 e0       	ldi	r28, 0x00	; 0
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
		if (key)
		{
			if (key == 1)
			{
				minutes += 1;
				minutes %= 60;
     dd2:	0f 2e       	mov	r0, r31
     dd4:	f9 e8       	ldi	r31, 0x89	; 137
     dd6:	bf 2e       	mov	r11, r31
     dd8:	f0 2d       	mov	r31, r0
     dda:	0f 2e       	mov	r0, r31
     ddc:	fc e3       	ldi	r31, 0x3C	; 60
     dde:	cf 2e       	mov	r12, r31
     de0:	f0 2d       	mov	r31, r0
			screen_arr[1] = minutes / 10;
			screen_arr[0] = minutes % 10;
		}
		else
		{
			screen_arr[1] = -1;
     de2:	7f 01       	movw	r14, r30
     de4:	0f ef       	ldi	r16, 0xFF	; 255
				return 4;
			}
		}
		if (blinker > 250)
		{
			screen_arr[1] = minutes / 10;
     de6:	0f 2e       	mov	r0, r31
     de8:	fd ec       	ldi	r31, 0xCD	; 205
     dea:	df 2e       	mov	r13, r31
     dec:	f0 2d       	mov	r31, r0
{
	uint8_t minutes = screen_arr[0] + 10 * screen_arr[1];
	uint16_t blinker = 0;
	while (true)
	{
		uint8_t key = keyChecker();
     dee:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     df2:	88 23       	and	r24, r24
     df4:	81 f0       	breq	.+32     	; 0xe16 <_Z12setupMinutesv+0x70>
		{
			if (key == 1)
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	61 f4       	brne	.+24     	; 0xe12 <_Z12setupMinutesv+0x6c>
			{
				minutes += 1;
     dfa:	81 0f       	add	r24, r17
				minutes %= 60;
     dfc:	8b 9d       	mul	r24, r11
     dfe:	11 2d       	mov	r17, r1
     e00:	11 24       	eor	r1, r1
     e02:	12 95       	swap	r17
     e04:	16 95       	lsr	r17
     e06:	17 70       	andi	r17, 0x07	; 7
     e08:	1c 9d       	mul	r17, r12
     e0a:	80 19       	sub	r24, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	18 2f       	mov	r17, r24
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <_Z12setupMinutesv+0x70>
			}
			if (key == 2)
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	41 f1       	breq	.+80     	; 0xe66 <_Z12setupMinutesv+0xc0>
				screen_arr[1] = minutes / 10;
				screen_arr[0] = minutes % 10;
				return 4;
			}
		}
		if (blinker > 250)
     e16:	cb 3f       	cpi	r28, 0xFB	; 251
     e18:	d1 05       	cpc	r29, r1
     e1a:	98 f0       	brcs	.+38     	; 0xe42 <_Z12setupMinutesv+0x9c>
		{
			screen_arr[1] = minutes / 10;
     e1c:	1d 9d       	mul	r17, r13
     e1e:	81 2d       	mov	r24, r1
     e20:	11 24       	eor	r1, r1
     e22:	86 95       	lsr	r24
     e24:	86 95       	lsr	r24
     e26:	86 95       	lsr	r24
     e28:	f7 01       	movw	r30, r14
     e2a:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[0] = minutes % 10;
     e2c:	88 0f       	add	r24, r24
     e2e:	98 2f       	mov	r25, r24
     e30:	99 0f       	add	r25, r25
     e32:	99 0f       	add	r25, r25
     e34:	89 0f       	add	r24, r25
     e36:	f1 2f       	mov	r31, r17
     e38:	f8 1b       	sub	r31, r24
     e3a:	8f 2f       	mov	r24, r31
     e3c:	f7 01       	movw	r30, r14
     e3e:	80 83       	st	Z, r24
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <_Z12setupMinutesv+0xa2>
		}
		else
		{
			screen_arr[1] = -1;
     e42:	f7 01       	movw	r30, r14
     e44:	01 83       	std	Z+1, r16	; 0x01
			screen_arr[0] = -1;
     e46:	00 83       	st	Z, r16
		}
		if (blinker < 500)
     e48:	c4 3f       	cpi	r28, 0xF4	; 244
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	df 07       	cpc	r29, r31
     e4e:	10 f4       	brcc	.+4      	; 0xe54 <_Z12setupMinutesv+0xae>
		{
			blinker += 1;
     e50:	21 96       	adiw	r28, 0x01	; 1
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <_Z12setupMinutesv+0xb2>
		}
		else
		{
			blinker = 0;
     e54:	c0 e0       	ldi	r28, 0x00	; 0
     e56:	d0 e0       	ldi	r29, 0x00	; 0
     e58:	8f ec       	ldi	r24, 0xCF	; 207
     e5a:	97 e0       	ldi	r25, 0x07	; 7
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <_Z12setupMinutesv+0xb6>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <_Z12setupMinutesv+0xbc>
     e62:	00 00       	nop
     e64:	c4 cf       	rjmp	.-120    	; 0xdee <_Z12setupMinutesv+0x48>
				minutes += 1;
				minutes %= 60;
			}
			if (key == 2)
			{
				rtcSendMinutes(minutes);
     e66:	81 2f       	mov	r24, r17
     e68:	0e 94 98 0a 	call	0x1530	; 0x1530 <_Z14rtcSendMinutesh>
				screen_arr[1] = minutes / 10;
     e6c:	8d ec       	ldi	r24, 0xCD	; 205
     e6e:	18 9f       	mul	r17, r24
     e70:	81 2d       	mov	r24, r1
     e72:	11 24       	eor	r1, r1
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	e6 e1       	ldi	r30, 0x16	; 22
     e7c:	f1 e0       	ldi	r31, 0x01	; 1
     e7e:	81 83       	std	Z+1, r24	; 0x01
				screen_arr[0] = minutes % 10;
     e80:	88 0f       	add	r24, r24
     e82:	98 2f       	mov	r25, r24
     e84:	99 0f       	add	r25, r25
     e86:	99 0f       	add	r25, r25
     e88:	89 0f       	add	r24, r25
     e8a:	18 1b       	sub	r17, r24
     e8c:	10 83       	st	Z, r17
		{
			blinker = 0;
		}
		_delay_ms(1);
	}
}
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	08 95       	ret

00000ea4 <_Z10setupHoursv>:
uint8_t setupHours()
{
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr[3];
     eb6:	e6 e1       	ldi	r30, 0x16	; 22
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	99 0f       	add	r25, r25
     ec0:	19 2f       	mov	r17, r25
     ec2:	11 0f       	add	r17, r17
     ec4:	11 0f       	add	r17, r17
     ec6:	19 0f       	add	r17, r25
     ec8:	18 0f       	add	r17, r24
	uint16_t blinker = 0;
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
		if (key)
		{
			if (key == 1)
			{
				hours += 1;
				hours %= 24;
     ece:	0f 2e       	mov	r0, r31
     ed0:	fb ea       	ldi	r31, 0xAB	; 171
     ed2:	bf 2e       	mov	r11, r31
     ed4:	f0 2d       	mov	r31, r0
     ed6:	0f 2e       	mov	r0, r31
     ed8:	f8 e1       	ldi	r31, 0x18	; 24
     eda:	cf 2e       	mov	r12, r31
     edc:	f0 2d       	mov	r31, r0
			screen_arr[3] = hours / 10;
			screen_arr[2] = hours % 10;
		}
		else
		{
			screen_arr[3] = -1;
     ede:	7f 01       	movw	r14, r30
     ee0:	0f ef       	ldi	r16, 0xFF	; 255
				return 6;
			}
		}
		if (blinker > 250)
		{
			screen_arr[3] = hours / 10;
     ee2:	0f 2e       	mov	r0, r31
     ee4:	fd ec       	ldi	r31, 0xCD	; 205
     ee6:	df 2e       	mov	r13, r31
     ee8:	f0 2d       	mov	r31, r0
{
	uint8_t hours = screen_arr[2] + 10 * screen_arr[3];
	uint16_t blinker = 0;
	while (true)
	{
		uint8_t key = keyChecker();
     eea:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
     eee:	88 23       	and	r24, r24
     ef0:	79 f0       	breq	.+30     	; 0xf10 <_Z10setupHoursv+0x6c>
		{
			if (key == 1)
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	59 f4       	brne	.+22     	; 0xf0c <_Z10setupHoursv+0x68>
			{
				hours += 1;
     ef6:	81 0f       	add	r24, r17
				hours %= 24;
     ef8:	8b 9d       	mul	r24, r11
     efa:	11 2d       	mov	r17, r1
     efc:	11 24       	eor	r1, r1
     efe:	12 95       	swap	r17
     f00:	1f 70       	andi	r17, 0x0F	; 15
     f02:	1c 9d       	mul	r17, r12
     f04:	80 19       	sub	r24, r0
     f06:	11 24       	eor	r1, r1
     f08:	18 2f       	mov	r17, r24
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <_Z10setupHoursv+0x6c>
			}
			if (key == 2)
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	41 f1       	breq	.+80     	; 0xf60 <_Z10setupHoursv+0xbc>
				rtcSendHours(hours);

				return 6;
			}
		}
		if (blinker > 250)
     f10:	cb 3f       	cpi	r28, 0xFB	; 251
     f12:	d1 05       	cpc	r29, r1
     f14:	98 f0       	brcs	.+38     	; 0xf3c <_Z10setupHoursv+0x98>
		{
			screen_arr[3] = hours / 10;
     f16:	1d 9d       	mul	r17, r13
     f18:	81 2d       	mov	r24, r1
     f1a:	11 24       	eor	r1, r1
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	f7 01       	movw	r30, r14
     f24:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[2] = hours % 10;
     f26:	88 0f       	add	r24, r24
     f28:	98 2f       	mov	r25, r24
     f2a:	99 0f       	add	r25, r25
     f2c:	99 0f       	add	r25, r25
     f2e:	89 0f       	add	r24, r25
     f30:	f1 2f       	mov	r31, r17
     f32:	f8 1b       	sub	r31, r24
     f34:	8f 2f       	mov	r24, r31
     f36:	f7 01       	movw	r30, r14
     f38:	82 83       	std	Z+2, r24	; 0x02
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <_Z10setupHoursv+0x9e>
		}
		else
		{
			screen_arr[3] = -1;
     f3c:	f7 01       	movw	r30, r14
     f3e:	03 83       	std	Z+3, r16	; 0x03
			screen_arr[2] = -1;
     f40:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500)
     f42:	c4 3f       	cpi	r28, 0xF4	; 244
     f44:	f1 e0       	ldi	r31, 0x01	; 1
     f46:	df 07       	cpc	r29, r31
     f48:	10 f4       	brcc	.+4      	; 0xf4e <_Z10setupHoursv+0xaa>
		{
			blinker += 1;
     f4a:	21 96       	adiw	r28, 0x01	; 1
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <_Z10setupHoursv+0xae>
		}
		else
		{
			blinker = 0;
     f4e:	c0 e0       	ldi	r28, 0x00	; 0
     f50:	d0 e0       	ldi	r29, 0x00	; 0
     f52:	8f ec       	ldi	r24, 0xCF	; 207
     f54:	97 e0       	ldi	r25, 0x07	; 7
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <_Z10setupHoursv+0xb2>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <_Z10setupHoursv+0xb8>
     f5c:	00 00       	nop
     f5e:	c5 cf       	rjmp	.-118    	; 0xeea <_Z10setupHoursv+0x46>
				hours += 1;
				hours %= 24;
			}
			if (key == 2)
			{
				rtcSendHours(hours);
     f60:	81 2f       	mov	r24, r17
     f62:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <_Z12rtcSendHoursh>
		{
			blinker = 0;
		}
		_delay_ms(1);
	}
}
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	08 95       	ret

00000f7c <_Z14clrScreenArrayv>:

	return 0;
}
void clrScreenArray()
{
	screen_arr[0] = -1;
     f7c:	e6 e1       	ldi	r30, 0x16	; 22
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	80 83       	st	Z, r24
	screen_arr[1] = -1;
     f84:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2] = -1;
     f86:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3] = -1;
     f88:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4] = -1;
     f8a:	84 83       	std	Z+4, r24	; 0x04
     f8c:	08 95       	ret

00000f8e <_Z8rtcCyclev>:
		_delay_ms(1);
	}
}

uint8_t rtcCycle()
{
     f8e:	2f 92       	push	r2
     f90:	3f 92       	push	r3
     f92:	4f 92       	push	r4
     f94:	5f 92       	push	r5
     f96:	6f 92       	push	r6
     f98:	7f 92       	push	r7
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	67 97       	sbiw	r28, 0x17	; 23
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
	int8_t endLowEnergy = -1;
	static double adcAvg = 1023;

	uint8_t timeArr[0x13];

	bool powerGoodDelay = true;
     fc2:	55 24       	eor	r5, r5
     fc4:	53 94       	inc	r5
	}
}

uint8_t rtcCycle()
{
	int8_t startLowEnergy = -1;
     fc6:	bb 24       	eor	r11, r11
     fc8:	ba 94       	dec	r11
			{
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10;
				if (startLowEnergy == endLowEnergy)
				{
					clrScreenArray();
					powerGoodDelay = false;
     fca:	a1 2c       	mov	r10, r1
		}
		else
		{
			if (startLowEnergy == -1)
			{
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10 + POWERDELAY) % 60;
     fcc:	0f 2e       	mov	r0, r31
     fce:	fc e3       	ldi	r31, 0x3C	; 60
     fd0:	2f 2e       	mov	r2, r31
     fd2:	31 2c       	mov	r3, r1
     fd4:	f0 2d       	mov	r31, r0

		readTime(timeArr);

		if (powerGood || powerGoodDelay)
		{
			screen_arr[0] = timeArr[1] & 0x0F;
     fd6:	0f 2e       	mov	r0, r31
     fd8:	f6 e1       	ldi	r31, 0x16	; 22
     fda:	cf 2e       	mov	r12, r31
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	df 2e       	mov	r13, r31
     fe0:	f0 2d       	mov	r31, r0
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2; //Dot Point Position
     fe2:	68 94       	set
     fe4:	44 24       	eor	r4, r4
     fe6:	41 f8       	bld	r4, 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     fe8:	0c e7       	ldi	r16, 0x7C	; 124
     fea:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     fec:	0f 2e       	mov	r0, r31
     fee:	fa e7       	ldi	r31, 0x7A	; 122
     ff0:	8f 2e       	mov	r8, r31
     ff2:	91 2c       	mov	r9, r1
     ff4:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     ff6:	0f 2e       	mov	r0, r31
     ff8:	fe e0       	ldi	r31, 0x0E	; 14
     ffa:	6f 2e       	mov	r6, r31
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	7f 2e       	mov	r7, r31
    1000:	f0 2d       	mov	r31, r0

	bool powerGoodDelay = true;

	while (true)
	{
		bool powerGood = PIND & 1;
    1002:	89 b1       	in	r24, 0x09	; 9
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	f8 2e       	mov	r15, r24
		//bool powerGood = false;

		const uint8_t POWERDELAY = 5; //Delay Before the lights is off

		readTime(timeArr);
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	0e 94 26 0a 	call	0x144c	; 0x144c <_Z8readTimePh>

		if (powerGood || powerGoodDelay)
    1010:	f1 10       	cpse	r15, r1
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <_Z8rtcCyclev+0x8a>
    1014:	55 20       	and	r5, r5
    1016:	01 f1       	breq	.+64     	; 0x1058 <_Z8rtcCyclev+0xca>
		{
			screen_arr[0] = timeArr[1] & 0x0F;
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	98 2f       	mov	r25, r24
    101c:	9f 70       	andi	r25, 0x0F	; 15
    101e:	f6 01       	movw	r30, r12
    1020:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	95 95       	asr	r25
    102a:	87 95       	ror	r24
    102c:	95 95       	asr	r25
    102e:	87 95       	ror	r24
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	98 2f       	mov	r25, r24
    103a:	9f 70       	andi	r25, 0x0F	; 15
    103c:	92 83       	std	Z+2, r25	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	95 95       	asr	r25
    1042:	87 95       	ror	r24
    1044:	95 95       	asr	r25
    1046:	87 95       	ror	r24
    1048:	95 95       	asr	r25
    104a:	87 95       	ror	r24
    104c:	95 95       	asr	r25
    104e:	87 95       	ror	r24
    1050:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[4] = 2; //Dot Point Position
    1052:	44 82       	std	Z+4, r4	; 0x04
		}
		if (powerGood)
    1054:	f1 10       	cpse	r15, r1
    1056:	34 c0       	rjmp	.+104    	; 0x10c0 <_Z8rtcCyclev+0x132>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else
		{
			if (startLowEnergy == -1)
    1058:	ff ef       	ldi	r31, 0xFF	; 255
    105a:	bf 12       	cpse	r11, r31
    105c:	1f c0       	rjmp	.+62     	; 0x109c <_Z8rtcCyclev+0x10e>
			{
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10 + POWERDELAY) % 60;
    105e:	2a 81       	ldd	r18, Y+2	; 0x02
    1060:	82 2f       	mov	r24, r18
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	95 95       	asr	r25
    1066:	87 95       	ror	r24
    1068:	95 95       	asr	r25
    106a:	87 95       	ror	r24
    106c:	95 95       	asr	r25
    106e:	87 95       	ror	r24
    1070:	95 95       	asr	r25
    1072:	87 95       	ror	r24
    1074:	ac 01       	movw	r20, r24
    1076:	44 0f       	add	r20, r20
    1078:	55 1f       	adc	r21, r21
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	84 0f       	add	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	2f 70       	andi	r18, 0x0F	; 15
    108c:	82 0f       	add	r24, r18
    108e:	91 1d       	adc	r25, r1
    1090:	05 96       	adiw	r24, 0x05	; 5
    1092:	b1 01       	movw	r22, r2
    1094:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
    1098:	b8 2e       	mov	r11, r24
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <_Z8rtcCyclev+0x13a>
			}
			else
			{
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4) * 10;
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
				if (startLowEnergy == endLowEnergy)
    109e:	98 2f       	mov	r25, r24
    10a0:	96 95       	lsr	r25
    10a2:	96 95       	lsr	r25
    10a4:	96 95       	lsr	r25
    10a6:	9e 71       	andi	r25, 0x1E	; 30
    10a8:	29 2f       	mov	r18, r25
    10aa:	22 0f       	add	r18, r18
    10ac:	22 0f       	add	r18, r18
    10ae:	92 0f       	add	r25, r18
    10b0:	8f 70       	andi	r24, 0x0F	; 15
    10b2:	89 0f       	add	r24, r25
    10b4:	b8 12       	cpse	r11, r24
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <_Z8rtcCyclev+0x13a>
				{
					clrScreenArray();
    10b8:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z14clrScreenArrayv>
					powerGoodDelay = false;
    10bc:	5a 2c       	mov	r5, r10
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <_Z8rtcCyclev+0x13a>
		}
		if (powerGood)
		{
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
    10c0:	55 24       	eor	r5, r5
    10c2:	53 94       	inc	r5
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2; //Dot Point Position
		}
		if (powerGood)
		{
			startLowEnergy = -1;
    10c4:	bb 24       	eor	r11, r11
    10c6:	ba 94       	dec	r11
					powerGoodDelay = false;
				}
			}
		}

		uint8_t key = keyChecker();
    10c8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if (key)
    10cc:	88 23       	and	r24, r24
    10ce:	79 f0       	breq	.+30     	; 0x10ee <_Z8rtcCyclev+0x160>
		{
			if (key == 1)
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	39 f4       	brne	.+14     	; 0x10e2 <_Z8rtcCyclev+0x154>
			{
				// short press button 1
				if (!powerGoodDelay)
    10d4:	51 10       	cpse	r5, r1
    10d6:	83 c0       	rjmp	.+262    	; 0x11de <_Z8rtcCyclev+0x250>
				{
					powerGoodDelay = true;
    10d8:	55 24       	eor	r5, r5
    10da:	53 94       	inc	r5
					startLowEnergy = -1;
    10dc:	bb 24       	eor	r11, r11
    10de:	ba 94       	dec	r11
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <_Z8rtcCyclev+0x160>
				}
				else
					return 1;
			}

			if (key == 2)
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <_Z8rtcCyclev+0x15a>
    10e6:	7d c0       	rjmp	.+250    	; 0x11e2 <_Z8rtcCyclev+0x254>
			{
				// short press button 2
				return 5;
			}

			if (key == 3)
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	09 f4       	brne	.+2      	; 0x10ee <_Z8rtcCyclev+0x160>
    10ec:	7c c0       	rjmp	.+248    	; 0x11e6 <_Z8rtcCyclev+0x258>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
    10ee:	f8 01       	movw	r30, r16
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 70       	andi	r24, 0x0F	; 15
    10f4:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    10f6:	80 81       	ld	r24, Z
    10f8:	80 7f       	andi	r24, 0xF0	; 240
    10fa:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    10fc:	80 81       	ld	r24, Z
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
    1102:	f4 01       	movw	r30, r8
    1104:	80 81       	ld	r24, Z
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
    110a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
    110e:	88 23       	and	r24, r24
    1110:	e1 f3       	breq	.-8      	; 0x110a <_Z8rtcCyclev+0x17c>
		Voltage = CalculateVoltage(Data);
    1112:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
    1116:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
    1122:	2a ea       	ldi	r18, 0xAA	; 170
    1124:	31 ef       	ldi	r19, 0xF1	; 241
    1126:	44 e9       	ldi	r20, 0x94	; 148
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3>
    112e:	f3 01       	movw	r30, r6
    1130:	64 83       	std	Z+4, r22	; 0x04
    1132:	75 83       	std	Z+5, r23	; 0x05
    1134:	86 83       	std	Z+6, r24	; 0x06
    1136:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
    1138:	a0 92 1d 01 	sts	0x011D, r10	; 0x80011d <_ZN8AdcClass9DataReadyE>
		}
		adcOb.MesureVoltage(PORTC1);

		//Opacity Correction
		const double corrector = 1024;
		adcAvg = adcAvg * (corrector - 1) / corrector + (double)adcOb.Data / corrector;
    113c:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
    1140:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 ec       	ldi	r19, 0xC0	; 192
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1150:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1158:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    115c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5a e3       	ldi	r21, 0x3A	; 58
    1168:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
    116c:	6c 8b       	std	Y+20, r22	; 0x14
    116e:	7d 8b       	std	Y+21, r23	; 0x15
    1170:	8e 8b       	std	Y+22, r24	; 0x16
    1172:	9f 8b       	std	Y+23, r25	; 0x17
    1174:	b7 01       	movw	r22, r14
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5a e3       	ldi	r21, 0x3A	; 58
    1186:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	6c 89       	ldd	r22, Y+20	; 0x14
    1190:	7d 89       	ldd	r23, Y+21	; 0x15
    1192:	8e 89       	ldd	r24, Y+22	; 0x16
    1194:	9f 89       	ldd	r25, Y+23	; 0x17
    1196:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__addsf3>
    119a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    119e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    11a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    11a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		opacity = MAXGRADES - adcAvg / (1024 / (MAXGRADES + 1));
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5c e3       	ldi	r21, 0x3C	; 60
    11b2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e7       	ldi	r24, 0x70	; 112
    11c0:	91 e4       	ldi	r25, 0x41	; 65
    11c2:	0e 94 b7 0b 	call	0x176e	; 0x176e <__subsf3>
    11c6:	0e 94 96 0c 	call	0x192c	; 0x192c <__fixsfsi>
    11ca:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <opacity>
		if (opacity < 0)
    11ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <opacity>
    11d2:	88 23       	and	r24, r24
    11d4:	0c f0       	brlt	.+2      	; 0x11d8 <_Z8rtcCyclev+0x24a>
    11d6:	15 cf       	rjmp	.-470    	; 0x1002 <_Z8rtcCyclev+0x74>
			opacity = 0;
    11d8:	a0 92 05 01 	sts	0x0105, r10	; 0x800105 <opacity>
    11dc:	12 cf       	rjmp	.-476    	; 0x1002 <_Z8rtcCyclev+0x74>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else
					return 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <_Z8rtcCyclev+0x25a>
			}

			if (key == 2)
			{
				// short press button 2
				return 5;
    11e2:	85 e0       	ldi	r24, 0x05	; 5
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <_Z8rtcCyclev+0x25a>
			}

			if (key == 3)
			{
				// long press button 2
				return 3;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
		adcAvg = adcAvg * (corrector - 1) / corrector + (double)adcOb.Data / corrector;
		opacity = MAXGRADES - adcAvg / (1024 / (MAXGRADES + 1));
		if (opacity < 0)
			opacity = 0;
	}
}
    11e8:	67 96       	adiw	r28, 0x17	; 23
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	7f 90       	pop	r7
    120e:	6f 90       	pop	r6
    1210:	5f 90       	pop	r5
    1212:	4f 90       	pop	r4
    1214:	3f 90       	pop	r3
    1216:	2f 90       	pop	r2
    1218:	08 95       	ret

0000121a <main>:

int main(void)
{

	// initialize EEPROM
	if (eeprom_read_byte(EEP_TIMER_ALARM_TIME) == 0xFF)
    121a:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <EEP_TIMER_ALARM_TIME>
    121e:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <EEP_TIMER_ALARM_TIME+0x1>
    1222:	ce 01       	movw	r24, r28
    1224:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <eeprom_read_byte>
    1228:	8f 3f       	cpi	r24, 0xFF	; 255
    122a:	31 f4       	brne	.+12     	; 0x1238 <main+0x1e>
	{
		eeprom_write_byte(EEP_TIMER_ALARM_TIME, alarmTime);
    122c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <alarmTime>
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <eeprom_write_byte>
    1236:	02 c0       	rjmp	.+4      	; 0x123c <main+0x22>
	}
	else
	{
		alarmTime = eeprom_read_byte(EEP_TIMER_ALARM_TIME);
    1238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
	}

	uint8_t currentScreen = 0;

	DDRD &= ~(1 << 3 | 1 << PORTD4);	//Change direction to input
    123c:	8a b1       	in	r24, 0x0a	; 10
    123e:	87 7e       	andi	r24, 0xE7	; 231
    1240:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1 << PORTD3 | 1 << PORTD4; //Enable pull-up resistors
    1242:	8b b1       	in	r24, 0x0b	; 11
    1244:	88 61       	ori	r24, 0x18	; 24
    1246:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray(); //Start from blank screen
    1248:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
    124c:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z21EnableTimer0Interruptv>
	sei();
    1250:	78 94       	sei
	rtcInit();
    1252:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z7rtcInitv>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    1256:	ec e7       	ldi	r30, 0x7C	; 124
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 7f       	andi	r24, 0xF0	; 240
    125e:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    1260:	80 81       	ld	r24, Z
    1262:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1264:	ea e7       	ldi	r30, 0x7A	; 122
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 60       	ori	r24, 0x07	; 7
    126c:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
    126e:	80 81       	ld	r24, Z
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
    1274:	80 81       	ld	r24, Z
    1276:	80 68       	ori	r24, 0x80	; 128
    1278:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
    127a:	80 81       	ld	r24, Z
    127c:	80 64       	ori	r24, 0x40	; 64
    127e:	80 83       	st	Z, r24
	adcOb.Init();
	buzzer(false); // Turn off buzzer
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
	else
	{
		alarmTime = eeprom_read_byte(EEP_TIMER_ALARM_TIME);
	}

	uint8_t currentScreen = 0;
    1286:	80 e0       	ldi	r24, 0x00	; 0
	adcOb.Init();
	buzzer(false); // Turn off buzzer

	while (1)
	{
		switch (currentScreen)
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	87 30       	cpi	r24, 0x07	; 7
    128c:	91 05       	cpc	r25, r1
    128e:	d0 f4       	brcc	.+52     	; 0x12c4 <main+0xaa>
    1290:	fc 01       	movw	r30, r24
    1292:	ec 5c       	subi	r30, 0xCC	; 204
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__tablejump2__>
		{
		case 0:
			currentScreen = rtcCycle();
    129a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z8rtcCyclev>
			break;
    129e:	f4 cf       	rjmp	.-24     	; 0x1288 <main+0x6e>
		case 1:
			currentScreen = dsMode();
    12a0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z6dsModev>
			break;
    12a4:	f1 cf       	rjmp	.-30     	; 0x1288 <main+0x6e>
		case 2:
			currentScreen = acbMode();
    12a6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_Z7acbModev>
			break;
    12aa:	ee cf       	rjmp	.-36     	; 0x1288 <main+0x6e>
		case 3:
			currentScreen = setupMinutes();
    12ac:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z12setupMinutesv>
			break;
    12b0:	eb cf       	rjmp	.-42     	; 0x1288 <main+0x6e>
		case 4:
			currentScreen = setupHours();
    12b2:	0e 94 52 07 	call	0xea4	; 0xea4 <_Z10setupHoursv>
			break;
    12b6:	e8 cf       	rjmp	.-48     	; 0x1288 <main+0x6e>
		case 5:
			currentScreen = timerMode();
    12b8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z9timerModev>
			break;
    12bc:	e5 cf       	rjmp	.-54     	; 0x1288 <main+0x6e>
		case 6:
			currentScreen = setupTimer();
    12be:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z10setupTimerv>
			break;
    12c2:	e2 cf       	rjmp	.-60     	; 0x1288 <main+0x6e>
		default:
			currentScreen = rtcCycle();
    12c4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z8rtcCyclev>
			break;
    12c8:	df cf       	rjmp	.-66     	; 0x1288 <main+0x6e>

000012ca <_GLOBAL__sub_I_temperature_byte1>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    12d2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN8AdcClass4DataE>
		DataReady = false;
    12d6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
		Resistor = INFINITY;
    12da:	ee e0       	ldi	r30, 0x0E	; 14
    12dc:	f1 e0       	ldi	r31, 0x01	; 1
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e8       	ldi	r26, 0x80	; 128
    12e4:	bf e7       	ldi	r27, 0x7F	; 127
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
    12ee:	84 83       	std	Z+4, r24	; 0x04
    12f0:	95 83       	std	Z+5, r25	; 0x05
    12f2:	a6 83       	std	Z+6, r26	; 0x06
    12f4:	b7 83       	std	Z+7, r27	; 0x07
    12f6:	08 95       	ret

000012f8 <_Z13i2cSetBitratej>:
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
}
    12f8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12fc:	bc 01       	movw	r22, r24
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__floatunsisf>
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	8a ef       	ldi	r24, 0xFA	; 250
    1310:	95 e4       	ldi	r25, 0x45	; 69
    1312:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divsf3>
    1316:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
    131a:	60 31       	cpi	r22, 0x10	; 16
    131c:	88 f0       	brcs	.+34     	; 0x1340 <_Z13i2cSetBitratej+0x48>
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	60 51       	subi	r22, 0x10	; 16
    1322:	71 09       	sbc	r23, r1
    1324:	07 2e       	mov	r0, r23
    1326:	00 0c       	add	r0, r0
    1328:	88 0b       	sbc	r24, r24
    132a:	99 0b       	sbc	r25, r25
    132c:	0e 94 ce 0c 	call	0x199c	; 0x199c <__floatsisf>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	5e e3       	ldi	r21, 0x3E	; 62
    1338:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__mulsf3>
    133c:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
    1340:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1344:	88 b1       	in	r24, 0x08	; 8
    1346:	80 63       	ori	r24, 0x30	; 48
    1348:	88 b9       	out	0x08, r24	; 8
    134a:	08 95       	ret

0000134c <_Z11i2cSendStopv>:
    134c:	84 e9       	ldi	r24, 0x94	; 148
    134e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	ec eb       	ldi	r30, 0xBC	; 188
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	90 81       	ld	r25, Z
    135a:	94 ff       	sbrs	r25, 4
    135c:	0e c0       	rjmp	.+28     	; 0x137a <_Z11i2cSendStopv+0x2e>
    135e:	8a 35       	cpi	r24, 0x5A	; 90
    1360:	31 f4       	brne	.+12     	; 0x136e <_Z11i2cSendStopv+0x22>
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	8a 95       	dec	r24
    1366:	f1 f7       	brne	.-4      	; 0x1364 <_Z11i2cSendStopv+0x18>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <_Z11i2cSendStopv+0x1e>
    136a:	84 e6       	ldi	r24, 0x64	; 100
    136c:	08 95       	ret
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	9a 95       	dec	r25
    1372:	f1 f7       	brne	.-4      	; 0x1370 <_Z11i2cSendStopv+0x24>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <_Z11i2cSendStopv+0x2a>
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	ef cf       	rjmp	.-34     	; 0x1358 <_Z11i2cSendStopv+0xc>
    137a:	8a 35       	cpi	r24, 0x5A	; 90
    137c:	90 f7       	brcc	.-28     	; 0x1362 <_Z11i2cSendStopv+0x16>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	08 95       	ret

00001382 <_Z18i2cWaitForCompletev>:
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	ec eb       	ldi	r30, 0xBC	; 188
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	90 81       	ld	r25, Z
    138a:	99 23       	and	r25, r25
    138c:	74 f0       	brlt	.+28     	; 0x13aa <_Z18i2cWaitForCompletev+0x28>
    138e:	8a 35       	cpi	r24, 0x5A	; 90
    1390:	31 f4       	brne	.+12     	; 0x139e <_Z18i2cWaitForCompletev+0x1c>
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	8a 95       	dec	r24
    1396:	f1 f7       	brne	.-4      	; 0x1394 <_Z18i2cWaitForCompletev+0x12>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <_Z18i2cWaitForCompletev+0x18>
    139a:	84 e6       	ldi	r24, 0x64	; 100
    139c:	08 95       	ret
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	9a 95       	dec	r25
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <_Z18i2cWaitForCompletev+0x1e>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <_Z18i2cWaitForCompletev+0x24>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	ef cf       	rjmp	.-34     	; 0x1388 <_Z18i2cWaitForCompletev+0x6>
    13aa:	8a 35       	cpi	r24, 0x5A	; 90
    13ac:	90 f7       	brcc	.-28     	; 0x1392 <_Z18i2cWaitForCompletev+0x10>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
    13b2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    13b6:	28 7f       	andi	r18, 0xF8	; 248
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	28 17       	cp	r18, r24
    13be:	39 07       	cpc	r19, r25
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
    13c8:	08 95       	ret

000013ca <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
	i2cSetBitrate(400);
    13d4:	80 e9       	ldi	r24, 0x90	; 144
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    13dc:	cc eb       	ldi	r28, 0xBC	; 188
    13de:	d0 e0       	ldi	r29, 0x00	; 0
    13e0:	84 ea       	ldi	r24, 0xA4	; 164
    13e2:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    13e4:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13e8:	0f 2e       	mov	r0, r31
    13ea:	fb eb       	ldi	r31, 0xBB	; 187
    13ec:	ef 2e       	mov	r14, r31
    13ee:	f1 2c       	mov	r15, r1
    13f0:	f0 2d       	mov	r31, r0
    13f2:	80 ed       	ldi	r24, 0xD0	; 208
    13f4:	f7 01       	movw	r30, r14
    13f6:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13f8:	14 e8       	ldi	r17, 0x84	; 132
    13fa:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    13fc:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1400:	88 e2       	ldi	r24, 0x28	; 40
    1402:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1406:	8e e0       	ldi	r24, 0x0E	; 14
    1408:	f7 01       	movw	r30, r14
    140a:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    140c:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
    140e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1412:	88 e2       	ldi	r24, 0x28	; 40
    1414:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	f7 01       	movw	r30, r14
    141c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    141e:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
    1420:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1424:	88 e2       	ldi	r24, 0x28	; 40
    1426:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    142a:	88 e0       	ldi	r24, 0x08	; 8
    142c:	f7 01       	movw	r30, r14
    142e:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1430:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
    1432:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1436:	88 e2       	ldi	r24, 0x28	; 40
    1438:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    143c:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z11i2cSendStopv>
}
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	08 95       	ret

0000144c <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
    144c:	9f 92       	push	r9
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1464:	cc eb       	ldi	r28, 0xBC	; 188
    1466:	d0 e0       	ldi	r29, 0x00	; 0
    1468:	04 ea       	ldi	r16, 0xA4	; 164
    146a:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
    146c:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1470:	0f 2e       	mov	r0, r31
    1472:	fb eb       	ldi	r31, 0xBB	; 187
    1474:	ef 2e       	mov	r14, r31
    1476:	f1 2c       	mov	r15, r1
    1478:	f0 2d       	mov	r31, r0
    147a:	80 ed       	ldi	r24, 0xD0	; 208
    147c:	f7 01       	movw	r30, r14
    147e:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1480:	14 e8       	ldi	r17, 0x84	; 132
    1482:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1484:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1488:	88 e2       	ldi	r24, 0x28	; 40
    148a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    148e:	f7 01       	movw	r30, r14
    1490:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1492:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    1494:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1498:	88 e2       	ldi	r24, 0x28	; 40
    149a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    149e:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    14a2:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
    14a4:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14a8:	81 ed       	ldi	r24, 0xD1	; 209
    14aa:	f7 01       	movw	r30, r14
    14ac:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14ae:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
    14b0:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14b4:	88 e2       	ldi	r24, 0x28	; 40
    14b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
    14ba:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
    14be:	e5 01       	movw	r28, r10
    14c0:	65 01       	movw	r12, r10
    14c2:	f3 e1       	ldi	r31, 0x13	; 19
    14c4:	cf 0e       	add	r12, r31
    14c6:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    14c8:	0f 2e       	mov	r0, r31
    14ca:	fc eb       	ldi	r31, 0xBC	; 188
    14cc:	ef 2e       	mov	r14, r31
    14ce:	f1 2c       	mov	r15, r1
    14d0:	f0 2d       	mov	r31, r0
    14d2:	0f 2e       	mov	r0, r31
    14d4:	f4 ec       	ldi	r31, 0xC4	; 196
    14d6:	9f 2e       	mov	r9, r31
    14d8:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    14da:	0b eb       	ldi	r16, 0xBB	; 187
    14dc:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    14de:	f7 01       	movw	r30, r14
    14e0:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
    14e2:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    14e6:	f8 01       	movw	r30, r16
    14e8:	80 81       	ld	r24, Z
		timeArr[i] = i2cGetReceivedByte();
    14ea:	89 93       	st	Y+, r24
		i2cWaitForComplete();
    14ec:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
    14f0:	80 e5       	ldi	r24, 0x50	; 80
    14f2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
    14f6:	cc 15       	cp	r28, r12
    14f8:	dd 05       	cpc	r29, r13
    14fa:	89 f7       	brne	.-30     	; 0x14de <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
    14fc:	84 e8       	ldi	r24, 0x84	; 132
    14fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
    1502:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1506:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	timeArr[6] = i2cGetReceivedByte();
    150a:	f5 01       	movw	r30, r10
    150c:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
    150e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
    1512:	88 e5       	ldi	r24, 0x58	; 88
    1514:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>

	

}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	08 95       	ret

00001530 <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
    153c:	9d ec       	ldi	r25, 0xCD	; 205
    153e:	89 9f       	mul	r24, r25
    1540:	91 2d       	mov	r25, r1
    1542:	11 24       	eor	r1, r1
    1544:	96 95       	lsr	r25
    1546:	96 95       	lsr	r25
    1548:	96 95       	lsr	r25
	bdc <<= 4;
    154a:	09 2f       	mov	r16, r25
    154c:	02 95       	swap	r16
    154e:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= minutes%10;
    1550:	99 0f       	add	r25, r25
    1552:	29 2f       	mov	r18, r25
    1554:	22 0f       	add	r18, r18
    1556:	22 0f       	add	r18, r18
    1558:	92 0f       	add	r25, r18
    155a:	89 1b       	sub	r24, r25
    155c:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    155e:	cc eb       	ldi	r28, 0xBC	; 188
    1560:	d0 e0       	ldi	r29, 0x00	; 0
    1562:	84 ea       	ldi	r24, 0xA4	; 164
    1564:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    1566:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    156a:	0f 2e       	mov	r0, r31
    156c:	fb eb       	ldi	r31, 0xBB	; 187
    156e:	ef 2e       	mov	r14, r31
    1570:	f1 2c       	mov	r15, r1
    1572:	f0 2d       	mov	r31, r0
    1574:	80 ed       	ldi	r24, 0xD0	; 208
    1576:	f7 01       	movw	r30, r14
    1578:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    157a:	14 e8       	ldi	r17, 0x84	; 132
    157c:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    157e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1582:	88 e2       	ldi	r24, 0x28	; 40
    1584:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1588:	f7 01       	movw	r30, r14
    158a:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    158c:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    158e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1592:	88 e2       	ldi	r24, 0x28	; 40
    1594:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1598:	f7 01       	movw	r30, r14
    159a:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    159c:	18 83       	st	Y, r17

	i2cSendByte(0);
	i2cWaitForComplete();
    159e:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15a2:	88 e2       	ldi	r24, 0x28	; 40
    15a4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15a8:	f7 01       	movw	r30, r14
    15aa:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15ac:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    15ae:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15b2:	88 e2       	ldi	r24, 0x28	; 40
    15b4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    15b8:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z11i2cSendStopv>
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	08 95       	ret

000015ca <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
    15d6:	9d ec       	ldi	r25, 0xCD	; 205
    15d8:	89 9f       	mul	r24, r25
    15da:	91 2d       	mov	r25, r1
    15dc:	11 24       	eor	r1, r1
    15de:	96 95       	lsr	r25
    15e0:	96 95       	lsr	r25
    15e2:	96 95       	lsr	r25
	bdc <<= 4;
    15e4:	09 2f       	mov	r16, r25
    15e6:	02 95       	swap	r16
    15e8:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= hours%10;
    15ea:	99 0f       	add	r25, r25
    15ec:	29 2f       	mov	r18, r25
    15ee:	22 0f       	add	r18, r18
    15f0:	22 0f       	add	r18, r18
    15f2:	92 0f       	add	r25, r18
    15f4:	89 1b       	sub	r24, r25
    15f6:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    15f8:	cc eb       	ldi	r28, 0xBC	; 188
    15fa:	d0 e0       	ldi	r29, 0x00	; 0
    15fc:	84 ea       	ldi	r24, 0xA4	; 164
    15fe:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    1600:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1604:	0f 2e       	mov	r0, r31
    1606:	fb eb       	ldi	r31, 0xBB	; 187
    1608:	ef 2e       	mov	r14, r31
    160a:	f1 2c       	mov	r15, r1
    160c:	f0 2d       	mov	r31, r0
    160e:	80 ed       	ldi	r24, 0xD0	; 208
    1610:	f7 01       	movw	r30, r14
    1612:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1614:	14 e8       	ldi	r17, 0x84	; 132
    1616:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1618:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    161c:	88 e2       	ldi	r24, 0x28	; 40
    161e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	f7 01       	movw	r30, r14
    1626:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1628:	18 83       	st	Y, r17

	i2cSendByte(0x02);
	i2cWaitForComplete();
    162a:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    162e:	88 e2       	ldi	r24, 0x28	; 40
    1630:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1634:	f7 01       	movw	r30, r14
    1636:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1638:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    163a:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    163e:	88 e2       	ldi	r24, 0x28	; 40
    1640:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1644:	0e 94 a6 09 	call	0x134c	; 0x134c <_Z11i2cSendStopv>
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
    1656:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
    1658:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
    165a:	8a b1       	in	r24, 0x0a	; 10
    165c:	82 62       	ori	r24, 0x22	; 34
    165e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
    1660:	8b b1       	in	r24, 0x0b	; 11
    1662:	8d 7d       	andi	r24, 0xDD	; 221
    1664:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
    1666:	84 b1       	in	r24, 0x04	; 4
    1668:	8d 63       	ori	r24, 0x3D	; 61
    166a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
    166c:	85 b1       	in	r24, 0x05	; 5
    166e:	82 7c       	andi	r24, 0xC2	; 194
    1670:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
    1672:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
    1674:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
    1676:	8a b1       	in	r24, 0x0a	; 10
    1678:	80 6c       	ori	r24, 0xC0	; 192
    167a:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
    167c:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
    167e:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
    1680:	8b b1       	in	r24, 0x0b	; 11
    1682:	80 6c       	ori	r24, 0xC0	; 192
    1684:	8b b9       	out	0x0b, r24	; 11
    1686:	08 95       	ret

00001688 <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	c8 2f       	mov	r28, r24
    168e:	d6 2f       	mov	r29, r22
	ClrScr();
    1690:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
    1694:	d1 11       	cpse	r29, r1
    1696:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
    1698:	8c 2f       	mov	r24, r28
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	86 37       	cpi	r24, 0x76	; 118
    169e:	91 05       	cpc	r25, r1
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <_Z11Display7seghb+0x1c>
    16a2:	4d c0       	rjmp	.+154    	; 0x173e <_Z11Display7seghb+0xb6>
    16a4:	fc 01       	movw	r30, r24
    16a6:	e5 5c       	subi	r30, 0xC5	; 197
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    16ae:	85 b1       	in	r24, 0x05	; 5
    16b0:	89 62       	ori	r24, 0x29	; 41
    16b2:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16b4:	8b b1       	in	r24, 0x0b	; 11
    16b6:	82 62       	ori	r24, 0x22	; 34
    16b8:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    16ba:	42 9a       	sbi	0x08, 2	; 8
				break;
    16bc:	42 c0       	rjmp	.+132    	; 0x1742 <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    16be:	85 b1       	in	r24, 0x05	; 5
    16c0:	89 60       	ori	r24, 0x09	; 9
    16c2:	85 b9       	out	0x05, r24	; 5
				break;
    16c4:	3e c0       	rjmp	.+124    	; 0x1742 <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    16c6:	85 b1       	in	r24, 0x05	; 5
    16c8:	85 62       	ori	r24, 0x25	; 37
    16ca:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    16cc:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    16ce:	42 9a       	sbi	0x08, 2	; 8
				break;
    16d0:	38 c0       	rjmp	.+112    	; 0x1742 <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16d2:	85 b1       	in	r24, 0x05	; 5
    16d4:	8d 62       	ori	r24, 0x2D	; 45
    16d6:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    16d8:	59 9a       	sbi	0x0b, 1	; 11
				break;
    16da:	33 c0       	rjmp	.+102    	; 0x1742 <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    16dc:	85 b1       	in	r24, 0x05	; 5
    16de:	8d 60       	ori	r24, 0x0D	; 13
    16e0:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    16e2:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    16e4:	2e c0       	rjmp	.+92     	; 0x1742 <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16e6:	85 b1       	in	r24, 0x05	; 5
    16e8:	8c 62       	ori	r24, 0x2C	; 44
    16ea:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16ec:	8b b1       	in	r24, 0x0b	; 11
    16ee:	82 62       	ori	r24, 0x22	; 34
    16f0:	8b b9       	out	0x0b, r24	; 11
				break;
    16f2:	27 c0       	rjmp	.+78     	; 0x1742 <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16f4:	85 b1       	in	r24, 0x05	; 5
    16f6:	8c 62       	ori	r24, 0x2C	; 44
    16f8:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16fa:	8b b1       	in	r24, 0x0b	; 11
    16fc:	82 62       	ori	r24, 0x22	; 34
    16fe:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1700:	42 9a       	sbi	0x08, 2	; 8
				break;
    1702:	1f c0       	rjmp	.+62     	; 0x1742 <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    1704:	85 b1       	in	r24, 0x05	; 5
    1706:	89 60       	ori	r24, 0x09	; 9
    1708:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    170a:	8b b1       	in	r24, 0x0b	; 11
    170c:	82 62       	ori	r24, 0x22	; 34
    170e:	8b b9       	out	0x0b, r24	; 11
				break;
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1712:	85 b1       	in	r24, 0x05	; 5
    1714:	8d 62       	ori	r24, 0x2D	; 45
    1716:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1718:	8b b1       	in	r24, 0x0b	; 11
    171a:	82 62       	ori	r24, 0x22	; 34
    171c:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    171e:	42 9a       	sbi	0x08, 2	; 8
				break;
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1722:	85 b1       	in	r24, 0x05	; 5
    1724:	8d 62       	ori	r24, 0x2D	; 45
    1726:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1728:	8b b1       	in	r24, 0x0b	; 11
    172a:	82 62       	ori	r24, 0x22	; 34
    172c:	8b b9       	out	0x0b, r24	; 11
				break;
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    1730:	85 b1       	in	r24, 0x05	; 5
    1732:	88 62       	ori	r24, 0x28	; 40
    1734:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    1736:	42 9a       	sbi	0x08, 2	; 8
				break;
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    173a:	2a 9a       	sbi	0x05, 2	; 5
				break;
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <_Z11Display7seghb+0xba>
		default: ClrScr();
    173e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <_Z6ClrScrv>
				break;

	}
}
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	59 f0       	breq	.+22     	; 0x1762 <_Z9NextDigith+0x1a>
    174c:	18 f4       	brcc	.+6      	; 0x1754 <_Z9NextDigith+0xc>
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	31 f0       	breq	.+12     	; 0x175e <_Z9NextDigith+0x16>
    1752:	08 95       	ret
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	39 f0       	breq	.+14     	; 0x1766 <_Z9NextDigith+0x1e>
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	39 f0       	breq	.+14     	; 0x176a <_Z9NextDigith+0x22>
    175c:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    175e:	43 98       	cbi	0x08, 3	; 8
		break;
    1760:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    1762:	5e 98       	cbi	0x0b, 6	; 11
		break;
    1764:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    1766:	5f 98       	cbi	0x0b, 7	; 11
		break;
    1768:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    176a:	29 98       	cbi	0x05, 1	; 5
    176c:	08 95       	ret

0000176e <__subsf3>:
    176e:	50 58       	subi	r21, 0x80	; 128

00001770 <__addsf3>:
    1770:	bb 27       	eor	r27, r27
    1772:	aa 27       	eor	r26, r26
    1774:	0e 94 cf 0b 	call	0x179e	; 0x179e <__addsf3x>
    1778:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_round>
    177c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscA>
    1780:	38 f0       	brcs	.+14     	; 0x1790 <__addsf3+0x20>
    1782:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__fp_pscB>
    1786:	20 f0       	brcs	.+8      	; 0x1790 <__addsf3+0x20>
    1788:	39 f4       	brne	.+14     	; 0x1798 <__addsf3+0x28>
    178a:	9f 3f       	cpi	r25, 0xFF	; 255
    178c:	19 f4       	brne	.+6      	; 0x1794 <__addsf3+0x24>
    178e:	26 f4       	brtc	.+8      	; 0x1798 <__addsf3+0x28>
    1790:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_nan>
    1794:	0e f4       	brtc	.+2      	; 0x1798 <__addsf3+0x28>
    1796:	e0 95       	com	r30
    1798:	e7 fb       	bst	r30, 7
    179a:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_inf>

0000179e <__addsf3x>:
    179e:	e9 2f       	mov	r30, r25
    17a0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_split3>
    17a4:	58 f3       	brcs	.-42     	; 0x177c <__addsf3+0xc>
    17a6:	ba 17       	cp	r27, r26
    17a8:	62 07       	cpc	r22, r18
    17aa:	73 07       	cpc	r23, r19
    17ac:	84 07       	cpc	r24, r20
    17ae:	95 07       	cpc	r25, r21
    17b0:	20 f0       	brcs	.+8      	; 0x17ba <__addsf3x+0x1c>
    17b2:	79 f4       	brne	.+30     	; 0x17d2 <__addsf3x+0x34>
    17b4:	a6 f5       	brtc	.+104    	; 0x181e <__addsf3x+0x80>
    17b6:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_zero>
    17ba:	0e f4       	brtc	.+2      	; 0x17be <__addsf3x+0x20>
    17bc:	e0 95       	com	r30
    17be:	0b 2e       	mov	r0, r27
    17c0:	ba 2f       	mov	r27, r26
    17c2:	a0 2d       	mov	r26, r0
    17c4:	0b 01       	movw	r0, r22
    17c6:	b9 01       	movw	r22, r18
    17c8:	90 01       	movw	r18, r0
    17ca:	0c 01       	movw	r0, r24
    17cc:	ca 01       	movw	r24, r20
    17ce:	a0 01       	movw	r20, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	ff 27       	eor	r31, r31
    17d4:	59 1b       	sub	r21, r25
    17d6:	99 f0       	breq	.+38     	; 0x17fe <__addsf3x+0x60>
    17d8:	59 3f       	cpi	r21, 0xF9	; 249
    17da:	50 f4       	brcc	.+20     	; 0x17f0 <__addsf3x+0x52>
    17dc:	50 3e       	cpi	r21, 0xE0	; 224
    17de:	68 f1       	brcs	.+90     	; 0x183a <__addsf3x+0x9c>
    17e0:	1a 16       	cp	r1, r26
    17e2:	f0 40       	sbci	r31, 0x00	; 0
    17e4:	a2 2f       	mov	r26, r18
    17e6:	23 2f       	mov	r18, r19
    17e8:	34 2f       	mov	r19, r20
    17ea:	44 27       	eor	r20, r20
    17ec:	58 5f       	subi	r21, 0xF8	; 248
    17ee:	f3 cf       	rjmp	.-26     	; 0x17d6 <__addsf3x+0x38>
    17f0:	46 95       	lsr	r20
    17f2:	37 95       	ror	r19
    17f4:	27 95       	ror	r18
    17f6:	a7 95       	ror	r26
    17f8:	f0 40       	sbci	r31, 0x00	; 0
    17fa:	53 95       	inc	r21
    17fc:	c9 f7       	brne	.-14     	; 0x17f0 <__addsf3x+0x52>
    17fe:	7e f4       	brtc	.+30     	; 0x181e <__addsf3x+0x80>
    1800:	1f 16       	cp	r1, r31
    1802:	ba 0b       	sbc	r27, r26
    1804:	62 0b       	sbc	r22, r18
    1806:	73 0b       	sbc	r23, r19
    1808:	84 0b       	sbc	r24, r20
    180a:	ba f0       	brmi	.+46     	; 0x183a <__addsf3x+0x9c>
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	a1 f0       	breq	.+40     	; 0x1838 <__addsf3x+0x9a>
    1810:	ff 0f       	add	r31, r31
    1812:	bb 1f       	adc	r27, r27
    1814:	66 1f       	adc	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	88 1f       	adc	r24, r24
    181a:	c2 f7       	brpl	.-16     	; 0x180c <__addsf3x+0x6e>
    181c:	0e c0       	rjmp	.+28     	; 0x183a <__addsf3x+0x9c>
    181e:	ba 0f       	add	r27, r26
    1820:	62 1f       	adc	r22, r18
    1822:	73 1f       	adc	r23, r19
    1824:	84 1f       	adc	r24, r20
    1826:	48 f4       	brcc	.+18     	; 0x183a <__addsf3x+0x9c>
    1828:	87 95       	ror	r24
    182a:	77 95       	ror	r23
    182c:	67 95       	ror	r22
    182e:	b7 95       	ror	r27
    1830:	f7 95       	ror	r31
    1832:	9e 3f       	cpi	r25, 0xFE	; 254
    1834:	08 f0       	brcs	.+2      	; 0x1838 <__addsf3x+0x9a>
    1836:	b0 cf       	rjmp	.-160    	; 0x1798 <__addsf3+0x28>
    1838:	93 95       	inc	r25
    183a:	88 0f       	add	r24, r24
    183c:	08 f0       	brcs	.+2      	; 0x1840 <__addsf3x+0xa2>
    183e:	99 27       	eor	r25, r25
    1840:	ee 0f       	add	r30, r30
    1842:	97 95       	ror	r25
    1844:	87 95       	ror	r24
    1846:	08 95       	ret

00001848 <__divsf3>:
    1848:	0e 94 38 0c 	call	0x1870	; 0x1870 <__divsf3x>
    184c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_round>
    1850:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__fp_pscB>
    1854:	58 f0       	brcs	.+22     	; 0x186c <__divsf3+0x24>
    1856:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscA>
    185a:	40 f0       	brcs	.+16     	; 0x186c <__divsf3+0x24>
    185c:	29 f4       	brne	.+10     	; 0x1868 <__divsf3+0x20>
    185e:	5f 3f       	cpi	r21, 0xFF	; 255
    1860:	29 f0       	breq	.+10     	; 0x186c <__divsf3+0x24>
    1862:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_inf>
    1866:	51 11       	cpse	r21, r1
    1868:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_szero>
    186c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_nan>

00001870 <__divsf3x>:
    1870:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_split3>
    1874:	68 f3       	brcs	.-38     	; 0x1850 <__divsf3+0x8>

00001876 <__divsf3_pse>:
    1876:	99 23       	and	r25, r25
    1878:	b1 f3       	breq	.-20     	; 0x1866 <__divsf3+0x1e>
    187a:	55 23       	and	r21, r21
    187c:	91 f3       	breq	.-28     	; 0x1862 <__divsf3+0x1a>
    187e:	95 1b       	sub	r25, r21
    1880:	55 0b       	sbc	r21, r21
    1882:	bb 27       	eor	r27, r27
    1884:	aa 27       	eor	r26, r26
    1886:	62 17       	cp	r22, r18
    1888:	73 07       	cpc	r23, r19
    188a:	84 07       	cpc	r24, r20
    188c:	38 f0       	brcs	.+14     	; 0x189c <__divsf3_pse+0x26>
    188e:	9f 5f       	subi	r25, 0xFF	; 255
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	44 1f       	adc	r20, r20
    1898:	aa 1f       	adc	r26, r26
    189a:	a9 f3       	breq	.-22     	; 0x1886 <__divsf3_pse+0x10>
    189c:	35 d0       	rcall	.+106    	; 0x1908 <__divsf3_pse+0x92>
    189e:	0e 2e       	mov	r0, r30
    18a0:	3a f0       	brmi	.+14     	; 0x18b0 <__divsf3_pse+0x3a>
    18a2:	e0 e8       	ldi	r30, 0x80	; 128
    18a4:	32 d0       	rcall	.+100    	; 0x190a <__divsf3_pse+0x94>
    18a6:	91 50       	subi	r25, 0x01	; 1
    18a8:	50 40       	sbci	r21, 0x00	; 0
    18aa:	e6 95       	lsr	r30
    18ac:	00 1c       	adc	r0, r0
    18ae:	ca f7       	brpl	.-14     	; 0x18a2 <__divsf3_pse+0x2c>
    18b0:	2b d0       	rcall	.+86     	; 0x1908 <__divsf3_pse+0x92>
    18b2:	fe 2f       	mov	r31, r30
    18b4:	29 d0       	rcall	.+82     	; 0x1908 <__divsf3_pse+0x92>
    18b6:	66 0f       	add	r22, r22
    18b8:	77 1f       	adc	r23, r23
    18ba:	88 1f       	adc	r24, r24
    18bc:	bb 1f       	adc	r27, r27
    18be:	26 17       	cp	r18, r22
    18c0:	37 07       	cpc	r19, r23
    18c2:	48 07       	cpc	r20, r24
    18c4:	ab 07       	cpc	r26, r27
    18c6:	b0 e8       	ldi	r27, 0x80	; 128
    18c8:	09 f0       	breq	.+2      	; 0x18cc <__divsf3_pse+0x56>
    18ca:	bb 0b       	sbc	r27, r27
    18cc:	80 2d       	mov	r24, r0
    18ce:	bf 01       	movw	r22, r30
    18d0:	ff 27       	eor	r31, r31
    18d2:	93 58       	subi	r25, 0x83	; 131
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    18d6:	3a f0       	brmi	.+14     	; 0x18e6 <__divsf3_pse+0x70>
    18d8:	9e 3f       	cpi	r25, 0xFE	; 254
    18da:	51 05       	cpc	r21, r1
    18dc:	78 f0       	brcs	.+30     	; 0x18fc <__divsf3_pse+0x86>
    18de:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_inf>
    18e2:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	e4 f3       	brlt	.-8      	; 0x18e2 <__divsf3_pse+0x6c>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	d4 f3       	brlt	.-12     	; 0x18e2 <__divsf3_pse+0x6c>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	9f 5f       	subi	r25, 0xFF	; 255
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__divsf3_pse+0x78>
    18fc:	88 0f       	add	r24, r24
    18fe:	91 1d       	adc	r25, r1
    1900:	96 95       	lsr	r25
    1902:	87 95       	ror	r24
    1904:	97 f9       	bld	r25, 7
    1906:	08 95       	ret
    1908:	e1 e0       	ldi	r30, 0x01	; 1
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	bb 1f       	adc	r27, r27
    1912:	62 17       	cp	r22, r18
    1914:	73 07       	cpc	r23, r19
    1916:	84 07       	cpc	r24, r20
    1918:	ba 07       	cpc	r27, r26
    191a:	20 f0       	brcs	.+8      	; 0x1924 <__divsf3_pse+0xae>
    191c:	62 1b       	sub	r22, r18
    191e:	73 0b       	sbc	r23, r19
    1920:	84 0b       	sbc	r24, r20
    1922:	ba 0b       	sbc	r27, r26
    1924:	ee 1f       	adc	r30, r30
    1926:	88 f7       	brcc	.-30     	; 0x190a <__divsf3_pse+0x94>
    1928:	e0 95       	com	r30
    192a:	08 95       	ret

0000192c <__fixsfsi>:
    192c:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fixunssfsi>
    1930:	68 94       	set
    1932:	b1 11       	cpse	r27, r1
    1934:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_szero>
    1938:	08 95       	ret

0000193a <__fixunssfsi>:
    193a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__fp_splitA>
    193e:	88 f0       	brcs	.+34     	; 0x1962 <__fixunssfsi+0x28>
    1940:	9f 57       	subi	r25, 0x7F	; 127
    1942:	98 f0       	brcs	.+38     	; 0x196a <__fixunssfsi+0x30>
    1944:	b9 2f       	mov	r27, r25
    1946:	99 27       	eor	r25, r25
    1948:	b7 51       	subi	r27, 0x17	; 23
    194a:	b0 f0       	brcs	.+44     	; 0x1978 <__fixunssfsi+0x3e>
    194c:	e1 f0       	breq	.+56     	; 0x1986 <__fixunssfsi+0x4c>
    194e:	66 0f       	add	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	1a f0       	brmi	.+6      	; 0x195e <__fixunssfsi+0x24>
    1958:	ba 95       	dec	r27
    195a:	c9 f7       	brne	.-14     	; 0x194e <__fixunssfsi+0x14>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <__fixunssfsi+0x4c>
    195e:	b1 30       	cpi	r27, 0x01	; 1
    1960:	91 f0       	breq	.+36     	; 0x1986 <__fixunssfsi+0x4c>
    1962:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__fp_zero>
    1966:	b1 e0       	ldi	r27, 0x01	; 1
    1968:	08 95       	ret
    196a:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_zero>
    196e:	67 2f       	mov	r22, r23
    1970:	78 2f       	mov	r23, r24
    1972:	88 27       	eor	r24, r24
    1974:	b8 5f       	subi	r27, 0xF8	; 248
    1976:	39 f0       	breq	.+14     	; 0x1986 <__fixunssfsi+0x4c>
    1978:	b9 3f       	cpi	r27, 0xF9	; 249
    197a:	cc f3       	brlt	.-14     	; 0x196e <__fixunssfsi+0x34>
    197c:	86 95       	lsr	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	b3 95       	inc	r27
    1984:	d9 f7       	brne	.-10     	; 0x197c <__fixunssfsi+0x42>
    1986:	3e f4       	brtc	.+14     	; 0x1996 <__fixunssfsi+0x5c>
    1988:	90 95       	com	r25
    198a:	80 95       	com	r24
    198c:	70 95       	com	r23
    198e:	61 95       	neg	r22
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	8f 4f       	sbci	r24, 0xFF	; 255
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	08 95       	ret

00001998 <__floatunsisf>:
    1998:	e8 94       	clt
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <__floatsisf+0x12>

0000199c <__floatsisf>:
    199c:	97 fb       	bst	r25, 7
    199e:	3e f4       	brtc	.+14     	; 0x19ae <__floatsisf+0x12>
    19a0:	90 95       	com	r25
    19a2:	80 95       	com	r24
    19a4:	70 95       	com	r23
    19a6:	61 95       	neg	r22
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	8f 4f       	sbci	r24, 0xFF	; 255
    19ac:	9f 4f       	sbci	r25, 0xFF	; 255
    19ae:	99 23       	and	r25, r25
    19b0:	a9 f0       	breq	.+42     	; 0x19dc <__floatsisf+0x40>
    19b2:	f9 2f       	mov	r31, r25
    19b4:	96 e9       	ldi	r25, 0x96	; 150
    19b6:	bb 27       	eor	r27, r27
    19b8:	93 95       	inc	r25
    19ba:	f6 95       	lsr	r31
    19bc:	87 95       	ror	r24
    19be:	77 95       	ror	r23
    19c0:	67 95       	ror	r22
    19c2:	b7 95       	ror	r27
    19c4:	f1 11       	cpse	r31, r1
    19c6:	f8 cf       	rjmp	.-16     	; 0x19b8 <__floatsisf+0x1c>
    19c8:	fa f4       	brpl	.+62     	; 0x1a08 <__floatsisf+0x6c>
    19ca:	bb 0f       	add	r27, r27
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <__floatsisf+0x36>
    19ce:	60 ff       	sbrs	r22, 0
    19d0:	1b c0       	rjmp	.+54     	; 0x1a08 <__floatsisf+0x6c>
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	16 c0       	rjmp	.+44     	; 0x1a08 <__floatsisf+0x6c>
    19dc:	88 23       	and	r24, r24
    19de:	11 f0       	breq	.+4      	; 0x19e4 <__floatsisf+0x48>
    19e0:	96 e9       	ldi	r25, 0x96	; 150
    19e2:	11 c0       	rjmp	.+34     	; 0x1a06 <__floatsisf+0x6a>
    19e4:	77 23       	and	r23, r23
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <__floatsisf+0x54>
    19e8:	9e e8       	ldi	r25, 0x8E	; 142
    19ea:	87 2f       	mov	r24, r23
    19ec:	76 2f       	mov	r23, r22
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <__floatsisf+0x5e>
    19f0:	66 23       	and	r22, r22
    19f2:	71 f0       	breq	.+28     	; 0x1a10 <__floatsisf+0x74>
    19f4:	96 e8       	ldi	r25, 0x86	; 134
    19f6:	86 2f       	mov	r24, r22
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	2a f0       	brmi	.+10     	; 0x1a08 <__floatsisf+0x6c>
    19fe:	9a 95       	dec	r25
    1a00:	66 0f       	add	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	da f7       	brpl	.-10     	; 0x19fe <__floatsisf+0x62>
    1a08:	88 0f       	add	r24, r24
    1a0a:	96 95       	lsr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	97 f9       	bld	r25, 7
    1a10:	08 95       	ret

00001a12 <__fp_inf>:
    1a12:	97 f9       	bld	r25, 7
    1a14:	9f 67       	ori	r25, 0x7F	; 127
    1a16:	80 e8       	ldi	r24, 0x80	; 128
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	08 95       	ret

00001a1e <__fp_nan>:
    1a1e:	9f ef       	ldi	r25, 0xFF	; 255
    1a20:	80 ec       	ldi	r24, 0xC0	; 192
    1a22:	08 95       	ret

00001a24 <__fp_pscA>:
    1a24:	00 24       	eor	r0, r0
    1a26:	0a 94       	dec	r0
    1a28:	16 16       	cp	r1, r22
    1a2a:	17 06       	cpc	r1, r23
    1a2c:	18 06       	cpc	r1, r24
    1a2e:	09 06       	cpc	r0, r25
    1a30:	08 95       	ret

00001a32 <__fp_pscB>:
    1a32:	00 24       	eor	r0, r0
    1a34:	0a 94       	dec	r0
    1a36:	12 16       	cp	r1, r18
    1a38:	13 06       	cpc	r1, r19
    1a3a:	14 06       	cpc	r1, r20
    1a3c:	05 06       	cpc	r0, r21
    1a3e:	08 95       	ret

00001a40 <__fp_round>:
    1a40:	09 2e       	mov	r0, r25
    1a42:	03 94       	inc	r0
    1a44:	00 0c       	add	r0, r0
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <__fp_round+0xc>
    1a48:	88 23       	and	r24, r24
    1a4a:	52 f0       	brmi	.+20     	; 0x1a60 <__fp_round+0x20>
    1a4c:	bb 0f       	add	r27, r27
    1a4e:	40 f4       	brcc	.+16     	; 0x1a60 <__fp_round+0x20>
    1a50:	bf 2b       	or	r27, r31
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <__fp_round+0x18>
    1a54:	60 ff       	sbrs	r22, 0
    1a56:	04 c0       	rjmp	.+8      	; 0x1a60 <__fp_round+0x20>
    1a58:	6f 5f       	subi	r22, 0xFF	; 255
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	08 95       	ret

00001a62 <__fp_split3>:
    1a62:	57 fd       	sbrc	r21, 7
    1a64:	90 58       	subi	r25, 0x80	; 128
    1a66:	44 0f       	add	r20, r20
    1a68:	55 1f       	adc	r21, r21
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <__fp_splitA+0x10>
    1a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <__fp_splitA+0x1a>
    1a70:	47 95       	ror	r20

00001a72 <__fp_splitA>:
    1a72:	88 0f       	add	r24, r24
    1a74:	97 fb       	bst	r25, 7
    1a76:	99 1f       	adc	r25, r25
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <__fp_splitA+0x20>
    1a7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7c:	79 f0       	breq	.+30     	; 0x1a9c <__fp_splitA+0x2a>
    1a7e:	87 95       	ror	r24
    1a80:	08 95       	ret
    1a82:	12 16       	cp	r1, r18
    1a84:	13 06       	cpc	r1, r19
    1a86:	14 06       	cpc	r1, r20
    1a88:	55 1f       	adc	r21, r21
    1a8a:	f2 cf       	rjmp	.-28     	; 0x1a70 <__fp_split3+0xe>
    1a8c:	46 95       	lsr	r20
    1a8e:	f1 df       	rcall	.-30     	; 0x1a72 <__fp_splitA>
    1a90:	08 c0       	rjmp	.+16     	; 0x1aa2 <__fp_splitA+0x30>
    1a92:	16 16       	cp	r1, r22
    1a94:	17 06       	cpc	r1, r23
    1a96:	18 06       	cpc	r1, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	f1 cf       	rjmp	.-30     	; 0x1a7e <__fp_splitA+0xc>
    1a9c:	86 95       	lsr	r24
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	61 05       	cpc	r22, r1
    1aa2:	08 94       	sec
    1aa4:	08 95       	ret

00001aa6 <__fp_zero>:
    1aa6:	e8 94       	clt

00001aa8 <__fp_szero>:
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	66 27       	eor	r22, r22
    1aac:	77 27       	eor	r23, r23
    1aae:	cb 01       	movw	r24, r22
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret

00001ab4 <__mulsf3>:
    1ab4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3x>
    1ab8:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_round>
    1abc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__fp_pscA>
    1ac0:	38 f0       	brcs	.+14     	; 0x1ad0 <__mulsf3+0x1c>
    1ac2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__fp_pscB>
    1ac6:	20 f0       	brcs	.+8      	; 0x1ad0 <__mulsf3+0x1c>
    1ac8:	95 23       	and	r25, r21
    1aca:	11 f0       	breq	.+4      	; 0x1ad0 <__mulsf3+0x1c>
    1acc:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_inf>
    1ad0:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_nan>
    1ad4:	11 24       	eor	r1, r1
    1ad6:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_szero>

00001ada <__mulsf3x>:
    1ada:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fp_split3>
    1ade:	70 f3       	brcs	.-36     	; 0x1abc <__mulsf3+0x8>

00001ae0 <__mulsf3_pse>:
    1ae0:	95 9f       	mul	r25, r21
    1ae2:	c1 f3       	breq	.-16     	; 0x1ad4 <__mulsf3+0x20>
    1ae4:	95 0f       	add	r25, r21
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	55 1f       	adc	r21, r21
    1aea:	62 9f       	mul	r22, r18
    1aec:	f0 01       	movw	r30, r0
    1aee:	72 9f       	mul	r23, r18
    1af0:	bb 27       	eor	r27, r27
    1af2:	f0 0d       	add	r31, r0
    1af4:	b1 1d       	adc	r27, r1
    1af6:	63 9f       	mul	r22, r19
    1af8:	aa 27       	eor	r26, r26
    1afa:	f0 0d       	add	r31, r0
    1afc:	b1 1d       	adc	r27, r1
    1afe:	aa 1f       	adc	r26, r26
    1b00:	64 9f       	mul	r22, r20
    1b02:	66 27       	eor	r22, r22
    1b04:	b0 0d       	add	r27, r0
    1b06:	a1 1d       	adc	r26, r1
    1b08:	66 1f       	adc	r22, r22
    1b0a:	82 9f       	mul	r24, r18
    1b0c:	22 27       	eor	r18, r18
    1b0e:	b0 0d       	add	r27, r0
    1b10:	a1 1d       	adc	r26, r1
    1b12:	62 1f       	adc	r22, r18
    1b14:	73 9f       	mul	r23, r19
    1b16:	b0 0d       	add	r27, r0
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	62 1f       	adc	r22, r18
    1b1c:	83 9f       	mul	r24, r19
    1b1e:	a0 0d       	add	r26, r0
    1b20:	61 1d       	adc	r22, r1
    1b22:	22 1f       	adc	r18, r18
    1b24:	74 9f       	mul	r23, r20
    1b26:	33 27       	eor	r19, r19
    1b28:	a0 0d       	add	r26, r0
    1b2a:	61 1d       	adc	r22, r1
    1b2c:	23 1f       	adc	r18, r19
    1b2e:	84 9f       	mul	r24, r20
    1b30:	60 0d       	add	r22, r0
    1b32:	21 1d       	adc	r18, r1
    1b34:	82 2f       	mov	r24, r18
    1b36:	76 2f       	mov	r23, r22
    1b38:	6a 2f       	mov	r22, r26
    1b3a:	11 24       	eor	r1, r1
    1b3c:	9f 57       	subi	r25, 0x7F	; 127
    1b3e:	50 40       	sbci	r21, 0x00	; 0
    1b40:	9a f0       	brmi	.+38     	; 0x1b68 <__mulsf3_pse+0x88>
    1b42:	f1 f0       	breq	.+60     	; 0x1b80 <__mulsf3_pse+0xa0>
    1b44:	88 23       	and	r24, r24
    1b46:	4a f0       	brmi	.+18     	; 0x1b5a <__mulsf3_pse+0x7a>
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	66 1f       	adc	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	91 50       	subi	r25, 0x01	; 1
    1b56:	50 40       	sbci	r21, 0x00	; 0
    1b58:	a9 f7       	brne	.-22     	; 0x1b44 <__mulsf3_pse+0x64>
    1b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	80 f0       	brcs	.+32     	; 0x1b80 <__mulsf3_pse+0xa0>
    1b60:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_inf>
    1b64:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__fp_szero>
    1b68:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6a:	e4 f3       	brlt	.-8      	; 0x1b64 <__mulsf3_pse+0x84>
    1b6c:	98 3e       	cpi	r25, 0xE8	; 232
    1b6e:	d4 f3       	brlt	.-12     	; 0x1b64 <__mulsf3_pse+0x84>
    1b70:	86 95       	lsr	r24
    1b72:	77 95       	ror	r23
    1b74:	67 95       	ror	r22
    1b76:	b7 95       	ror	r27
    1b78:	f7 95       	ror	r31
    1b7a:	e7 95       	ror	r30
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <__mulsf3_pse+0x90>
    1b80:	fe 2b       	or	r31, r30
    1b82:	88 0f       	add	r24, r24
    1b84:	91 1d       	adc	r25, r1
    1b86:	96 95       	lsr	r25
    1b88:	87 95       	ror	r24
    1b8a:	97 f9       	bld	r25, 7
    1b8c:	08 95       	ret

00001b8e <__divmodhi4>:
    1b8e:	97 fb       	bst	r25, 7
    1b90:	07 2e       	mov	r0, r23
    1b92:	16 f4       	brtc	.+4      	; 0x1b98 <__divmodhi4+0xa>
    1b94:	00 94       	com	r0
    1b96:	07 d0       	rcall	.+14     	; 0x1ba6 <__divmodhi4_neg1>
    1b98:	77 fd       	sbrc	r23, 7
    1b9a:	09 d0       	rcall	.+18     	; 0x1bae <__divmodhi4_neg2>
    1b9c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__udivmodhi4>
    1ba0:	07 fc       	sbrc	r0, 7
    1ba2:	05 d0       	rcall	.+10     	; 0x1bae <__divmodhi4_neg2>
    1ba4:	3e f4       	brtc	.+14     	; 0x1bb4 <__divmodhi4_exit>

00001ba6 <__divmodhi4_neg1>:
    1ba6:	90 95       	com	r25
    1ba8:	81 95       	neg	r24
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <__divmodhi4_neg2>:
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb4 <__divmodhi4_exit>:
    1bb4:	08 95       	ret

00001bb6 <__tablejump2__>:
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	05 90       	lpm	r0, Z+
    1bbc:	f4 91       	lpm	r31, Z
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	09 94       	ijmp

00001bc2 <__umulhisi3>:
    1bc2:	a2 9f       	mul	r26, r18
    1bc4:	b0 01       	movw	r22, r0
    1bc6:	b3 9f       	mul	r27, r19
    1bc8:	c0 01       	movw	r24, r0
    1bca:	a3 9f       	mul	r26, r19
    1bcc:	70 0d       	add	r23, r0
    1bce:	81 1d       	adc	r24, r1
    1bd0:	11 24       	eor	r1, r1
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	b2 9f       	mul	r27, r18
    1bd6:	70 0d       	add	r23, r0
    1bd8:	81 1d       	adc	r24, r1
    1bda:	11 24       	eor	r1, r1
    1bdc:	91 1d       	adc	r25, r1
    1bde:	08 95       	ret

00001be0 <__udivmodhi4>:
    1be0:	aa 1b       	sub	r26, r26
    1be2:	bb 1b       	sub	r27, r27
    1be4:	51 e1       	ldi	r21, 0x11	; 17
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <__udivmodhi4_ep>

00001be8 <__udivmodhi4_loop>:
    1be8:	aa 1f       	adc	r26, r26
    1bea:	bb 1f       	adc	r27, r27
    1bec:	a6 17       	cp	r26, r22
    1bee:	b7 07       	cpc	r27, r23
    1bf0:	10 f0       	brcs	.+4      	; 0x1bf6 <__udivmodhi4_ep>
    1bf2:	a6 1b       	sub	r26, r22
    1bf4:	b7 0b       	sbc	r27, r23

00001bf6 <__udivmodhi4_ep>:
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	5a 95       	dec	r21
    1bfc:	a9 f7       	brne	.-22     	; 0x1be8 <__udivmodhi4_loop>
    1bfe:	80 95       	com	r24
    1c00:	90 95       	com	r25
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	08 95       	ret

00001c08 <eeprom_read_byte>:
    1c08:	f9 99       	sbic	0x1f, 1	; 31
    1c0a:	fe cf       	rjmp	.-4      	; 0x1c08 <eeprom_read_byte>
    1c0c:	92 bd       	out	0x22, r25	; 34
    1c0e:	81 bd       	out	0x21, r24	; 33
    1c10:	f8 9a       	sbi	0x1f, 0	; 31
    1c12:	99 27       	eor	r25, r25
    1c14:	80 b5       	in	r24, 0x20	; 32
    1c16:	08 95       	ret

00001c18 <eeprom_write_byte>:
    1c18:	26 2f       	mov	r18, r22

00001c1a <eeprom_write_r18>:
    1c1a:	f9 99       	sbic	0x1f, 1	; 31
    1c1c:	fe cf       	rjmp	.-4      	; 0x1c1a <eeprom_write_r18>
    1c1e:	1f ba       	out	0x1f, r1	; 31
    1c20:	92 bd       	out	0x22, r25	; 34
    1c22:	81 bd       	out	0x21, r24	; 33
    1c24:	20 bd       	out	0x20, r18	; 32
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	fa 9a       	sbi	0x1f, 2	; 31
    1c2c:	f9 9a       	sbi	0x1f, 1	; 31
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	08 95       	ret

00001c34 <_exit>:
    1c34:	f8 94       	cli

00001c36 <__stop_program>:
    1c36:	ff cf       	rjmp	.-2      	; 0x1c36 <__stop_program>
