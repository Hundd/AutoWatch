
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001460  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000014d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d26  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000738  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091d  00000000  00000000  00003b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00004420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097a  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c67  00000000  00000000  00005362  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_16>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_21>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	04 08       	sbc	r0, r4
      6a:	0c 08       	sbc	r0, r12
      6c:	10 08       	sbc	r1, r0
      6e:	16 08       	sbc	r1, r6
      70:	1b 08       	sbc	r1, r11
      72:	20 08       	sbc	r2, r0
      74:	27 08       	sbc	r2, r7
      76:	2f 08       	sbc	r2, r15
      78:	36 08       	sbc	r3, r6
      7a:	3e 08       	sbc	r3, r14
      7c:	4c 08       	sbc	r4, r12
      7e:	4c 08       	sbc	r4, r12
      80:	4c 08       	sbc	r4, r12
      82:	4c 08       	sbc	r4, r12
      84:	4c 08       	sbc	r4, r12
      86:	4c 08       	sbc	r4, r12
      88:	4c 08       	sbc	r4, r12
      8a:	4c 08       	sbc	r4, r12
      8c:	4c 08       	sbc	r4, r12
      8e:	4c 08       	sbc	r4, r12
      90:	4c 08       	sbc	r4, r12
      92:	4c 08       	sbc	r4, r12
      94:	4c 08       	sbc	r4, r12
      96:	4c 08       	sbc	r4, r12
      98:	4c 08       	sbc	r4, r12
      9a:	4c 08       	sbc	r4, r12
      9c:	4c 08       	sbc	r4, r12
      9e:	4c 08       	sbc	r4, r12
      a0:	4c 08       	sbc	r4, r12
      a2:	4c 08       	sbc	r4, r12
      a4:	4c 08       	sbc	r4, r12
      a6:	4c 08       	sbc	r4, r12
      a8:	4c 08       	sbc	r4, r12
      aa:	4c 08       	sbc	r4, r12
      ac:	4c 08       	sbc	r4, r12
      ae:	4c 08       	sbc	r4, r12
      b0:	4c 08       	sbc	r4, r12
      b2:	4c 08       	sbc	r4, r12
      b4:	4c 08       	sbc	r4, r12
      b6:	4c 08       	sbc	r4, r12
      b8:	4c 08       	sbc	r4, r12
      ba:	4c 08       	sbc	r4, r12
      bc:	4c 08       	sbc	r4, r12
      be:	4c 08       	sbc	r4, r12
      c0:	4c 08       	sbc	r4, r12
      c2:	4a 08       	sbc	r4, r10
      c4:	4c 08       	sbc	r4, r12
      c6:	4c 08       	sbc	r4, r12
      c8:	4c 08       	sbc	r4, r12
      ca:	4c 08       	sbc	r4, r12
      cc:	4c 08       	sbc	r4, r12
      ce:	4c 08       	sbc	r4, r12
      d0:	4c 08       	sbc	r4, r12
      d2:	4c 08       	sbc	r4, r12
      d4:	4c 08       	sbc	r4, r12
      d6:	4c 08       	sbc	r4, r12
      d8:	4c 08       	sbc	r4, r12
      da:	4c 08       	sbc	r4, r12
      dc:	4c 08       	sbc	r4, r12
      de:	4c 08       	sbc	r4, r12
      e0:	4c 08       	sbc	r4, r12
      e2:	4c 08       	sbc	r4, r12
      e4:	4c 08       	sbc	r4, r12
      e6:	4c 08       	sbc	r4, r12
      e8:	4c 08       	sbc	r4, r12
      ea:	4c 08       	sbc	r4, r12
      ec:	4c 08       	sbc	r4, r12
      ee:	4c 08       	sbc	r4, r12
      f0:	4c 08       	sbc	r4, r12
      f2:	4c 08       	sbc	r4, r12
      f4:	4c 08       	sbc	r4, r12
      f6:	4c 08       	sbc	r4, r12
      f8:	4c 08       	sbc	r4, r12
      fa:	4c 08       	sbc	r4, r12
      fc:	4c 08       	sbc	r4, r12
      fe:	4c 08       	sbc	r4, r12
     100:	4c 08       	sbc	r4, r12
     102:	4c 08       	sbc	r4, r12
     104:	4c 08       	sbc	r4, r12
     106:	4c 08       	sbc	r4, r12
     108:	4c 08       	sbc	r4, r12
     10a:	4c 08       	sbc	r4, r12
     10c:	4c 08       	sbc	r4, r12
     10e:	4c 08       	sbc	r4, r12
     110:	4c 08       	sbc	r4, r12
     112:	4c 08       	sbc	r4, r12
     114:	4c 08       	sbc	r4, r12
     116:	4c 08       	sbc	r4, r12
     118:	4c 08       	sbc	r4, r12
     11a:	4c 08       	sbc	r4, r12
     11c:	4c 08       	sbc	r4, r12
     11e:	4c 08       	sbc	r4, r12
     120:	4c 08       	sbc	r4, r12
     122:	4c 08       	sbc	r4, r12
     124:	4c 08       	sbc	r4, r12
     126:	4c 08       	sbc	r4, r12
     128:	4c 08       	sbc	r4, r12
     12a:	4c 08       	sbc	r4, r12
     12c:	4c 08       	sbc	r4, r12
     12e:	4c 08       	sbc	r4, r12
     130:	4c 08       	sbc	r4, r12
     132:	4c 08       	sbc	r4, r12
     134:	4c 08       	sbc	r4, r12
     136:	4c 08       	sbc	r4, r12
     138:	4c 08       	sbc	r4, r12
     13a:	4c 08       	sbc	r4, r12
     13c:	4c 08       	sbc	r4, r12
     13e:	4c 08       	sbc	r4, r12
     140:	4c 08       	sbc	r4, r12
     142:	4c 08       	sbc	r4, r12
     144:	4c 08       	sbc	r4, r12
     146:	4c 08       	sbc	r4, r12
     148:	4c 08       	sbc	r4, r12
     14a:	4c 08       	sbc	r4, r12
     14c:	4c 08       	sbc	r4, r12
     14e:	4c 08       	sbc	r4, r12
     150:	4c 08       	sbc	r4, r12
     152:	45 08       	sbc	r4, r5

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d8 e0       	ldi	r29, 0x08	; 8
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	e0 e6       	ldi	r30, 0x60	; 96
     168:	f4 e1       	ldi	r31, 0x14	; 20
     16a:	02 c0       	rjmp	.+4      	; 0x170 <__do_copy_data+0x10>
     16c:	05 90       	lpm	r0, Z+
     16e:	0d 92       	st	X+, r0
     170:	a0 30       	cpi	r26, 0x00	; 0
     172:	b1 07       	cpc	r27, r17
     174:	d9 f7       	brne	.-10     	; 0x16c <__do_copy_data+0xc>

00000176 <__do_clear_bss>:
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
     17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
     180:	ac 30       	cpi	r26, 0x0C	; 12
     182:	b2 07       	cpc	r27, r18
     184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
     186:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <main>
     18a:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <_Z5resetPVhS0_h>:
		
    }
}
*/
void reset(volatile uint8_t *port,volatile uint8_t * ddr,uint8_t pin)
{
     192:	dc 01       	movw	r26, r24
     194:	fb 01       	movw	r30, r22
	*ddr|=(1<<pin);
     196:	80 81       	ld	r24, Z
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_Z5resetPVhS0_h+0x10>
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	4a 95       	dec	r20
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <_Z5resetPVhS0_h+0xc>
     1a6:	82 2b       	or	r24, r18
     1a8:	80 83       	st	Z, r24
	*port&=~(1<<pin);//pin off
     1aa:	9c 91       	ld	r25, X
     1ac:	32 2f       	mov	r19, r18
     1ae:	30 95       	com	r19
     1b0:	93 23       	and	r25, r19
     1b2:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b4:	87 ee       	ldi	r24, 0xE7	; 231
     1b6:	93 e0       	ldi	r25, 0x03	; 3
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z5resetPVhS0_h+0x26>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z5resetPVhS0_h+0x2c>
     1be:	00 00       	nop
	_delay_us(500);
	*port|=1<<pin;//pint on
     1c0:	8c 91       	ld	r24, X
     1c2:	28 2b       	or	r18, r24
     1c4:	2c 93       	st	X, r18
	*ddr&=~(1<<pin);
     1c6:	80 81       	ld	r24, Z
     1c8:	83 23       	and	r24, r19
     1ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1cc:	8f ec       	ldi	r24, 0xCF	; 207
     1ce:	97 e0       	ldi	r25, 0x07	; 7
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z5resetPVhS0_h+0x3e>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z5resetPVhS0_h+0x44>
     1d6:	00 00       	nop
     1d8:	08 95       	ret

000001da <_Z11SendToPort1PVhS0_h>:
	_delay_ms(1);
	
	
}
void SendToPort1(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     1da:	dc 01       	movw	r26, r24
     1dc:	fb 01       	movw	r30, r22
     1de:	f8 94       	cli
	*ddr|=(1<<pin);
     1e0:	90 81       	ld	r25, Z
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <_Z11SendToPort1PVhS0_h+0x12>
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	4a 95       	dec	r20
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <_Z11SendToPort1PVhS0_h+0xe>
     1f0:	92 2b       	or	r25, r18
     1f2:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     1f4:	9c 91       	ld	r25, X
     1f6:	20 95       	com	r18
     1f8:	92 23       	and	r25, r18
     1fa:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fc:	8a e0       	ldi	r24, 0x0A	; 10
     1fe:	8a 95       	dec	r24
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z11SendToPort1PVhS0_h+0x24>
     202:	00 c0       	rjmp	.+0      	; 0x204 <_Z11SendToPort1PVhS0_h+0x2a>
	_delay_us(4);
	*ddr&=~(1<<pin);
     204:	80 81       	ld	r24, Z
     206:	28 23       	and	r18, r24
     208:	20 83       	st	Z, r18
     20a:	8a ec       	ldi	r24, 0xCA	; 202
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <_Z11SendToPort1PVhS0_h+0x32>
     210:	00 c0       	rjmp	.+0      	; 0x212 <_Z11SendToPort1PVhS0_h+0x38>
     212:	08 95       	ret

00000214 <_Z11SendToPort0PVhS0_h>:
	//*port|=1<<pin;//pint on
	//sei();
	_delay_us(76);
}
void SendToPort0(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin)
{	cli();
     214:	dc 01       	movw	r26, r24
     216:	fb 01       	movw	r30, r22
     218:	f8 94       	cli
	*ddr|=(1<<pin);
     21a:	90 81       	ld	r25, Z
     21c:	21 e0       	ldi	r18, 0x01	; 1
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	02 c0       	rjmp	.+4      	; 0x226 <_Z11SendToPort0PVhS0_h+0x12>
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
     226:	4a 95       	dec	r20
     228:	e2 f7       	brpl	.-8      	; 0x222 <_Z11SendToPort0PVhS0_h+0xe>
     22a:	92 2b       	or	r25, r18
     22c:	90 83       	st	Z, r25
	*port&=~(1<<pin);//pin off
     22e:	9c 91       	ld	r25, X
     230:	20 95       	com	r18
     232:	92 23       	and	r25, r18
     234:	9c 93       	st	X, r25
     236:	8a ea       	ldi	r24, 0xAA	; 170
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <_Z11SendToPort0PVhS0_h+0x24>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z11SendToPort0PVhS0_h+0x2a>
	_delay_us(64);
	*ddr&=~(1<<pin);
     23e:	80 81       	ld	r24, Z
     240:	28 23       	and	r18, r24
     242:	20 83       	st	Z, r18
     244:	8a e2       	ldi	r24, 0x2A	; 42
     246:	8a 95       	dec	r24
     248:	f1 f7       	brne	.-4      	; 0x246 <_Z11SendToPort0PVhS0_h+0x32>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <_Z11SendToPort0PVhS0_h+0x38>
     24c:	08 95       	ret

0000024e <_Z14SendByteToPortPVhS0_hh>:
	_delay_us(16);
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	6c 01       	movw	r12, r24
     260:	7b 01       	movw	r14, r22
     262:	04 2f       	mov	r16, r20
     264:	12 2f       	mov	r17, r18
     266:	c8 e0       	ldi	r28, 0x08	; 8
     268:	d0 e0       	ldi	r29, 0x00	; 0
		
		for (i=0;i<8;i++)
		{	if (byte&mask)
     26a:	10 ff       	sbrs	r17, 0
     26c:	06 c0       	rjmp	.+12     	; 0x27a <_Z14SendByteToPortPVhS0_hh+0x2c>
			SendToPort1(port,ddr,pin);
     26e:	40 2f       	mov	r20, r16
     270:	b7 01       	movw	r22, r14
     272:	c6 01       	movw	r24, r12
     274:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z11SendToPort1PVhS0_h>
     278:	05 c0       	rjmp	.+10     	; 0x284 <_Z14SendByteToPortPVhS0_hh+0x36>
			else SendToPort0(port,ddr,pin);
     27a:	40 2f       	mov	r20, r16
     27c:	b7 01       	movw	r22, r14
     27e:	c6 01       	movw	r24, r12
     280:	0e 94 0a 01 	call	0x214	; 0x214 <_Z11SendToPort0PVhS0_h>
			byte>>=1;
     284:	16 95       	lsr	r17
     286:	21 97       	sbiw	r28, 0x01	; 1
	//sei();
}
	void SendByteToPort(volatile uint8_t *port,volatile uint8_t *ddr,uint8_t pin,uint8_t byte)
	{	int i; int 	mask=1;
		
		for (i=0;i<8;i++)
     288:	81 f7       	brne	.-32     	; 0x26a <_Z14SendByteToPortPVhS0_hh+0x1c>
		
		}
	
		

	}
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	08 95       	ret

0000029c <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
     29c:	4f 92       	push	r4
     29e:	5f 92       	push	r5
     2a0:	7f 92       	push	r7
     2a2:	8f 92       	push	r8
     2a4:	9f 92       	push	r9
     2a6:	af 92       	push	r10
     2a8:	bf 92       	push	r11
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	db 01       	movw	r26, r22
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
     2bc:	f8 94       	cli
		for (i=0;i<number_of_bytes;i++)
     2be:	ee 20       	and	r14, r14
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x28>
     2c2:	52 c0       	rjmp	.+164    	; 0x368 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xcc>
		{	bytes[i]=0;
			for (j=0;j<8;j++)
			{
				*ddr|=(1<<pin);
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	02 2e       	mov	r0, r18
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x34>
     2cc:	66 0f       	add	r22, r22
     2ce:	77 1f       	adc	r23, r23
     2d0:	0a 94       	dec	r0
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x30>
     2d4:	b6 2e       	mov	r11, r22
				*port&=~(1<<pin);//pin off
     2d6:	f6 2e       	mov	r15, r22
     2d8:	f0 94       	com	r15
     2da:	68 01       	movw	r12, r16
     2dc:	48 01       	movw	r8, r16
     2de:	8e 0c       	add	r8, r14
     2e0:	91 1c       	adc	r9, r1
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     2e2:	e1 2c       	mov	r14, r1
     2e4:	a1 2c       	mov	r10, r1
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     2e6:	07 e0       	ldi	r16, 0x07	; 7
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	02 1b       	sub	r16, r18
     2ec:	11 09       	sbc	r17, r1
     2ee:	26 01       	movw	r4, r12
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
     2f0:	e6 01       	movw	r28, r12
     2f2:	18 82       	st	Y, r1
			for (j=0;j<8;j++)
     2f4:	ee 2d       	mov	r30, r14
     2f6:	fa 2d       	mov	r31, r10
			{
				*ddr|=(1<<pin);
     2f8:	2c 91       	ld	r18, X
     2fa:	2b 29       	or	r18, r11
     2fc:	2c 93       	st	X, r18
				*port&=~(1<<pin);//pin off
     2fe:	ec 01       	movw	r28, r24
     300:	28 81       	ld	r18, Y
     302:	2f 21       	and	r18, r15
     304:	28 83       	st	Y, r18
     306:	d5 e0       	ldi	r29, 0x05	; 5
     308:	da 95       	dec	r29
     30a:	f1 f7       	brne	.-4      	; 0x308 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x6c>
     30c:	00 00       	nop
				_delay_us(2);//4
				*ddr&=~(1<<pin);
     30e:	2c 91       	ld	r18, X
     310:	2f 21       	and	r18, r15
     312:	2c 93       	st	X, r18
     314:	2a e2       	ldi	r18, 0x2A	; 42
     316:	2a 95       	dec	r18
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x7a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x80>
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     31c:	ea 01       	movw	r28, r20
     31e:	28 81       	ld	r18, Y
     320:	e2 01       	movw	r28, r4
     322:	78 80       	ld	r7, Y
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	26 23       	and	r18, r22
     328:	37 23       	and	r19, r23
     32a:	00 2e       	mov	r0, r16
     32c:	02 c0       	rjmp	.+4      	; 0x332 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x96>
     32e:	22 0f       	add	r18, r18
     330:	33 1f       	adc	r19, r19
     332:	0a 94       	dec	r0
     334:	e2 f7       	brpl	.-8      	; 0x32e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x92>
     336:	27 29       	or	r18, r7
				if(j<7) bytes[i]>>=1;
     338:	e7 30       	cpi	r30, 0x07	; 7
     33a:	f1 05       	cpc	r31, r1
     33c:	14 f0       	brlt	.+4      	; 0x342 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
				*port&=~(1<<pin);//pin off
				_delay_us(2);//4
				*ddr&=~(1<<pin);
				_delay_us(16);//32
				//bytes[i]|=(*port_pin)&0x80;
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
     33e:	28 83       	st	Y, r18
     340:	05 c0       	rjmp	.+10     	; 0x34c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb0>
				if(j<7) bytes[i]>>=1;
     342:	33 27       	eor	r19, r19
     344:	35 95       	asr	r19
     346:	27 95       	ror	r18
     348:	e2 01       	movw	r28, r4
     34a:	28 83       	st	Y, r18
     34c:	d5 e7       	ldi	r29, 0x75	; 117
     34e:	da 95       	dec	r29
     350:	f1 f7       	brne	.-4      	; 0x34e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xb2>
     352:	00 00       	nop
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
		{	bytes[i]=0;
			for (j=0;j<8;j++)
     354:	31 96       	adiw	r30, 0x01	; 1
     356:	e8 30       	cpi	r30, 0x08	; 8
     358:	f1 05       	cpc	r31, r1
     35a:	71 f6       	brne	.-100    	; 0x2f8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x5c>
     35c:	ef ef       	ldi	r30, 0xFF	; 255
     35e:	ce 1a       	sub	r12, r30
     360:	de 0a       	sbc	r13, r30
	void ReadBytesFromPort(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t *bytes,uint8_t number_of_bytes)
	{
		int i=0;//counter of bytes
		int j=0;//counter of bits
		cli();
		for (i=0;i<number_of_bytes;i++)
     362:	c8 14       	cp	r12, r8
     364:	d9 04       	cpc	r13, r9
     366:	19 f6       	brne	.-122    	; 0x2ee <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
				bytes[i]|=((*port_pin)&(1<<pin))<<(7-pin);
				if(j<7) bytes[i]>>=1;
				_delay_us(44);
			}			
		}
		sei();
     368:	78 94       	sei
	}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	5f 90       	pop	r5
     386:	4f 90       	pop	r4
     388:	08 95       	ret

0000038a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
     396:	8b 01       	movw	r16, r22
     398:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     39a:	42 2f       	mov	r20, r18
     39c:	0e 94 c9 00 	call	0x192	; 0x192 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3a0:	2c ec       	ldi	r18, 0xCC	; 204
     3a2:	4f 2d       	mov	r20, r15
     3a4:	b8 01       	movw	r22, r16
     3a6:	ce 01       	movw	r24, r28
     3a8:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3ac:	24 e4       	ldi	r18, 0x44	; 68
     3ae:	4f 2d       	mov	r20, r15
     3b0:	b8 01       	movw	r22, r16
     3b2:	ce 01       	movw	r24, r28
     3b4:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
	}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	08 95       	ret

000003c4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
     3da:	6b 01       	movw	r12, r22
     3dc:	5a 01       	movw	r10, r20
     3de:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3e0:	42 2f       	mov	r20, r18
     3e2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3e6:	2c ec       	ldi	r18, 0xCC	; 204
     3e8:	4f 2d       	mov	r20, r15
     3ea:	b6 01       	movw	r22, r12
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     3f2:	2e eb       	ldi	r18, 0xBE	; 190
     3f4:	4f 2d       	mov	r20, r15
     3f6:	b6 01       	movw	r22, r12
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     3fe:	0f 2e       	mov	r0, r31
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f0 2d       	mov	r31, r0
     406:	2f 2d       	mov	r18, r15
     408:	a5 01       	movw	r20, r10
     40a:	b6 01       	movw	r22, r12
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	08 95       	ret

00000428 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
		AdcClass::Data = ADC;
     436:	80 91 78 00 	lds	r24, 0x0078
     43a:	90 91 79 00 	lds	r25, 0x0079
     43e:	90 93 0a 01 	sts	0x010A, r25
     442:	80 93 09 01 	sts	0x0109, r24
		AdcClass::DataReady = true;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 0b 01 	sts	0x010B, r24
     44c:	8a e1       	ldi	r24, 0x1A	; 26
     44e:	8a 95       	dec	r24
     450:	f1 f7       	brne	.-4      	; 0x44e <__vector_21+0x26>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_16>:
		}

    }
}

ISR(TIMER0_OVF_vect){
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	static uint8_t iov=0;
	ClrScr();
     484:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z6ClrScrv>
	Display7seg(screen_arr[iov],iov == screen_arr[4]);
     488:	20 91 08 01 	lds	r18, 0x0108
     48c:	90 91 03 01 	lds	r25, 0x0103
     490:	e9 2f       	mov	r30, r25
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	ec 5f       	subi	r30, 0xFC	; 252
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 81       	ld	r24, Z
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	29 13       	cpse	r18, r25
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_Z11Display7seghb>
	NextDigit(4-iov);
     4a4:	90 91 03 01 	lds	r25, 0x0103
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	89 1b       	sub	r24, r25
     4ac:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_Z9NextDigith>
	//Display7seg(screen_arr[iov],iov == screen_arr[4]);
	iov += 1;
     4b0:	80 91 03 01 	lds	r24, 0x0103
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
	if(iov > 3) iov=0;
     4b6:	84 30       	cpi	r24, 0x04	; 4
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <__vector_16+0x5e>
	static uint8_t iov=0;
	ClrScr();
	Display7seg(screen_arr[iov],iov == screen_arr[4]);
	NextDigit(4-iov);
	//Display7seg(screen_arr[iov],iov == screen_arr[4]);
	iov += 1;
     4ba:	80 93 03 01 	sts	0x0103, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__vector_16+0x62>
	if(iov > 3) iov=0;
     4c0:	10 92 03 01 	sts	0x0103, r1
}
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	bf 91       	pop	r27
     4ca:	af 91       	pop	r26
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	7f 91       	pop	r23
     4d2:	6f 91       	pop	r22
     4d4:	5f 91       	pop	r21
     4d6:	4f 91       	pop	r20
     4d8:	3f 91       	pop	r19
     4da:	2f 91       	pop	r18
     4dc:	0f 90       	pop	r0
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	0f 90       	pop	r0
     4e2:	1f 90       	pop	r1
     4e4:	18 95       	reti

000004e6 <_Z21EnableTimer0Interruptv>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
     4e6:	ee e6       	ldi	r30, 0x6E	; 110
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	80 83       	st	Z, r24
	TCCR0B = 2;//Prescaler
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	08 95       	ret

000004f6 <_Z10keyCheckerv>:
*PORTD4 SETUP
*/	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	//DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
	//PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
	uint8_t keyState = PIND;
     4f6:	89 b1       	in	r24, 0x09	; 9
	 keyState = (~keyState >> 3) & 3;
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	80 95       	com	r24
     4fc:	90 95       	com	r25
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	83 70       	andi	r24, 0x03	; 3
	if (keyState == keyStatePrevious && keyState) {
     50c:	90 91 02 01 	lds	r25, 0x0102
     510:	89 13       	cpse	r24, r25
     512:	22 c0       	rjmp	.+68     	; 0x558 <_Z10keyCheckerv+0x62>
     514:	88 23       	and	r24, r24
     516:	01 f1       	breq	.+64     	; 0x558 <_Z10keyCheckerv+0x62>
		if (times < 1500) {
     518:	20 91 00 01 	lds	r18, 0x0100
     51c:	30 91 01 01 	lds	r19, 0x0101
     520:	2c 3d       	cpi	r18, 0xDC	; 220
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	39 07       	cpc	r19, r25
     526:	60 f4       	brcc	.+24     	; 0x540 <_Z10keyCheckerv+0x4a>
			times += 1;
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	30 93 01 01 	sts	0x0101, r19
     530:	20 93 00 01 	sts	0x0100, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     534:	ef ec       	ldi	r30, 0xCF	; 207
     536:	f7 e0       	ldi	r31, 0x07	; 7
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <_Z10keyCheckerv+0x42>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <_Z10keyCheckerv+0x48>
     53e:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10) {
     540:	20 91 00 01 	lds	r18, 0x0100
     544:	30 91 01 01 	lds	r19, 0x0101
     548:	2a 30       	cpi	r18, 0x0A	; 10
     54a:	31 05       	cpc	r19, r1
     54c:	71 f0       	breq	.+28     	; 0x56a <_Z10keyCheckerv+0x74>
			return keyState;
		}
		if (times == 1000) {
     54e:	28 3e       	cpi	r18, 0xE8	; 232
     550:	33 40       	sbci	r19, 0x03	; 3
     552:	51 f0       	breq	.+20     	; 0x568 <_Z10keyCheckerv+0x72>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	08 95       	ret
		if (times == 1000) {
			return 3;
		}
	}
	else {
		keyStatePrevious = keyState;
     558:	80 93 02 01 	sts	0x0102, r24
		times = 0;
     55c:	10 92 01 01 	sts	0x0101, r1
     560:	10 92 00 01 	sts	0x0100, r1
	}

	return 0;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	08 95       	ret
		}
		if (times == 10) {
			return keyState;
		}
		if (times == 1000) {
			return 3;
     568:	83 e0       	ldi	r24, 0x03	; 3
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
}
     56a:	08 95       	ret

0000056c <_Z6dsModev>:
		}
	}
	
}

uint8_t dsMode() {
     56c:	2f 92       	push	r2
     56e:	3f 92       	push	r3
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	29 97       	sbiw	r28, 0x09	; 9
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     5a0:	e4 e0       	ldi	r30, 0x04	; 4
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     5a8:	8d e2       	ldi	r24, 0x2D	; 45
     5aa:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     5ac:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     5ae:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     5b0:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     5b2:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     5b8:	31 2c       	mov	r3, r1
     5ba:	41 2c       	mov	r4, r1
			else {
				screen_arr[3] = -1;
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     5bc:	6f 01       	movw	r12, r30
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
     5be:	0f 2e       	mov	r0, r31
     5c0:	fa e0       	ldi	r31, 0x0A	; 10
     5c2:	af 2e       	mov	r10, r31
     5c4:	b1 2c       	mov	r11, r1
     5c6:	f0 2d       	mov	r31, r0
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     5c8:	22 24       	eor	r2, r2
     5ca:	2a 94       	dec	r2
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
					
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f4 e6       	ldi	r31, 0x64	; 100
     5d0:	8f 2e       	mov	r8, r31
     5d2:	91 2c       	mov	r9, r1
     5d4:	f0 2d       	mov	r31, r0
					
					
			if(temper < 0) {
				screen_arr[3] = '-';
				temper *= -1;
				temper += 1;
     5d6:	66 24       	eor	r6, r6
     5d8:	63 94       	inc	r6
     5da:	71 2c       	mov	r7, r1
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <_Z6dsModev+0x76>
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     5de:	e3 2c       	mov	r14, r3
     5e0:	f4 2c       	mov	r15, r4
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while(true){
		if(inner_counter == 0)
     5e2:	e1 14       	cp	r14, r1
     5e4:	f1 04       	cpc	r15, r1
     5e6:	81 f4       	brne	.+32     	; 0x608 <_Z6dsModev+0x9c>
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	49 e2       	ldi	r20, 0x29	; 41
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	6a e2       	ldi	r22, 0x2A	; 42
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     5fa:	78 94       	sei
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     5fc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	09 f0       	breq	.+2      	; 0x606 <_Z6dsModev+0x9a>
     604:	8c c0       	rjmp	.+280    	; 0x71e <_Z6dsModev+0x1b2>
     606:	7e c0       	rjmp	.+252    	; 0x704 <_Z6dsModev+0x198>
		if(inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
			sei();
		}
		if(inner_counter == 1000)
     608:	88 ee       	ldi	r24, 0xE8	; 232
     60a:	e8 16       	cp	r14, r24
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	f8 06       	cpc	r15, r24
     610:	09 f0       	breq	.+2      	; 0x614 <_Z6dsModev+0xa8>
     612:	5e c0       	rjmp	.+188    	; 0x6d0 <_Z6dsModev+0x164>
		{
			ReadTemperatureArr(&PORTD,&DDRD,&PIND,PIND2,temperatureArr);
     614:	8e 01       	movw	r16, r28
     616:	0f 5f       	subi	r16, 0xFF	; 255
     618:	1f 4f       	sbci	r17, 0xFF	; 255
     61a:	22 e0       	ldi	r18, 0x02	; 2
     61c:	49 e2       	ldi	r20, 0x29	; 41
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	6a e2       	ldi	r22, 0x2A	; 42
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	8b e2       	ldi	r24, 0x2B	; 43
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     62c:	2a 81       	ldd	r18, Y+2	; 0x02
     62e:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     630:	32 2f       	mov	r19, r18
     632:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	28 2b       	or	r18, r24
					
					
			if(temper < 0) {
     638:	33 23       	and	r19, r19
     63a:	44 f4       	brge	.+16     	; 0x64c <_Z6dsModev+0xe0>
				screen_arr[3] = '-';
     63c:	8d e2       	ldi	r24, 0x2D	; 45
     63e:	f6 01       	movw	r30, r12
     640:	83 83       	std	Z+3, r24	; 0x03
				temper *= -1;
				temper += 1;
     642:	f3 01       	movw	r30, r6
     644:	e2 1b       	sub	r30, r18
     646:	f3 0b       	sbc	r31, r19
     648:	9f 01       	movw	r18, r30
     64a:	02 c0       	rjmp	.+4      	; 0x650 <_Z6dsModev+0xe4>
			}
			else {
				screen_arr[3] = -1;
     64c:	f6 01       	movw	r30, r12
     64e:	23 82       	std	Z+3, r2	; 0x03
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     650:	c9 01       	movw	r24, r18
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	99 27       	eor	r25, r25
     656:	ac 01       	movw	r20, r24
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	84 0f       	add	r24, r20
     66a:	95 1f       	adc	r25, r21
     66c:	95 95       	asr	r25
     66e:	87 95       	ror	r24
     670:	95 95       	asr	r25
     672:	87 95       	ror	r24
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	95 95       	asr	r25
     67a:	87 95       	ror	r24
     67c:	f6 01       	movw	r30, r12
     67e:	80 83       	st	Z, r24
					
			temper>>=4;
     680:	35 95       	asr	r19
     682:	27 95       	ror	r18
     684:	35 95       	asr	r19
     686:	27 95       	ror	r18
     688:	35 95       	asr	r19
     68a:	27 95       	ror	r18
     68c:	35 95       	asr	r19
     68e:	27 95       	ror	r18
			if(temper >= 100) {
     690:	24 36       	cpi	r18, 0x64	; 100
     692:	31 05       	cpc	r19, r1
     694:	3c f0       	brlt	.+14     	; 0x6a4 <_Z6dsModev+0x138>
				screen_arr[3] = temper/100;
     696:	c9 01       	movw	r24, r18
     698:	b4 01       	movw	r22, r8
     69a:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divmodhi4>
     69e:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     6a0:	28 2f       	mov	r18, r24
     6a2:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     6a4:	c9 01       	movw	r24, r18
     6a6:	09 96       	adiw	r24, 0x09	; 9
     6a8:	43 97       	sbiw	r24, 0x13	; 19
     6aa:	28 f0       	brcs	.+10     	; 0x6b6 <_Z6dsModev+0x14a>
     6ac:	c9 01       	movw	r24, r18
     6ae:	b5 01       	movw	r22, r10
     6b0:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divmodhi4>
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <_Z6dsModev+0x14c>
     6b6:	62 2d       	mov	r22, r2
     6b8:	f6 01       	movw	r30, r12
     6ba:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper%10;
     6bc:	c9 01       	movw	r24, r18
     6be:	b5 01       	movw	r22, r10
     6c0:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divmodhi4>
     6c4:	81 83       	std	Z+1, r24	; 0x01
		}


		uint8_t key = keyChecker();
     6c6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	09 f5       	brne	.+66     	; 0x710 <_Z6dsModev+0x1a4>
     6ce:	1c c0       	rjmp	.+56     	; 0x708 <_Z6dsModev+0x19c>
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     6d0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
			if (key == 1) return 2;
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	d1 f0       	breq	.+52     	; 0x70c <_Z6dsModev+0x1a0>
     6d8:	8f ec       	ldi	r24, 0xCF	; 207
     6da:	97 e0       	ldi	r25, 0x07	; 7
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <_Z6dsModev+0x170>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <_Z6dsModev+0x176>
     6e2:	00 00       	nop
			//if (key == 2) return 3;

		}
		_delay_ms(1);
		if(inner_counter <=1000)
     6e4:	99 ee       	ldi	r25, 0xE9	; 233
     6e6:	e9 16       	cp	r14, r25
     6e8:	93 e0       	ldi	r25, 0x03	; 3
     6ea:	f9 06       	cpc	r15, r25
     6ec:	20 f4       	brcc	.+8      	; 0x6f6 <_Z6dsModev+0x18a>
		inner_counter +=1;
     6ee:	ef ef       	ldi	r30, 0xFF	; 255
     6f0:	ee 1a       	sub	r14, r30
     6f2:	fe 0a       	sbc	r15, r30
     6f4:	76 cf       	rjmp	.-276    	; 0x5e2 <_Z6dsModev+0x76>
		else {
			inner_counter =0;
			exit_counter +=1;
     6f6:	53 94       	inc	r5
			if(exit_counter>7) return 0;
     6f8:	f7 e0       	ldi	r31, 0x07	; 7
     6fa:	f5 15       	cp	r31, r5
     6fc:	08 f0       	brcs	.+2      	; 0x700 <_Z6dsModev+0x194>
     6fe:	6f cf       	rjmp	.-290    	; 0x5de <_Z6dsModev+0x72>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	14 c0       	rjmp	.+40     	; 0x72c <_Z6dsModev+0x1c0>
		}


		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 2;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	12 c0       	rjmp	.+36     	; 0x72c <_Z6dsModev+0x1c0>
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	10 c0       	rjmp	.+32     	; 0x72c <_Z6dsModev+0x1c0>
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	0e c0       	rjmp	.+28     	; 0x72c <_Z6dsModev+0x1c0>
     710:	8f ec       	ldi	r24, 0xCF	; 207
     712:	97 e0       	ldi	r25, 0x07	; 7
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <_Z6dsModev+0x1a8>
     718:	00 c0       	rjmp	.+0      	; 0x71a <_Z6dsModev+0x1ae>
     71a:	00 00       	nop
     71c:	e8 cf       	rjmp	.-48     	; 0x6ee <_Z6dsModev+0x182>
     71e:	ef ec       	ldi	r30, 0xCF	; 207
     720:	f7 e0       	ldi	r31, 0x07	; 7
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <_Z6dsModev+0x1b6>
     726:	00 c0       	rjmp	.+0      	; 0x728 <_Z6dsModev+0x1bc>
     728:	00 00       	nop
     72a:	e1 cf       	rjmp	.-62     	; 0x6ee <_Z6dsModev+0x182>
			inner_counter =0;
			exit_counter +=1;
			if(exit_counter>7) return 0;
		}
	}
}
     72c:	29 96       	adiw	r28, 0x09	; 9
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	3f 90       	pop	r3
     75a:	2f 90       	pop	r2
     75c:	08 95       	ret

0000075e <_Z7acbModev>:

uint8_t acbMode() {
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
		screen_arr[4] = 1;
     778:	e4 e0       	ldi	r30, 0x04	; 4
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	84 83       	std	Z+4, r24	; 0x04
		screen_arr[3] = 'u';
     780:	85 e7       	ldi	r24, 0x75	; 117
     782:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[2] = -1;
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = -1;
     788:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[0] = -1;
     78a:	80 83       	st	Z, r24
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	94 e0       	ldi	r25, 0x04	; 4
     790:	90 93 0a 01 	sts	0x010A, r25
     794:	80 93 09 01 	sts	0x0109, r24
		DataReady = false;
     798:	10 92 0b 01 	sts	0x010B, r1
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     79c:	ec e7       	ldi	r30, 0x7C	; 124
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 7f       	andi	r24, 0xF0	; 240
     7a4:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     7a6:	80 81       	ld	r24, Z
     7a8:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     7aa:	ea e7       	ldi	r30, 0x7A	; 122
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	87 60       	ori	r24, 0x07	; 7
     7b2:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
     7b4:	80 81       	ld	r24, Z
     7b6:	88 60       	ori	r24, 0x08	; 8
     7b8:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
     7ba:	80 81       	ld	r24, Z
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
     7c0:	80 81       	ld	r24, Z
     7c2:	80 64       	ori	r24, 0x40	; 64
     7c4:	80 83       	st	Z, r24
		AdcClass adcOb;
		adcOb.Init();
		sei();
     7c6:	78 94       	sei
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f9 e5       	ldi	r31, 0x59	; 89
     7cc:	ef 2e       	mov	r14, r31
     7ce:	fb e1       	ldi	r31, 0x1B	; 27
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     7d4:	cc e7       	ldi	r28, 0x7C	; 124
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     7d8:	0f 2e       	mov	r0, r31
     7da:	fa e7       	ldi	r31, 0x7A	; 122
     7dc:	cf 2e       	mov	r12, r31
     7de:	d1 2c       	mov	r13, r1
     7e0:	f0 2d       	mov	r31, r0
		uint16_t exitCouter = 0;
		while(true){
			adcOb.MesureVoltage(PORTC0);
			screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     7e2:	0f 2e       	mov	r0, r31
     7e4:	fd ec       	ldi	r31, 0xCD	; 205
     7e6:	bf 2e       	mov	r11, r31
     7e8:	f0 2d       	mov	r31, r0
     7ea:	04 e0       	ldi	r16, 0x04	; 4
     7ec:	11 e0       	ldi	r17, 0x01	; 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     7ee:	88 81       	ld	r24, Y
     7f0:	8f 70       	andi	r24, 0x0F	; 15
     7f2:	88 83       	st	Y, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     7f4:	88 81       	ld	r24, Y
     7f6:	80 7f       	andi	r24, 0xF0	; 240
     7f8:	88 83       	st	Y, r24
		ADMUX |= NumberOfPin;
     7fa:	88 81       	ld	r24, Y
     7fc:	88 83       	st	Y, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     7fe:	f6 01       	movw	r30, r12
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     806:	80 91 0b 01 	lds	r24, 0x010B
     80a:	88 23       	and	r24, r24
     80c:	e1 f3       	breq	.-8      	; 0x806 <_Z7acbModev+0xa8>
		Voltage = CalculateVoltage(Data);
     80e:	60 91 09 01 	lds	r22, 0x0109
     812:	70 91 0a 01 	lds	r23, 0x010A
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     81e:	2a ea       	ldi	r18, 0xAA	; 170
     820:	31 ef       	ldi	r19, 0xF1	; 241
     822:	44 e9       	ldi	r20, 0x94	; 148
     824:	51 e4       	ldi	r21, 0x41	; 65
     826:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__divsf3>
     82a:	2b 01       	movw	r4, r22
     82c:	3c 01       	movw	r6, r24
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
     82e:	10 92 0b 01 	sts	0x010B, r1
     832:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     836:	6b 9d       	mul	r22, r11
     838:	81 2d       	mov	r24, r1
     83a:	11 24       	eor	r1, r1
     83c:	86 95       	lsr	r24
     83e:	86 95       	lsr	r24
     840:	86 95       	lsr	r24
     842:	f8 01       	movw	r30, r16
     844:	82 83       	std	Z+2, r24	; 0x02
			screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     846:	88 0f       	add	r24, r24
     848:	98 2f       	mov	r25, r24
     84a:	99 0f       	add	r25, r25
     84c:	99 0f       	add	r25, r25
     84e:	89 0f       	add	r24, r25
     850:	68 1b       	sub	r22, r24
     852:	61 83       	std	Z+1, r22	; 0x01
			screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e2       	ldi	r20, 0x20	; 32
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	c3 01       	movw	r24, r6
     85e:	b2 01       	movw	r22, r4
     860:	0e 94 93 09 	call	0x1326	; 0x1326 <__mulsf3>
     864:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     868:	6b 9d       	mul	r22, r11
     86a:	81 2d       	mov	r24, r1
     86c:	11 24       	eor	r1, r1
     86e:	86 95       	lsr	r24
     870:	86 95       	lsr	r24
     872:	86 95       	lsr	r24
     874:	88 0f       	add	r24, r24
     876:	98 2f       	mov	r25, r24
     878:	99 0f       	add	r25, r25
     87a:	99 0f       	add	r25, r25
     87c:	89 0f       	add	r24, r25
     87e:	68 1b       	sub	r22, r24
     880:	f8 01       	movw	r30, r16
     882:	60 83       	st	Z, r22


			uint8_t key = keyChecker();
     884:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
			if(key) {
				if (key == 1) return 0;
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	59 f0       	breq	.+22     	; 0x8a2 <_Z7acbModev+0x144>
     88c:	8f ec       	ldi	r24, 0xCF	; 207
     88e:	97 e0       	ldi	r25, 0x07	; 7
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <_Z7acbModev+0x132>
     894:	00 c0       	rjmp	.+0      	; 0x896 <_Z7acbModev+0x138>
     896:	00 00       	nop
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	e9 1a       	sub	r14, r25
     89c:	f1 08       	sbc	r15, r1
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
			if(exitCouter > 7000) return 0;
     89e:	09 f0       	breq	.+2      	; 0x8a2 <_Z7acbModev+0x144>
     8a0:	a6 cf       	rjmp	.-180    	; 0x7ee <_Z7acbModev+0x90>
		}
}
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	08 95       	ret

000008c0 <_Z12setupMinutesv>:

uint8_t setupMinutes () {
     8c0:	9f 92       	push	r9
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
     8d6:	e4 e0       	ldi	r30, 0x04	; 4
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	90 81       	ld	r25, Z
     8dc:	81 81       	ldd	r24, Z+1	; 0x01
     8de:	88 0f       	add	r24, r24
     8e0:	18 2f       	mov	r17, r24
     8e2:	11 0f       	add	r17, r17
     8e4:	11 0f       	add	r17, r17
     8e6:	81 0f       	add	r24, r17
     8e8:	18 2f       	mov	r17, r24
     8ea:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				minutes += 1;
				minutes %= 60;
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f9 e8       	ldi	r31, 0x89	; 137
     8f4:	9f 2e       	mov	r9, r31
     8f6:	f0 2d       	mov	r31, r0
     8f8:	0f 2e       	mov	r0, r31
     8fa:	fc e3       	ldi	r31, 0x3C	; 60
     8fc:	af 2e       	mov	r10, r31
     8fe:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
			screen_arr [0] = minutes % 10;
		}
		else {
			screen_arr [1] = -1;
     900:	7f 01       	movw	r14, r30
     902:	0f ef       	ldi	r16, 0xFF	; 255
			return 4;
			}

		}
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
     904:	0f 2e       	mov	r0, r31
     906:	fd ec       	ldi	r31, 0xCD	; 205
     908:	bf 2e       	mov	r11, r31
     90a:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     90c:	c1 2c       	mov	r12, r1
     90e:	d1 2c       	mov	r13, r1

uint8_t setupMinutes () {
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     910:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     914:	88 23       	and	r24, r24
     916:	81 f0       	breq	.+32     	; 0x938 <__stack+0x39>
			if (key == 1) {
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	61 f4       	brne	.+24     	; 0x934 <__stack+0x35>
				minutes += 1;
     91c:	81 0f       	add	r24, r17
				minutes %= 60;
     91e:	89 9d       	mul	r24, r9
     920:	11 2d       	mov	r17, r1
     922:	11 24       	eor	r1, r1
     924:	12 95       	swap	r17
     926:	16 95       	lsr	r17
     928:	17 70       	andi	r17, 0x07	; 7
     92a:	1a 9d       	mul	r17, r10
     92c:	80 19       	sub	r24, r0
     92e:	11 24       	eor	r1, r1
     930:	18 2f       	mov	r17, r24
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
				
			}
			if (key == 2) {
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	31 f1       	breq	.+76     	; 0x984 <__stack+0x85>
			screen_arr [0] = minutes % 10;
			return 4;
			}

		}
		if (blinker > 250) {
     938:	cb 3f       	cpi	r28, 0xFB	; 251
     93a:	d1 05       	cpc	r29, r1
     93c:	88 f0       	brcs	.+34     	; 0x960 <__stack+0x61>
			screen_arr [1] = minutes / 10;
     93e:	1b 9d       	mul	r17, r11
     940:	91 2d       	mov	r25, r1
     942:	11 24       	eor	r1, r1
     944:	96 95       	lsr	r25
     946:	96 95       	lsr	r25
     948:	96 95       	lsr	r25
     94a:	f7 01       	movw	r30, r14
     94c:	91 83       	std	Z+1, r25	; 0x01
			screen_arr [0] = minutes % 10;
     94e:	99 0f       	add	r25, r25
     950:	89 2f       	mov	r24, r25
     952:	88 0f       	add	r24, r24
     954:	88 0f       	add	r24, r24
     956:	98 0f       	add	r25, r24
     958:	81 2f       	mov	r24, r17
     95a:	89 1b       	sub	r24, r25
     95c:	80 83       	st	Z, r24
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
		}
		else {
			screen_arr [1] = -1;
     960:	f7 01       	movw	r30, r14
     962:	01 83       	std	Z+1, r16	; 0x01
			screen_arr [0] = -1;
     964:	00 83       	st	Z, r16
		}
		if (blinker < 500) {
     966:	c4 3f       	cpi	r28, 0xF4	; 244
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	df 07       	cpc	r29, r31
     96c:	10 f4       	brcc	.+4      	; 0x972 <__stack+0x73>
			blinker += 1;
     96e:	21 96       	adiw	r28, 0x01	; 1
     970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
		}
		else {
			blinker = 0;
     972:	cc 2d       	mov	r28, r12
     974:	dd 2d       	mov	r29, r13
     976:	ef ec       	ldi	r30, 0xCF	; 207
     978:	f7 e0       	ldi	r31, 0x07	; 7
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x7b>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <__stack+0x81>
     980:	00 00       	nop
     982:	c6 cf       	rjmp	.-116    	; 0x910 <__stack+0x11>
				minutes += 1;
				minutes %= 60;
				
			}
			if (key == 2) {
			rtcSendMinutes (minutes);
     984:	81 2f       	mov	r24, r17
     986:	0e 94 3c 07 	call	0xe78	; 0xe78 <_Z14rtcSendMinutesh>
			screen_arr [1] = minutes / 10;
     98a:	8d ec       	ldi	r24, 0xCD	; 205
     98c:	18 9f       	mul	r17, r24
     98e:	81 2d       	mov	r24, r1
     990:	11 24       	eor	r1, r1
     992:	86 95       	lsr	r24
     994:	86 95       	lsr	r24
     996:	86 95       	lsr	r24
     998:	e4 e0       	ldi	r30, 0x04	; 4
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     99e:	88 0f       	add	r24, r24
     9a0:	98 2f       	mov	r25, r24
     9a2:	99 0f       	add	r25, r25
     9a4:	99 0f       	add	r25, r25
     9a6:	89 0f       	add	r24, r25
     9a8:	18 1b       	sub	r17, r24
     9aa:	10 83       	st	Z, r17
			blinker = 0;
		}
		_delay_ms(1);

	}
}
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	08 95       	ret

000009c6 <_Z10setupHoursv>:
uint8_t setupHours () {
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
     9dc:	e4 e0       	ldi	r30, 0x04	; 4
     9de:	f1 e0       	ldi	r31, 0x01	; 1
     9e0:	92 81       	ldd	r25, Z+2	; 0x02
     9e2:	83 81       	ldd	r24, Z+3	; 0x03
     9e4:	88 0f       	add	r24, r24
     9e6:	18 2f       	mov	r17, r24
     9e8:	11 0f       	add	r17, r17
     9ea:	11 0f       	add	r17, r17
     9ec:	81 0f       	add	r24, r17
     9ee:	18 2f       	mov	r17, r24
     9f0:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				hours += 1;
				hours %= 24;
     9f6:	0f 2e       	mov	r0, r31
     9f8:	fb ea       	ldi	r31, 0xAB	; 171
     9fa:	9f 2e       	mov	r9, r31
     9fc:	f0 2d       	mov	r31, r0
     9fe:	0f 2e       	mov	r0, r31
     a00:	f8 e1       	ldi	r31, 0x18	; 24
     a02:	af 2e       	mov	r10, r31
     a04:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
			screen_arr [2] = hours % 10;
		}
		else {
			screen_arr [3] = -1;
     a06:	7f 01       	movw	r14, r30
     a08:	0f ef       	ldi	r16, 0xFF	; 255
			return 0;
			}

		}
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
     a0a:	0f 2e       	mov	r0, r31
     a0c:	fd ec       	ldi	r31, 0xCD	; 205
     a0e:	bf 2e       	mov	r11, r31
     a10:	f0 2d       	mov	r31, r0
		}
		if (blinker < 500) {
			blinker += 1;
		}
		else {
			blinker = 0;
     a12:	c1 2c       	mov	r12, r1
     a14:	d1 2c       	mov	r13, r1
}
uint8_t setupHours () {
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     a16:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     a1a:	88 23       	and	r24, r24
     a1c:	79 f0       	breq	.+30     	; 0xa3c <_Z10setupHoursv+0x76>
			if (key == 1) {
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	59 f4       	brne	.+22     	; 0xa38 <_Z10setupHoursv+0x72>
				hours += 1;
     a22:	81 0f       	add	r24, r17
				hours %= 24;
     a24:	89 9d       	mul	r24, r9
     a26:	11 2d       	mov	r17, r1
     a28:	11 24       	eor	r1, r1
     a2a:	12 95       	swap	r17
     a2c:	1f 70       	andi	r17, 0x0F	; 15
     a2e:	1a 9d       	mul	r17, r10
     a30:	80 19       	sub	r24, r0
     a32:	11 24       	eor	r1, r1
     a34:	18 2f       	mov	r17, r24
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <_Z10setupHoursv+0x76>
				
			}
			if (key == 2) {
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	31 f1       	breq	.+76     	; 0xa88 <_Z10setupHoursv+0xc2>
			rtcSendHours (hours);
			return 0;
			}

		}
		if (blinker > 250) {
     a3c:	cb 3f       	cpi	r28, 0xFB	; 251
     a3e:	d1 05       	cpc	r29, r1
     a40:	88 f0       	brcs	.+34     	; 0xa64 <_Z10setupHoursv+0x9e>
			screen_arr [3] = hours / 10;
     a42:	1b 9d       	mul	r17, r11
     a44:	91 2d       	mov	r25, r1
     a46:	11 24       	eor	r1, r1
     a48:	96 95       	lsr	r25
     a4a:	96 95       	lsr	r25
     a4c:	96 95       	lsr	r25
     a4e:	f7 01       	movw	r30, r14
     a50:	93 83       	std	Z+3, r25	; 0x03
			screen_arr [2] = hours % 10;
     a52:	99 0f       	add	r25, r25
     a54:	89 2f       	mov	r24, r25
     a56:	88 0f       	add	r24, r24
     a58:	88 0f       	add	r24, r24
     a5a:	98 0f       	add	r25, r24
     a5c:	81 2f       	mov	r24, r17
     a5e:	89 1b       	sub	r24, r25
     a60:	82 83       	std	Z+2, r24	; 0x02
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <_Z10setupHoursv+0xa4>
		}
		else {
			screen_arr [3] = -1;
     a64:	f7 01       	movw	r30, r14
     a66:	03 83       	std	Z+3, r16	; 0x03
			screen_arr [2] = -1;
     a68:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500) {
     a6a:	c4 3f       	cpi	r28, 0xF4	; 244
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	df 07       	cpc	r29, r31
     a70:	10 f4       	brcc	.+4      	; 0xa76 <_Z10setupHoursv+0xb0>
			blinker += 1;
     a72:	21 96       	adiw	r28, 0x01	; 1
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <_Z10setupHoursv+0xb4>
		}
		else {
			blinker = 0;
     a76:	cc 2d       	mov	r28, r12
     a78:	dd 2d       	mov	r29, r13
     a7a:	ef ec       	ldi	r30, 0xCF	; 207
     a7c:	f7 e0       	ldi	r31, 0x07	; 7
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <_Z10setupHoursv+0xb8>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <_Z10setupHoursv+0xbe>
     a84:	00 00       	nop
     a86:	c7 cf       	rjmp	.-114    	; 0xa16 <_Z10setupHoursv+0x50>
				hours += 1;
				hours %= 24;
				
			}
			if (key == 2) {
			rtcSendHours (hours);
     a88:	81 2f       	mov	r24, r17
     a8a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z12rtcSendHoursh>
		}
		_delay_ms(1);


	}
}
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	08 95       	ret

00000aa8 <_Z14clrScreenArrayv>:
	}

	return 0;
}
void clrScreenArray () {
	screen_arr[0]=-1;
     aa8:	e4 e0       	ldi	r30, 0x04	; 4
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	80 83       	st	Z, r24
	screen_arr[1]=-1;
     ab0:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2]=-1;
     ab2:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3]=-1;
     ab4:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4]=-1;
     ab6:	84 83       	std	Z+4, r24	; 0x04
     ab8:	08 95       	ret

00000aba <_Z8rtcCyclev>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
	TCCR0B = 2;//Prescaler
}
uint8_t rtcCycle () {
     aba:	8f 92       	push	r8
     abc:	9f 92       	push	r9
     abe:	af 92       	push	r10
     ac0:	bf 92       	push	r11
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	63 97       	sbiw	r28, 0x13	; 19
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	int8_t startLowEnergy = -1;
     ae2:	dd 24       	eor	r13, r13
     ae4:	da 94       	dec	r13
		bool powerGood = PIND & 1;
		bool powerGoodDelay = true;
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		readTime(timeArr);
		if (powerGood || powerGoodDelay) {
			screen_arr[0] = timeArr[1] & 0x0F;
     ae6:	04 e0       	ldi	r16, 0x04	; 4
     ae8:	11 e0       	ldi	r17, 0x01	; 1
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
     aea:	68 94       	set
     aec:	bb 24       	eor	r11, r11
     aee:	b1 f8       	bld	r11, 1
			
		}
		if(powerGood) {
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
     af0:	99 24       	eor	r9, r9
     af2:	93 94       	inc	r9
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
			
		}
		if(powerGood) {
			startLowEnergy = -1;
     af4:	88 24       	eor	r8, r8
     af6:	8a 94       	dec	r8
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
				if(startLowEnergy == endLowEnergy) {
					clrScreenArray();
					powerGoodDelay = false;
     af8:	a1 2c       	mov	r10, r1
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     afa:	0f 2e       	mov	r0, r31
     afc:	fc e3       	ldi	r31, 0x3C	; 60
     afe:	ef 2e       	mov	r14, r31
     b00:	f1 2c       	mov	r15, r1
     b02:	f0 2d       	mov	r31, r0



	uint8_t timeArr[0x13];
	while (true) {
		bool powerGood = PIND & 1;
     b04:	c9 b0       	in	r12, 0x09	; 9
		bool powerGoodDelay = true;
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		readTime(timeArr);
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z8readTimePh>
		if (powerGood || powerGoodDelay) {
			screen_arr[0] = timeArr[1] & 0x0F;
     b0e:	2a 81       	ldd	r18, Y+2	; 0x02
     b10:	92 2f       	mov	r25, r18
     b12:	9f 70       	andi	r25, 0x0F	; 15
     b14:	f8 01       	movw	r30, r16
     b16:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	35 95       	asr	r19
     b1c:	27 95       	ror	r18
     b1e:	35 95       	asr	r19
     b20:	27 95       	ror	r18
     b22:	35 95       	asr	r19
     b24:	27 95       	ror	r18
     b26:	35 95       	asr	r19
     b28:	27 95       	ror	r18
     b2a:	21 83       	std	Z+1, r18	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
     b2c:	4b 81       	ldd	r20, Y+3	; 0x03
     b2e:	84 2f       	mov	r24, r20
     b30:	8f 70       	andi	r24, 0x0F	; 15
     b32:	82 83       	std	Z+2, r24	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	55 95       	asr	r21
     b38:	47 95       	ror	r20
     b3a:	55 95       	asr	r21
     b3c:	47 95       	ror	r20
     b3e:	55 95       	asr	r21
     b40:	47 95       	ror	r20
     b42:	55 95       	asr	r21
     b44:	47 95       	ror	r20
     b46:	43 83       	std	Z+3, r20	; 0x03
			screen_arr[4] = 2;//Dot Point Position
     b48:	b4 82       	std	Z+4, r11	; 0x04
			
		}
		if(powerGood) {
     b4a:	c0 fc       	sbrc	r12, 0
     b4c:	25 c0       	rjmp	.+74     	; 0xb98 <_Z8rtcCyclev+0xde>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
     b4e:	ff ef       	ldi	r31, 0xFF	; 255
     b50:	df 12       	cpse	r13, r31
     b52:	16 c0       	rjmp	.+44     	; 0xb80 <_Z8rtcCyclev+0xc6>
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     b54:	a9 01       	movw	r20, r18
     b56:	44 0f       	add	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	24 0f       	add	r18, r20
     b68:	35 1f       	adc	r19, r21
     b6a:	a9 01       	movw	r20, r18
     b6c:	49 0f       	add	r20, r25
     b6e:	51 1d       	adc	r21, r1
     b70:	ca 01       	movw	r24, r20
     b72:	05 96       	adiw	r24, 0x05	; 5
     b74:	b7 01       	movw	r22, r14
     b76:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divmodhi4>
     b7a:	d8 2e       	mov	r13, r24


	uint8_t timeArr[0x13];
	while (true) {
		bool powerGood = PIND & 1;
		bool powerGoodDelay = true;
     b7c:	c9 2c       	mov	r12, r9
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <_Z8rtcCyclev+0xe6>
		{
			if(startLowEnergy == -1) {
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
     b80:	22 0f       	add	r18, r18
     b82:	82 2f       	mov	r24, r18
     b84:	88 0f       	add	r24, r24
     b86:	88 0f       	add	r24, r24
     b88:	28 0f       	add	r18, r24
     b8a:	92 0f       	add	r25, r18
				if(startLowEnergy == endLowEnergy) {
     b8c:	d9 12       	cpse	r13, r25
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <_Z8rtcCyclev+0xe4>
					clrScreenArray();
     b90:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_Z14clrScreenArrayv>
					powerGoodDelay = false;
     b94:	ca 2c       	mov	r12, r10
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_Z8rtcCyclev+0xe6>
			
		}
		if(powerGood) {
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
     b98:	c9 2c       	mov	r12, r9
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
			
		}
		if(powerGood) {
			startLowEnergy = -1;
     b9a:	d8 2c       	mov	r13, r8
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <_Z8rtcCyclev+0xe6>


	uint8_t timeArr[0x13];
	while (true) {
		bool powerGood = PIND & 1;
		bool powerGoodDelay = true;
     b9e:	c9 2c       	mov	r12, r9
			
			}
		
		
		
		uint8_t key = keyChecker();
     ba0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z10keyCheckerv>
		if(key) {
     ba4:	88 23       	and	r24, r24
     ba6:	09 f4       	brne	.+2      	; 0xbaa <_Z8rtcCyclev+0xf0>
     ba8:	ad cf       	rjmp	.-166    	; 0xb04 <_Z8rtcCyclev+0x4a>
			if (key == 1) {
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	21 f4       	brne	.+8      	; 0xbb6 <_Z8rtcCyclev+0xfc>
				if(!powerGoodDelay) {
     bae:	c1 10       	cpse	r12, r1
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <_Z8rtcCyclev+0x104>
					powerGoodDelay = true;
					startLowEnergy = -1;
     bb2:	d8 2c       	mov	r13, r8
     bb4:	a7 cf       	rjmp	.-178    	; 0xb04 <_Z8rtcCyclev+0x4a>
					endLowEnergy = -1;
				}
				else 
				return 1;
			}
			if (key == 3) {
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	09 f0       	breq	.+2      	; 0xbbc <_Z8rtcCyclev+0x102>
     bba:	a4 cf       	rjmp	.-184    	; 0xb04 <_Z8rtcCyclev+0x4a>
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <_Z8rtcCyclev+0x106>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else 
				return 1;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	
}
     bc0:	63 96       	adiw	r28, 0x13	; 19
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	bf 90       	pop	r11
     bde:	af 90       	pop	r10
     be0:	9f 90       	pop	r9
     be2:	8f 90       	pop	r8
     be4:	08 95       	ret

00000be6 <main>:
		current Screen = 2 - accumulator mode;
		current Screen = 3 - setup minutes mode;
		current Screen = 4 - setum hours mode;
	*/

	DDRD &=~(1<<PORTD3|1<<PORTD4); //Change direction to input
     be6:	8a b1       	in	r24, 0x0a	; 10
     be8:	87 7e       	andi	r24, 0xE7	; 231
     bea:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
     bec:	8b b1       	in	r24, 0x0b	; 11
     bee:	88 61       	ori	r24, 0x18	; 24
     bf0:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray();//Start from blank screen
     bf2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
     bf6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z21EnableTimer0Interruptv>
	sei();
     bfa:	78 94       	sei
	rtcInit();
     bfc:	0e 94 89 06 	call	0xd12	; 0xd12 <_Z7rtcInitv>
uint8_t keyChecker();
void clrScreenArray ();

int main(void)
{
	uint8_t currentScreen = 0;
     c00:	80 e0       	ldi	r24, 0x00	; 0
	EnableTimer0Interrupt();
	sei();
	rtcInit();
    while (1) 
    {
		switch (currentScreen) {
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	89 f0       	breq	.+34     	; 0xc28 <main+0x42>
     c06:	28 f4       	brcc	.+10     	; 0xc12 <main+0x2c>
     c08:	88 23       	and	r24, r24
     c0a:	41 f0       	breq	.+16     	; 0xc1c <main+0x36>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	49 f0       	breq	.+18     	; 0xc22 <main+0x3c>
     c10:	14 c0       	rjmp	.+40     	; 0xc3a <main+0x54>
     c12:	83 30       	cpi	r24, 0x03	; 3
     c14:	61 f0       	breq	.+24     	; 0xc2e <main+0x48>
     c16:	84 30       	cpi	r24, 0x04	; 4
     c18:	69 f0       	breq	.+26     	; 0xc34 <main+0x4e>
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <main+0x54>
			case 0: currentScreen = rtcCycle();
     c1c:	0e 94 5d 05 	call	0xaba	; 0xaba <_Z8rtcCyclev>
					break;
     c20:	f0 cf       	rjmp	.-32     	; 0xc02 <main+0x1c>
			case 1: currentScreen = dsMode();
     c22:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z6dsModev>
					break;
     c26:	ed cf       	rjmp	.-38     	; 0xc02 <main+0x1c>
			case 2: currentScreen = acbMode();
     c28:	0e 94 af 03 	call	0x75e	; 0x75e <_Z7acbModev>
					break;
     c2c:	ea cf       	rjmp	.-44     	; 0xc02 <main+0x1c>
			case 3: currentScreen = setupMinutes();
     c2e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z12setupMinutesv>
					break;
     c32:	e7 cf       	rjmp	.-50     	; 0xc02 <main+0x1c>
			case 4: currentScreen = setupHours();
     c34:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_Z10setupHoursv>
					break;
     c38:	e4 cf       	rjmp	.-56     	; 0xc02 <main+0x1c>
			default: currentScreen = rtcCycle();
     c3a:	0e 94 5d 05 	call	0xaba	; 0xaba <_Z8rtcCyclev>
					 break;
     c3e:	e1 cf       	rjmp	.-62     	; 0xc02 <main+0x1c>

00000c40 <_Z13i2cSetBitratej>:
void i2cSetBitrate(uint16_t bitratekHz)
{
	uint8_t bitrate_div;
	// set i2c bitrate
	// Set Prescaler to one --> TWPS = 1
	TWSR =((0<<TWPS0)|(0<<TWPS1));
     c40:	10 92 b9 00 	sts	0x00B9, r1
	//calculate bitrate division	
	bitrate_div = (((float)F_CPU/1000.0)/(float)bitratekHz);
     c44:	bc 01       	movw	r22, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     c4e:	9b 01       	movw	r18, r22
     c50:	ac 01       	movw	r20, r24
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	8a ef       	ldi	r24, 0xFA	; 250
     c58:	95 e4       	ldi	r25, 0x45	; 69
     c5a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__divsf3>
     c5e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
	if(bitrate_div >= 16){
     c62:	60 31       	cpi	r22, 0x10	; 16
     c64:	88 f0       	brcs	.+34     	; 0xc88 <_Z13i2cSetBitratej+0x48>
		bitrate_div = (float)(bitrate_div-16)/8;
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	60 51       	subi	r22, 0x10	; 16
     c6a:	71 09       	sbc	r23, r1
     c6c:	07 2e       	mov	r0, r23
     c6e:	00 0c       	add	r0, r0
     c70:	88 0b       	sbc	r24, r24
     c72:	99 0b       	sbc	r25, r25
     c74:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	5e e3       	ldi	r21, 0x3E	; 62
     c80:	0e 94 93 09 	call	0x1326	; 0x1326 <__mulsf3>
     c84:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
	}
	//printf("DIV: %d \n",bitrate_div);
	TWBR=(uint8_t)bitrate_div;
     c88:	60 93 b8 00 	sts	0x00B8, r22
	//TWBR=0; -> max speed
	PORTC |= ((1<<PINC4) | (1<<PINC5));
     c8c:	88 b1       	in	r24, 0x08	; 8
     c8e:	80 63       	ori	r24, 0x30	; 48
     c90:	88 b9       	out	0x08, r24	; 8
     c92:	08 95       	ret

00000c94 <_Z11i2cSendStopv>:
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
     c94:	84 e9       	ldi	r24, 0x94	; 148
     c96:	80 93 bc 00 	sts	0x00BC, r24
// 
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
     c9a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
     c9c:	ec eb       	ldi	r30, 0xBC	; 188
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	84 ff       	sbrs	r24, 4
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <_Z11i2cSendStopv+0x22>
     ca6:	9a 35       	cpi	r25, 0x5A	; 90
     ca8:	51 f4       	brne	.+20     	; 0xcbe <_Z11i2cSendStopv+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	8a 95       	dec	r24
     cae:	f1 f7       	brne	.-4      	; 0xcac <_Z11i2cSendStopv+0x18>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <_Z11i2cSendStopv+0x1e>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     cb2:	84 e6       	ldi	r24, 0x64	; 100
     cb4:	08 95       	ret
	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     cb6:	9a 35       	cpi	r25, 0x5A	; 90
     cb8:	c0 f7       	brcc	.-16     	; 0xcaa <_Z11i2cSendStopv+0x16>
//----------------------------------------
uint8_t i2cSendStop(void)
{
	
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	8a 95       	dec	r24
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <_Z11i2cSendStopv+0x2c>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <_Z11i2cSendStopv+0x32>
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	

	// wait until stop condition is executed and bus released
    while ((TWCR & (1<<TWSTO)) && (i < 90)){
		_delay_us(1);
		i++;
     cc6:	9f 5f       	subi	r25, 0xFF	; 255
     cc8:	eb cf       	rjmp	.-42     	; 0xca0 <_Z11i2cSendStopv+0xc>

00000cca <_Z18i2cWaitForCompletev>:
//----------------------------------------
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
     cca:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t error_code=0;	

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
     ccc:	ec eb       	ldi	r30, 0xBC	; 188
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	88 23       	and	r24, r24
     cd4:	44 f0       	brlt	.+16     	; 0xce6 <_Z18i2cWaitForCompletev+0x1c>
     cd6:	9a 35       	cpi	r25, 0x5A	; 90
     cd8:	51 f4       	brne	.+20     	; 0xcee <_Z18i2cWaitForCompletev+0x24>
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	8a 95       	dec	r24
     cde:	f1 f7       	brne	.-4      	; 0xcdc <_Z18i2cWaitForCompletev+0x12>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <_Z18i2cWaitForCompletev+0x18>
		_delay_us(1);
		i++;
	}
	if (i>89){
		_delay_us(1);
		error_code=100;
     ce2:	84 e6       	ldi	r24, 0x64	; 100
     ce4:	08 95       	ret
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
	}
	if (i>89){
     ce6:	9a 35       	cpi	r25, 0x5A	; 90
     ce8:	c0 f7       	brcc	.-16     	; 0xcda <_Z18i2cWaitForCompletev+0x10>
// 
//----------------------------------------
uint8_t i2cWaitForComplete(void)
{
	uint8_t i = 0;		//time out variable
	uint8_t error_code=0;	
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	8a 95       	dec	r24
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <_Z18i2cWaitForCompletev+0x26>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <_Z18i2cWaitForCompletev+0x2c>

	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90)){
		_delay_us(1);
		i++;
     cf6:	9f 5f       	subi	r25, 0xFF	; 255
     cf8:	eb cf       	rjmp	.-42     	; 0xcd0 <_Z18i2cWaitForCompletev+0x6>

00000cfa <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
     cfa:	20 91 b9 00 	lds	r18, 0x00B9
     cfe:	28 7f       	andi	r18, 0xF8	; 248
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	11 f0       	breq	.+4      	; 0xd0e <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
     d10:	08 95       	ret

00000d12 <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
	i2cSetBitrate(400);
     d1c:	80 e9       	ldi	r24, 0x90	; 144
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 20 06 	call	0xc40	; 0xc40 <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d24:	cc eb       	ldi	r28, 0xBC	; 188
     d26:	d0 e0       	ldi	r29, 0x00	; 0
     d28:	84 ea       	ldi	r24, 0xA4	; 164
     d2a:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
     d2c:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d30:	0f 2e       	mov	r0, r31
     d32:	fb eb       	ldi	r31, 0xBB	; 187
     d34:	ef 2e       	mov	r14, r31
     d36:	f1 2c       	mov	r15, r1
     d38:	f0 2d       	mov	r31, r0
     d3a:	80 ed       	ldi	r24, 0xD0	; 208
     d3c:	f7 01       	movw	r30, r14
     d3e:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d40:	14 e8       	ldi	r17, 0x84	; 132
     d42:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     d44:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d48:	88 e2       	ldi	r24, 0x28	; 40
     d4a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d4e:	8e e0       	ldi	r24, 0x0E	; 14
     d50:	f7 01       	movw	r30, r14
     d52:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d54:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
     d56:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d5a:	88 e2       	ldi	r24, 0x28	; 40
     d5c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	f7 01       	movw	r30, r14
     d64:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d66:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
     d68:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d6c:	88 e2       	ldi	r24, 0x28	; 40
     d6e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     d72:	88 e0       	ldi	r24, 0x08	; 8
     d74:	f7 01       	movw	r30, r14
     d76:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     d78:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
     d7a:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     d7e:	88 e2       	ldi	r24, 0x28	; 40
     d80:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>

	i2cSendStop();
     d84:	0e 94 4a 06 	call	0xc94	; 0xc94 <_Z11i2cSendStopv>
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
     d94:	9f 92       	push	r9
     d96:	af 92       	push	r10
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     dac:	cc eb       	ldi	r28, 0xBC	; 188
     dae:	d0 e0       	ldi	r29, 0x00	; 0
     db0:	04 ea       	ldi	r16, 0xA4	; 164
     db2:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
     db4:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     db8:	0f 2e       	mov	r0, r31
     dba:	fb eb       	ldi	r31, 0xBB	; 187
     dbc:	ef 2e       	mov	r14, r31
     dbe:	f1 2c       	mov	r15, r1
     dc0:	f0 2d       	mov	r31, r0
     dc2:	80 ed       	ldi	r24, 0xD0	; 208
     dc4:	f7 01       	movw	r30, r14
     dc6:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     dc8:	14 e8       	ldi	r17, 0x84	; 132
     dca:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     dcc:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     dd0:	88 e2       	ldi	r24, 0x28	; 40
     dd2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     dd6:	f7 01       	movw	r30, r14
     dd8:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     dda:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
     ddc:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     de0:	88 e2       	ldi	r24, 0x28	; 40
     de2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>

	i2cSendStop();
     de6:	0e 94 4a 06 	call	0xc94	; 0xc94 <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     dea:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
     dec:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     df0:	81 ed       	ldi	r24, 0xD1	; 209
     df2:	f7 01       	movw	r30, r14
     df4:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     df6:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
     df8:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     dfc:	88 e2       	ldi	r24, 0x28	; 40
     dfe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
     e02:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
     e06:	e5 01       	movw	r28, r10
     e08:	65 01       	movw	r12, r10
     e0a:	f3 e1       	ldi	r31, 0x13	; 19
     e0c:	cf 0e       	add	r12, r31
     e0e:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     e10:	0f 2e       	mov	r0, r31
     e12:	fc eb       	ldi	r31, 0xBC	; 188
     e14:	ef 2e       	mov	r14, r31
     e16:	f1 2c       	mov	r15, r1
     e18:	f0 2d       	mov	r31, r0
     e1a:	0f 2e       	mov	r0, r31
     e1c:	f4 ec       	ldi	r31, 0xC4	; 196
     e1e:	9f 2e       	mov	r9, r31
     e20:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     e22:	0b eb       	ldi	r16, 0xBB	; 187
     e24:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     e26:	f7 01       	movw	r30, r14
     e28:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
     e2a:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     e2e:	f8 01       	movw	r30, r16
     e30:	90 81       	ld	r25, Z
		timeArr[i] = i2cGetReceivedByte();
     e32:	99 93       	st	Y+, r25
		i2cWaitForComplete();
     e34:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
     e38:	80 e5       	ldi	r24, 0x50	; 80
     e3a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
     e3e:	cc 15       	cp	r28, r12
     e40:	dd 05       	cpc	r29, r13
     e42:	89 f7       	brne	.-30     	; 0xe26 <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
     e44:	84 e8       	ldi	r24, 0x84	; 132
     e46:	80 93 bc 00 	sts	0x00BC, r24
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
     e4a:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
     e4e:	80 91 bb 00 	lds	r24, 0x00BB
	timeArr[6] = i2cGetReceivedByte();
     e52:	f5 01       	movw	r30, r10
     e54:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
     e56:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
     e5a:	88 e5       	ldi	r24, 0x58	; 88
     e5c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>

	

}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	08 95       	ret

00000e78 <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
     e84:	9d ec       	ldi	r25, 0xCD	; 205
     e86:	89 9f       	mul	r24, r25
     e88:	91 2d       	mov	r25, r1
     e8a:	11 24       	eor	r1, r1
     e8c:	96 95       	lsr	r25
     e8e:	96 95       	lsr	r25
     e90:	96 95       	lsr	r25
	bdc <<= 4;
     e92:	c9 2f       	mov	r28, r25
     e94:	c2 95       	swap	r28
     e96:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= minutes%10;
     e98:	99 0f       	add	r25, r25
     e9a:	29 2f       	mov	r18, r25
     e9c:	22 0f       	add	r18, r18
     e9e:	22 0f       	add	r18, r18
     ea0:	92 0f       	add	r25, r18
     ea2:	89 1b       	sub	r24, r25
     ea4:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     ea6:	0c eb       	ldi	r16, 0xBC	; 188
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	84 ea       	ldi	r24, 0xA4	; 164
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
     eb0:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     eb4:	0f 2e       	mov	r0, r31
     eb6:	fb eb       	ldi	r31, 0xBB	; 187
     eb8:	ef 2e       	mov	r14, r31
     eba:	f1 2c       	mov	r15, r1
     ebc:	f0 2d       	mov	r31, r0
     ebe:	80 ed       	ldi	r24, 0xD0	; 208
     ec0:	f7 01       	movw	r30, r14
     ec2:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ec4:	d4 e8       	ldi	r29, 0x84	; 132
     ec6:	f8 01       	movw	r30, r16
     ec8:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     eca:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     ece:	88 e2       	ldi	r24, 0x28	; 40
     ed0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ed4:	f7 01       	movw	r30, r14
     ed6:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     ed8:	f8 01       	movw	r30, r16
     eda:	d0 83       	st	Z, r29

	i2cSendByte(0x00);
	i2cWaitForComplete();
     edc:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     ee0:	88 e2       	ldi	r24, 0x28	; 40
     ee2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ee6:	f7 01       	movw	r30, r14
     ee8:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     eea:	f8 01       	movw	r30, r16
     eec:	d0 83       	st	Z, r29

	i2cSendByte(0);
	i2cWaitForComplete();
     eee:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     ef2:	88 e2       	ldi	r24, 0x28	; 40
     ef4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     ef8:	f7 01       	movw	r30, r14
     efa:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     efc:	f8 01       	movw	r30, r16
     efe:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
     f00:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     f04:	88 e2       	ldi	r24, 0x28	; 40
     f06:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>

	i2cSendStop();
     f0a:	0e 94 4a 06 	call	0xc94	; 0xc94 <_Z11i2cSendStopv>
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	08 95       	ret

00000f1c <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
     f28:	9d ec       	ldi	r25, 0xCD	; 205
     f2a:	89 9f       	mul	r24, r25
     f2c:	91 2d       	mov	r25, r1
     f2e:	11 24       	eor	r1, r1
     f30:	96 95       	lsr	r25
     f32:	96 95       	lsr	r25
     f34:	96 95       	lsr	r25
	bdc <<= 4;
     f36:	c9 2f       	mov	r28, r25
     f38:	c2 95       	swap	r28
     f3a:	c0 7f       	andi	r28, 0xF0	; 240
	bdc |= hours%10;
     f3c:	99 0f       	add	r25, r25
     f3e:	29 2f       	mov	r18, r25
     f40:	22 0f       	add	r18, r18
     f42:	22 0f       	add	r18, r18
     f44:	92 0f       	add	r25, r18
     f46:	89 1b       	sub	r24, r25
     f48:	c8 2b       	or	r28, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f4a:	0c eb       	ldi	r16, 0xBC	; 188
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	84 ea       	ldi	r24, 0xA4	; 164
     f50:	f8 01       	movw	r30, r16
     f52:	80 83       	st	Z, r24
	i2cSendStart();
	i2cWaitForComplete();
     f54:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     f58:	0f 2e       	mov	r0, r31
     f5a:	fb eb       	ldi	r31, 0xBB	; 187
     f5c:	ef 2e       	mov	r14, r31
     f5e:	f1 2c       	mov	r15, r1
     f60:	f0 2d       	mov	r31, r0
     f62:	80 ed       	ldi	r24, 0xD0	; 208
     f64:	f7 01       	movw	r30, r14
     f66:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     f68:	d4 e8       	ldi	r29, 0x84	; 132
     f6a:	f8 01       	movw	r30, r16
     f6c:	d0 83       	st	Z, r29
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
     f6e:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     f72:	88 e2       	ldi	r24, 0x28	; 40
     f74:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	f7 01       	movw	r30, r14
     f7c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     f7e:	f8 01       	movw	r30, r16
     f80:	d0 83       	st	Z, r29

	i2cSendByte(0x02);
	i2cWaitForComplete();
     f82:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     f86:	88 e2       	ldi	r24, 0x28	; 40
     f88:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     f8c:	f7 01       	movw	r30, r14
     f8e:	c0 83       	st	Z, r28
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     f90:	f8 01       	movw	r30, r16
     f92:	d0 83       	st	Z, r29

	i2cSendByte(bdc);
	i2cWaitForComplete();
     f94:	0e 94 65 06 	call	0xcca	; 0xcca <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
     f98:	88 e2       	ldi	r24, 0x28	; 40
     f9a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_Z18checki2cReturnCodeh>

	i2cSendStop();
     f9e:	0e 94 4a 06 	call	0xc94	; 0xc94 <_Z11i2cSendStopv>
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	08 95       	ret

00000fb0 <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
     fb0:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
     fb2:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
     fb4:	8a b1       	in	r24, 0x0a	; 10
     fb6:	82 62       	ori	r24, 0x22	; 34
     fb8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
     fba:	8b b1       	in	r24, 0x0b	; 11
     fbc:	8d 7d       	andi	r24, 0xDD	; 221
     fbe:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
     fc0:	84 b1       	in	r24, 0x04	; 4
     fc2:	8d 63       	ori	r24, 0x3D	; 61
     fc4:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
     fc6:	85 b1       	in	r24, 0x05	; 5
     fc8:	82 7c       	andi	r24, 0xC2	; 194
     fca:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
     fcc:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
     fce:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
     fd0:	8a b1       	in	r24, 0x0a	; 10
     fd2:	80 6c       	ori	r24, 0xC0	; 192
     fd4:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
     fd6:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
     fd8:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
     fda:	8b b1       	in	r24, 0x0b	; 11
     fdc:	80 6c       	ori	r24, 0xC0	; 192
     fde:	8b b9       	out	0x0b, r24	; 11
     fe0:	08 95       	ret

00000fe2 <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	c8 2f       	mov	r28, r24
     fe8:	d6 2f       	mov	r29, r22
	ClrScr();
     fea:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
     fee:	d1 11       	cpse	r29, r1
     ff0:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
     ff2:	8c 2f       	mov	r24, r28
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	86 37       	cpi	r24, 0x76	; 118
     ff8:	91 05       	cpc	r25, r1
     ffa:	08 f0       	brcs	.+2      	; 0xffe <_Z11Display7seghb+0x1c>
     ffc:	4d c0       	rjmp	.+154    	; 0x1098 <_Z11Display7seghb+0xb6>
     ffe:	fc 01       	movw	r30, r24
    1000:	ec 5c       	subi	r30, 0xCC	; 204
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    1008:	85 b1       	in	r24, 0x05	; 5
    100a:	89 62       	ori	r24, 0x29	; 41
    100c:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    100e:	8b b1       	in	r24, 0x0b	; 11
    1010:	82 62       	ori	r24, 0x22	; 34
    1012:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1014:	42 9a       	sbi	0x08, 2	; 8
				break;
    1016:	42 c0       	rjmp	.+132    	; 0x109c <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    1018:	85 b1       	in	r24, 0x05	; 5
    101a:	89 60       	ori	r24, 0x09	; 9
    101c:	85 b9       	out	0x05, r24	; 5
				break;
    101e:	3e c0       	rjmp	.+124    	; 0x109c <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    1020:	85 b1       	in	r24, 0x05	; 5
    1022:	85 62       	ori	r24, 0x25	; 37
    1024:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1026:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    1028:	42 9a       	sbi	0x08, 2	; 8
				break;
    102a:	38 c0       	rjmp	.+112    	; 0x109c <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    102c:	85 b1       	in	r24, 0x05	; 5
    102e:	8d 62       	ori	r24, 0x2D	; 45
    1030:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1032:	59 9a       	sbi	0x0b, 1	; 11
				break;
    1034:	33 c0       	rjmp	.+102    	; 0x109c <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    1036:	85 b1       	in	r24, 0x05	; 5
    1038:	8d 60       	ori	r24, 0x0D	; 13
    103a:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    103c:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    103e:	2e c0       	rjmp	.+92     	; 0x109c <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1040:	85 b1       	in	r24, 0x05	; 5
    1042:	8c 62       	ori	r24, 0x2C	; 44
    1044:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1046:	8b b1       	in	r24, 0x0b	; 11
    1048:	82 62       	ori	r24, 0x22	; 34
    104a:	8b b9       	out	0x0b, r24	; 11
				break;
    104c:	27 c0       	rjmp	.+78     	; 0x109c <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    104e:	85 b1       	in	r24, 0x05	; 5
    1050:	8c 62       	ori	r24, 0x2C	; 44
    1052:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1054:	8b b1       	in	r24, 0x0b	; 11
    1056:	82 62       	ori	r24, 0x22	; 34
    1058:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    105a:	42 9a       	sbi	0x08, 2	; 8
				break;
    105c:	1f c0       	rjmp	.+62     	; 0x109c <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    105e:	85 b1       	in	r24, 0x05	; 5
    1060:	89 60       	ori	r24, 0x09	; 9
    1062:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1064:	8b b1       	in	r24, 0x0b	; 11
    1066:	82 62       	ori	r24, 0x22	; 34
    1068:	8b b9       	out	0x0b, r24	; 11
				break;
    106a:	18 c0       	rjmp	.+48     	; 0x109c <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    106c:	85 b1       	in	r24, 0x05	; 5
    106e:	8d 62       	ori	r24, 0x2D	; 45
    1070:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1072:	8b b1       	in	r24, 0x0b	; 11
    1074:	82 62       	ori	r24, 0x22	; 34
    1076:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1078:	42 9a       	sbi	0x08, 2	; 8
				break;
    107a:	10 c0       	rjmp	.+32     	; 0x109c <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    107c:	85 b1       	in	r24, 0x05	; 5
    107e:	8d 62       	ori	r24, 0x2D	; 45
    1080:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1082:	8b b1       	in	r24, 0x0b	; 11
    1084:	82 62       	ori	r24, 0x22	; 34
    1086:	8b b9       	out	0x0b, r24	; 11
				break;
    1088:	09 c0       	rjmp	.+18     	; 0x109c <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    108a:	85 b1       	in	r24, 0x05	; 5
    108c:	88 62       	ori	r24, 0x28	; 40
    108e:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    1090:	42 9a       	sbi	0x08, 2	; 8
				break;
    1092:	04 c0       	rjmp	.+8      	; 0x109c <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    1094:	2a 9a       	sbi	0x05, 2	; 5
				break;
    1096:	02 c0       	rjmp	.+4      	; 0x109c <_Z11Display7seghb+0xba>
		default: ClrScr();
    1098:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Z6ClrScrv>
				break;

	}
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	59 f0       	breq	.+22     	; 0x10bc <_Z9NextDigith+0x1a>
    10a6:	18 f4       	brcc	.+6      	; 0x10ae <_Z9NextDigith+0xc>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <_Z9NextDigith+0x16>
    10ac:	08 95       	ret
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	39 f0       	breq	.+14     	; 0x10c0 <_Z9NextDigith+0x1e>
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <_Z9NextDigith+0x22>
    10b6:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    10b8:	43 98       	cbi	0x08, 3	; 8
		break;
    10ba:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    10bc:	5e 98       	cbi	0x0b, 6	; 11
		break;
    10be:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    10c0:	5f 98       	cbi	0x0b, 7	; 11
		break;
    10c2:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    10c4:	29 98       	cbi	0x05, 1	; 5
    10c6:	08 95       	ret

000010c8 <__divsf3>:
    10c8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__divsf3x>
    10cc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_round>
    10d0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_pscB>
    10d4:	58 f0       	brcs	.+22     	; 0x10ec <__divsf3+0x24>
    10d6:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_pscA>
    10da:	40 f0       	brcs	.+16     	; 0x10ec <__divsf3+0x24>
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <__divsf3+0x20>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	29 f0       	breq	.+10     	; 0x10ec <__divsf3+0x24>
    10e2:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_inf>
    10e6:	51 11       	cpse	r21, r1
    10e8:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_szero>
    10ec:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__fp_nan>

000010f0 <__divsf3x>:
    10f0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fp_split3>
    10f4:	68 f3       	brcs	.-38     	; 0x10d0 <__divsf3+0x8>

000010f6 <__divsf3_pse>:
    10f6:	99 23       	and	r25, r25
    10f8:	b1 f3       	breq	.-20     	; 0x10e6 <__divsf3+0x1e>
    10fa:	55 23       	and	r21, r21
    10fc:	91 f3       	breq	.-28     	; 0x10e2 <__divsf3+0x1a>
    10fe:	95 1b       	sub	r25, r21
    1100:	55 0b       	sbc	r21, r21
    1102:	bb 27       	eor	r27, r27
    1104:	aa 27       	eor	r26, r26
    1106:	62 17       	cp	r22, r18
    1108:	73 07       	cpc	r23, r19
    110a:	84 07       	cpc	r24, r20
    110c:	38 f0       	brcs	.+14     	; 0x111c <__divsf3_pse+0x26>
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	22 0f       	add	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	44 1f       	adc	r20, r20
    1118:	aa 1f       	adc	r26, r26
    111a:	a9 f3       	breq	.-22     	; 0x1106 <__divsf3_pse+0x10>
    111c:	35 d0       	rcall	.+106    	; 0x1188 <__divsf3_pse+0x92>
    111e:	0e 2e       	mov	r0, r30
    1120:	3a f0       	brmi	.+14     	; 0x1130 <__divsf3_pse+0x3a>
    1122:	e0 e8       	ldi	r30, 0x80	; 128
    1124:	32 d0       	rcall	.+100    	; 0x118a <__divsf3_pse+0x94>
    1126:	91 50       	subi	r25, 0x01	; 1
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	e6 95       	lsr	r30
    112c:	00 1c       	adc	r0, r0
    112e:	ca f7       	brpl	.-14     	; 0x1122 <__divsf3_pse+0x2c>
    1130:	2b d0       	rcall	.+86     	; 0x1188 <__divsf3_pse+0x92>
    1132:	fe 2f       	mov	r31, r30
    1134:	29 d0       	rcall	.+82     	; 0x1188 <__divsf3_pse+0x92>
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	bb 1f       	adc	r27, r27
    113e:	26 17       	cp	r18, r22
    1140:	37 07       	cpc	r19, r23
    1142:	48 07       	cpc	r20, r24
    1144:	ab 07       	cpc	r26, r27
    1146:	b0 e8       	ldi	r27, 0x80	; 128
    1148:	09 f0       	breq	.+2      	; 0x114c <__divsf3_pse+0x56>
    114a:	bb 0b       	sbc	r27, r27
    114c:	80 2d       	mov	r24, r0
    114e:	bf 01       	movw	r22, r30
    1150:	ff 27       	eor	r31, r31
    1152:	93 58       	subi	r25, 0x83	; 131
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	3a f0       	brmi	.+14     	; 0x1166 <__divsf3_pse+0x70>
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	51 05       	cpc	r21, r1
    115c:	78 f0       	brcs	.+30     	; 0x117c <__divsf3_pse+0x86>
    115e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_inf>
    1162:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_szero>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	e4 f3       	brlt	.-8      	; 0x1162 <__divsf3_pse+0x6c>
    116a:	98 3e       	cpi	r25, 0xE8	; 232
    116c:	d4 f3       	brlt	.-12     	; 0x1162 <__divsf3_pse+0x6c>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9f 5f       	subi	r25, 0xFF	; 255
    117a:	c9 f7       	brne	.-14     	; 0x116e <__divsf3_pse+0x78>
    117c:	88 0f       	add	r24, r24
    117e:	91 1d       	adc	r25, r1
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret
    1188:	e1 e0       	ldi	r30, 0x01	; 1
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	bb 1f       	adc	r27, r27
    1192:	62 17       	cp	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	84 07       	cpc	r24, r20
    1198:	ba 07       	cpc	r27, r26
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__divsf3_pse+0xae>
    119c:	62 1b       	sub	r22, r18
    119e:	73 0b       	sbc	r23, r19
    11a0:	84 0b       	sbc	r24, r20
    11a2:	ba 0b       	sbc	r27, r26
    11a4:	ee 1f       	adc	r30, r30
    11a6:	88 f7       	brcc	.-30     	; 0x118a <__divsf3_pse+0x94>
    11a8:	e0 95       	com	r30
    11aa:	08 95       	ret

000011ac <__fixunssfsi>:
    11ac:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__fp_splitA>
    11b0:	88 f0       	brcs	.+34     	; 0x11d4 <__fixunssfsi+0x28>
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__fixunssfsi+0x30>
    11b6:	b9 2f       	mov	r27, r25
    11b8:	99 27       	eor	r25, r25
    11ba:	b7 51       	subi	r27, 0x17	; 23
    11bc:	b0 f0       	brcs	.+44     	; 0x11ea <__fixunssfsi+0x3e>
    11be:	e1 f0       	breq	.+56     	; 0x11f8 <__fixunssfsi+0x4c>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a f0       	brmi	.+6      	; 0x11d0 <__fixunssfsi+0x24>
    11ca:	ba 95       	dec	r27
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__fixunssfsi+0x14>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <__fixunssfsi+0x4c>
    11d0:	b1 30       	cpi	r27, 0x01	; 1
    11d2:	91 f0       	breq	.+36     	; 0x11f8 <__fixunssfsi+0x4c>
    11d4:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_zero>
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	08 95       	ret
    11dc:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_zero>
    11e0:	67 2f       	mov	r22, r23
    11e2:	78 2f       	mov	r23, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	b8 5f       	subi	r27, 0xF8	; 248
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <__fixunssfsi+0x4c>
    11ea:	b9 3f       	cpi	r27, 0xF9	; 249
    11ec:	cc f3       	brlt	.-14     	; 0x11e0 <__fixunssfsi+0x34>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b3 95       	inc	r27
    11f6:	d9 f7       	brne	.-10     	; 0x11ee <__fixunssfsi+0x42>
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__fixunssfsi+0x5c>
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__floatunsisf>:
    120a:	e8 94       	clt
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <__floatsisf+0x12>

0000120e <__floatsisf>:
    120e:	97 fb       	bst	r25, 7
    1210:	3e f4       	brtc	.+14     	; 0x1220 <__floatsisf+0x12>
    1212:	90 95       	com	r25
    1214:	80 95       	com	r24
    1216:	70 95       	com	r23
    1218:	61 95       	neg	r22
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	99 23       	and	r25, r25
    1222:	a9 f0       	breq	.+42     	; 0x124e <__floatsisf+0x40>
    1224:	f9 2f       	mov	r31, r25
    1226:	96 e9       	ldi	r25, 0x96	; 150
    1228:	bb 27       	eor	r27, r27
    122a:	93 95       	inc	r25
    122c:	f6 95       	lsr	r31
    122e:	87 95       	ror	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f1 11       	cpse	r31, r1
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <__floatsisf+0x1c>
    123a:	fa f4       	brpl	.+62     	; 0x127a <__floatsisf+0x6c>
    123c:	bb 0f       	add	r27, r27
    123e:	11 f4       	brne	.+4      	; 0x1244 <__floatsisf+0x36>
    1240:	60 ff       	sbrs	r22, 0
    1242:	1b c0       	rjmp	.+54     	; 0x127a <__floatsisf+0x6c>
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	16 c0       	rjmp	.+44     	; 0x127a <__floatsisf+0x6c>
    124e:	88 23       	and	r24, r24
    1250:	11 f0       	breq	.+4      	; 0x1256 <__floatsisf+0x48>
    1252:	96 e9       	ldi	r25, 0x96	; 150
    1254:	11 c0       	rjmp	.+34     	; 0x1278 <__floatsisf+0x6a>
    1256:	77 23       	and	r23, r23
    1258:	21 f0       	breq	.+8      	; 0x1262 <__floatsisf+0x54>
    125a:	9e e8       	ldi	r25, 0x8E	; 142
    125c:	87 2f       	mov	r24, r23
    125e:	76 2f       	mov	r23, r22
    1260:	05 c0       	rjmp	.+10     	; 0x126c <__floatsisf+0x5e>
    1262:	66 23       	and	r22, r22
    1264:	71 f0       	breq	.+28     	; 0x1282 <__floatsisf+0x74>
    1266:	96 e8       	ldi	r25, 0x86	; 134
    1268:	86 2f       	mov	r24, r22
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	2a f0       	brmi	.+10     	; 0x127a <__floatsisf+0x6c>
    1270:	9a 95       	dec	r25
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	da f7       	brpl	.-10     	; 0x1270 <__floatsisf+0x62>
    127a:	88 0f       	add	r24, r24
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret

00001284 <__fp_inf>:
    1284:	97 f9       	bld	r25, 7
    1286:	9f 67       	ori	r25, 0x7F	; 127
    1288:	80 e8       	ldi	r24, 0x80	; 128
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	08 95       	ret

00001290 <__fp_nan>:
    1290:	9f ef       	ldi	r25, 0xFF	; 255
    1292:	80 ec       	ldi	r24, 0xC0	; 192
    1294:	08 95       	ret

00001296 <__fp_pscA>:
    1296:	00 24       	eor	r0, r0
    1298:	0a 94       	dec	r0
    129a:	16 16       	cp	r1, r22
    129c:	17 06       	cpc	r1, r23
    129e:	18 06       	cpc	r1, r24
    12a0:	09 06       	cpc	r0, r25
    12a2:	08 95       	ret

000012a4 <__fp_pscB>:
    12a4:	00 24       	eor	r0, r0
    12a6:	0a 94       	dec	r0
    12a8:	12 16       	cp	r1, r18
    12aa:	13 06       	cpc	r1, r19
    12ac:	14 06       	cpc	r1, r20
    12ae:	05 06       	cpc	r0, r21
    12b0:	08 95       	ret

000012b2 <__fp_round>:
    12b2:	09 2e       	mov	r0, r25
    12b4:	03 94       	inc	r0
    12b6:	00 0c       	add	r0, r0
    12b8:	11 f4       	brne	.+4      	; 0x12be <__fp_round+0xc>
    12ba:	88 23       	and	r24, r24
    12bc:	52 f0       	brmi	.+20     	; 0x12d2 <__fp_round+0x20>
    12be:	bb 0f       	add	r27, r27
    12c0:	40 f4       	brcc	.+16     	; 0x12d2 <__fp_round+0x20>
    12c2:	bf 2b       	or	r27, r31
    12c4:	11 f4       	brne	.+4      	; 0x12ca <__fp_round+0x18>
    12c6:	60 ff       	sbrs	r22, 0
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <__fp_round+0x20>
    12ca:	6f 5f       	subi	r22, 0xFF	; 255
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	08 95       	ret

000012d4 <__fp_split3>:
    12d4:	57 fd       	sbrc	r21, 7
    12d6:	90 58       	subi	r25, 0x80	; 128
    12d8:	44 0f       	add	r20, r20
    12da:	55 1f       	adc	r21, r21
    12dc:	59 f0       	breq	.+22     	; 0x12f4 <__fp_splitA+0x10>
    12de:	5f 3f       	cpi	r21, 0xFF	; 255
    12e0:	71 f0       	breq	.+28     	; 0x12fe <__fp_splitA+0x1a>
    12e2:	47 95       	ror	r20

000012e4 <__fp_splitA>:
    12e4:	88 0f       	add	r24, r24
    12e6:	97 fb       	bst	r25, 7
    12e8:	99 1f       	adc	r25, r25
    12ea:	61 f0       	breq	.+24     	; 0x1304 <__fp_splitA+0x20>
    12ec:	9f 3f       	cpi	r25, 0xFF	; 255
    12ee:	79 f0       	breq	.+30     	; 0x130e <__fp_splitA+0x2a>
    12f0:	87 95       	ror	r24
    12f2:	08 95       	ret
    12f4:	12 16       	cp	r1, r18
    12f6:	13 06       	cpc	r1, r19
    12f8:	14 06       	cpc	r1, r20
    12fa:	55 1f       	adc	r21, r21
    12fc:	f2 cf       	rjmp	.-28     	; 0x12e2 <__fp_split3+0xe>
    12fe:	46 95       	lsr	r20
    1300:	f1 df       	rcall	.-30     	; 0x12e4 <__fp_splitA>
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <__fp_splitA+0x30>
    1304:	16 16       	cp	r1, r22
    1306:	17 06       	cpc	r1, r23
    1308:	18 06       	cpc	r1, r24
    130a:	99 1f       	adc	r25, r25
    130c:	f1 cf       	rjmp	.-30     	; 0x12f0 <__fp_splitA+0xc>
    130e:	86 95       	lsr	r24
    1310:	71 05       	cpc	r23, r1
    1312:	61 05       	cpc	r22, r1
    1314:	08 94       	sec
    1316:	08 95       	ret

00001318 <__fp_zero>:
    1318:	e8 94       	clt

0000131a <__fp_szero>:
    131a:	bb 27       	eor	r27, r27
    131c:	66 27       	eor	r22, r22
    131e:	77 27       	eor	r23, r23
    1320:	cb 01       	movw	r24, r22
    1322:	97 f9       	bld	r25, 7
    1324:	08 95       	ret

00001326 <__mulsf3>:
    1326:	0e 94 a6 09 	call	0x134c	; 0x134c <__mulsf3x>
    132a:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_round>
    132e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_pscA>
    1332:	38 f0       	brcs	.+14     	; 0x1342 <__mulsf3+0x1c>
    1334:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_pscB>
    1338:	20 f0       	brcs	.+8      	; 0x1342 <__mulsf3+0x1c>
    133a:	95 23       	and	r25, r21
    133c:	11 f0       	breq	.+4      	; 0x1342 <__mulsf3+0x1c>
    133e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_inf>
    1342:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__fp_nan>
    1346:	11 24       	eor	r1, r1
    1348:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_szero>

0000134c <__mulsf3x>:
    134c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fp_split3>
    1350:	70 f3       	brcs	.-36     	; 0x132e <__mulsf3+0x8>

00001352 <__mulsf3_pse>:
    1352:	95 9f       	mul	r25, r21
    1354:	c1 f3       	breq	.-16     	; 0x1346 <__mulsf3+0x20>
    1356:	95 0f       	add	r25, r21
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	55 1f       	adc	r21, r21
    135c:	62 9f       	mul	r22, r18
    135e:	f0 01       	movw	r30, r0
    1360:	72 9f       	mul	r23, r18
    1362:	bb 27       	eor	r27, r27
    1364:	f0 0d       	add	r31, r0
    1366:	b1 1d       	adc	r27, r1
    1368:	63 9f       	mul	r22, r19
    136a:	aa 27       	eor	r26, r26
    136c:	f0 0d       	add	r31, r0
    136e:	b1 1d       	adc	r27, r1
    1370:	aa 1f       	adc	r26, r26
    1372:	64 9f       	mul	r22, r20
    1374:	66 27       	eor	r22, r22
    1376:	b0 0d       	add	r27, r0
    1378:	a1 1d       	adc	r26, r1
    137a:	66 1f       	adc	r22, r22
    137c:	82 9f       	mul	r24, r18
    137e:	22 27       	eor	r18, r18
    1380:	b0 0d       	add	r27, r0
    1382:	a1 1d       	adc	r26, r1
    1384:	62 1f       	adc	r22, r18
    1386:	73 9f       	mul	r23, r19
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	62 1f       	adc	r22, r18
    138e:	83 9f       	mul	r24, r19
    1390:	a0 0d       	add	r26, r0
    1392:	61 1d       	adc	r22, r1
    1394:	22 1f       	adc	r18, r18
    1396:	74 9f       	mul	r23, r20
    1398:	33 27       	eor	r19, r19
    139a:	a0 0d       	add	r26, r0
    139c:	61 1d       	adc	r22, r1
    139e:	23 1f       	adc	r18, r19
    13a0:	84 9f       	mul	r24, r20
    13a2:	60 0d       	add	r22, r0
    13a4:	21 1d       	adc	r18, r1
    13a6:	82 2f       	mov	r24, r18
    13a8:	76 2f       	mov	r23, r22
    13aa:	6a 2f       	mov	r22, r26
    13ac:	11 24       	eor	r1, r1
    13ae:	9f 57       	subi	r25, 0x7F	; 127
    13b0:	50 40       	sbci	r21, 0x00	; 0
    13b2:	9a f0       	brmi	.+38     	; 0x13da <__mulsf3_pse+0x88>
    13b4:	f1 f0       	breq	.+60     	; 0x13f2 <__mulsf3_pse+0xa0>
    13b6:	88 23       	and	r24, r24
    13b8:	4a f0       	brmi	.+18     	; 0x13cc <__mulsf3_pse+0x7a>
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	bb 1f       	adc	r27, r27
    13c0:	66 1f       	adc	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	50 40       	sbci	r21, 0x00	; 0
    13ca:	a9 f7       	brne	.-22     	; 0x13b6 <__mulsf3_pse+0x64>
    13cc:	9e 3f       	cpi	r25, 0xFE	; 254
    13ce:	51 05       	cpc	r21, r1
    13d0:	80 f0       	brcs	.+32     	; 0x13f2 <__mulsf3_pse+0xa0>
    13d2:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_inf>
    13d6:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_szero>
    13da:	5f 3f       	cpi	r21, 0xFF	; 255
    13dc:	e4 f3       	brlt	.-8      	; 0x13d6 <__mulsf3_pse+0x84>
    13de:	98 3e       	cpi	r25, 0xE8	; 232
    13e0:	d4 f3       	brlt	.-12     	; 0x13d6 <__mulsf3_pse+0x84>
    13e2:	86 95       	lsr	r24
    13e4:	77 95       	ror	r23
    13e6:	67 95       	ror	r22
    13e8:	b7 95       	ror	r27
    13ea:	f7 95       	ror	r31
    13ec:	e7 95       	ror	r30
    13ee:	9f 5f       	subi	r25, 0xFF	; 255
    13f0:	c1 f7       	brne	.-16     	; 0x13e2 <__mulsf3_pse+0x90>
    13f2:	fe 2b       	or	r31, r30
    13f4:	88 0f       	add	r24, r24
    13f6:	91 1d       	adc	r25, r1
    13f8:	96 95       	lsr	r25
    13fa:	87 95       	ror	r24
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__divmodhi4>:
    1400:	97 fb       	bst	r25, 7
    1402:	07 2e       	mov	r0, r23
    1404:	16 f4       	brtc	.+4      	; 0x140a <__divmodhi4+0xa>
    1406:	00 94       	com	r0
    1408:	07 d0       	rcall	.+14     	; 0x1418 <__divmodhi4_neg1>
    140a:	77 fd       	sbrc	r23, 7
    140c:	09 d0       	rcall	.+18     	; 0x1420 <__divmodhi4_neg2>
    140e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__udivmodhi4>
    1412:	07 fc       	sbrc	r0, 7
    1414:	05 d0       	rcall	.+10     	; 0x1420 <__divmodhi4_neg2>
    1416:	3e f4       	brtc	.+14     	; 0x1426 <__divmodhi4_exit>

00001418 <__divmodhi4_neg1>:
    1418:	90 95       	com	r25
    141a:	81 95       	neg	r24
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__divmodhi4_neg2>:
    1420:	70 95       	com	r23
    1422:	61 95       	neg	r22
    1424:	7f 4f       	sbci	r23, 0xFF	; 255

00001426 <__divmodhi4_exit>:
    1426:	08 95       	ret

00001428 <__tablejump2__>:
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	05 90       	lpm	r0, Z+
    142e:	f4 91       	lpm	r31, Z
    1430:	e0 2d       	mov	r30, r0
    1432:	09 94       	ijmp

00001434 <__udivmodhi4>:
    1434:	aa 1b       	sub	r26, r26
    1436:	bb 1b       	sub	r27, r27
    1438:	51 e1       	ldi	r21, 0x11	; 17
    143a:	07 c0       	rjmp	.+14     	; 0x144a <__udivmodhi4_ep>

0000143c <__udivmodhi4_loop>:
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	a6 17       	cp	r26, r22
    1442:	b7 07       	cpc	r27, r23
    1444:	10 f0       	brcs	.+4      	; 0x144a <__udivmodhi4_ep>
    1446:	a6 1b       	sub	r26, r22
    1448:	b7 0b       	sbc	r27, r23

0000144a <__udivmodhi4_ep>:
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	5a 95       	dec	r21
    1450:	a9 f7       	brne	.-22     	; 0x143c <__udivmodhi4_loop>
    1452:	80 95       	com	r24
    1454:	90 95       	com	r25
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	08 95       	ret

0000145c <_exit>:
    145c:	f8 94       	cli

0000145e <__stop_program>:
    145e:	ff cf       	rjmp	.-2      	; 0x145e <__stop_program>
