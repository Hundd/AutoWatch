
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001b46  00001bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800106  00800106  00001be0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022bb  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076e  00000000  00000000  000040a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001552  00000000  00000000  00004811  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00005d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af2  00000000  00000000  000063ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000251d  00000000  00000000  00006ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000093fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_16>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_21>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	f4 0a       	sbc	r15, r20
      6a:	fc 0a       	sbc	r15, r28
      6c:	00 0b       	sbc	r16, r16
      6e:	06 0b       	sbc	r16, r22
      70:	0b 0b       	sbc	r16, r27
      72:	10 0b       	sbc	r17, r16
      74:	17 0b       	sbc	r17, r23
      76:	1f 0b       	sbc	r17, r31
      78:	26 0b       	sbc	r18, r22
      7a:	2e 0b       	sbc	r18, r30
      7c:	3c 0b       	sbc	r19, r28
      7e:	3c 0b       	sbc	r19, r28
      80:	3c 0b       	sbc	r19, r28
      82:	3c 0b       	sbc	r19, r28
      84:	3c 0b       	sbc	r19, r28
      86:	3c 0b       	sbc	r19, r28
      88:	3c 0b       	sbc	r19, r28
      8a:	3c 0b       	sbc	r19, r28
      8c:	3c 0b       	sbc	r19, r28
      8e:	3c 0b       	sbc	r19, r28
      90:	3c 0b       	sbc	r19, r28
      92:	3c 0b       	sbc	r19, r28
      94:	3c 0b       	sbc	r19, r28
      96:	3c 0b       	sbc	r19, r28
      98:	3c 0b       	sbc	r19, r28
      9a:	3c 0b       	sbc	r19, r28
      9c:	3c 0b       	sbc	r19, r28
      9e:	3c 0b       	sbc	r19, r28
      a0:	3c 0b       	sbc	r19, r28
      a2:	3c 0b       	sbc	r19, r28
      a4:	3c 0b       	sbc	r19, r28
      a6:	3c 0b       	sbc	r19, r28
      a8:	3c 0b       	sbc	r19, r28
      aa:	3c 0b       	sbc	r19, r28
      ac:	3c 0b       	sbc	r19, r28
      ae:	3c 0b       	sbc	r19, r28
      b0:	3c 0b       	sbc	r19, r28
      b2:	3c 0b       	sbc	r19, r28
      b4:	3c 0b       	sbc	r19, r28
      b6:	3c 0b       	sbc	r19, r28
      b8:	3c 0b       	sbc	r19, r28
      ba:	3c 0b       	sbc	r19, r28
      bc:	3c 0b       	sbc	r19, r28
      be:	3c 0b       	sbc	r19, r28
      c0:	3c 0b       	sbc	r19, r28
      c2:	3a 0b       	sbc	r19, r26
      c4:	3c 0b       	sbc	r19, r28
      c6:	3c 0b       	sbc	r19, r28
      c8:	3c 0b       	sbc	r19, r28
      ca:	3c 0b       	sbc	r19, r28
      cc:	3c 0b       	sbc	r19, r28
      ce:	3c 0b       	sbc	r19, r28
      d0:	3c 0b       	sbc	r19, r28
      d2:	3c 0b       	sbc	r19, r28
      d4:	3c 0b       	sbc	r19, r28
      d6:	3c 0b       	sbc	r19, r28
      d8:	3c 0b       	sbc	r19, r28
      da:	3c 0b       	sbc	r19, r28
      dc:	3c 0b       	sbc	r19, r28
      de:	3c 0b       	sbc	r19, r28
      e0:	3c 0b       	sbc	r19, r28
      e2:	3c 0b       	sbc	r19, r28
      e4:	3c 0b       	sbc	r19, r28
      e6:	3c 0b       	sbc	r19, r28
      e8:	3c 0b       	sbc	r19, r28
      ea:	3c 0b       	sbc	r19, r28
      ec:	3c 0b       	sbc	r19, r28
      ee:	3c 0b       	sbc	r19, r28
      f0:	3c 0b       	sbc	r19, r28
      f2:	3c 0b       	sbc	r19, r28
      f4:	3c 0b       	sbc	r19, r28
      f6:	3c 0b       	sbc	r19, r28
      f8:	3c 0b       	sbc	r19, r28
      fa:	3c 0b       	sbc	r19, r28
      fc:	3c 0b       	sbc	r19, r28
      fe:	3c 0b       	sbc	r19, r28
     100:	3c 0b       	sbc	r19, r28
     102:	3c 0b       	sbc	r19, r28
     104:	3c 0b       	sbc	r19, r28
     106:	3c 0b       	sbc	r19, r28
     108:	3c 0b       	sbc	r19, r28
     10a:	3c 0b       	sbc	r19, r28
     10c:	3c 0b       	sbc	r19, r28
     10e:	3c 0b       	sbc	r19, r28
     110:	3c 0b       	sbc	r19, r28
     112:	3c 0b       	sbc	r19, r28
     114:	3c 0b       	sbc	r19, r28
     116:	3c 0b       	sbc	r19, r28
     118:	3c 0b       	sbc	r19, r28
     11a:	3c 0b       	sbc	r19, r28
     11c:	3c 0b       	sbc	r19, r28
     11e:	3c 0b       	sbc	r19, r28
     120:	3c 0b       	sbc	r19, r28
     122:	3c 0b       	sbc	r19, r28
     124:	3c 0b       	sbc	r19, r28
     126:	3c 0b       	sbc	r19, r28
     128:	3c 0b       	sbc	r19, r28
     12a:	3c 0b       	sbc	r19, r28
     12c:	3c 0b       	sbc	r19, r28
     12e:	3c 0b       	sbc	r19, r28
     130:	3c 0b       	sbc	r19, r28
     132:	3c 0b       	sbc	r19, r28
     134:	3c 0b       	sbc	r19, r28
     136:	3c 0b       	sbc	r19, r28
     138:	3c 0b       	sbc	r19, r28
     13a:	3c 0b       	sbc	r19, r28
     13c:	3c 0b       	sbc	r19, r28
     13e:	3c 0b       	sbc	r19, r28
     140:	3c 0b       	sbc	r19, r28
     142:	3c 0b       	sbc	r19, r28
     144:	3c 0b       	sbc	r19, r28
     146:	3c 0b       	sbc	r19, r28
     148:	3c 0b       	sbc	r19, r28
     14a:	3c 0b       	sbc	r19, r28
     14c:	3c 0b       	sbc	r19, r28
     14e:	3c 0b       	sbc	r19, r28
     150:	3c 0b       	sbc	r19, r28
     152:	35 0b       	sbc	r19, r21

00000154 <__ctors_start>:
     154:	02 09       	sbc	r16, r2

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e6 e4       	ldi	r30, 0x46	; 70
     16a:	fb e1       	ldi	r31, 0x1B	; 27
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a6 30       	cpi	r26, 0x06	; 6
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	a6 e0       	ldi	r26, 0x06	; 6
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ab 31       	cpi	r26, 0x1B	; 27
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>

00000188 <__do_global_ctors>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	cb ea       	ldi	r28, 0xAB	; 171
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <__do_global_ctors+0x10>
     190:	21 97       	sbiw	r28, 0x01	; 1
     192:	fe 01       	movw	r30, r28
     194:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__tablejump2__>
     198:	ca 3a       	cpi	r28, 0xAA	; 170
     19a:	d1 07       	cpc	r29, r17
     19c:	c9 f7       	brne	.-14     	; 0x190 <__do_global_ctors+0x8>
     19e:	0e 94 bc 08 	call	0x1178	; 0x1178 <main>
     1a2:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <_Z5resetPVhS0_h>:
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		return temperature_byte;
	}
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	dc 01       	movw	r26, r24
     1b0:	fb 01       	movw	r30, r22
     1b2:	80 81       	ld	r24, Z
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <_Z5resetPVhS0_h+0x14>
     1ba:	22 0f       	add	r18, r18
     1bc:	33 1f       	adc	r19, r19
     1be:	4a 95       	dec	r20
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <_Z5resetPVhS0_h+0x10>
     1c2:	82 2b       	or	r24, r18
     1c4:	80 83       	st	Z, r24
     1c6:	8c 91       	ld	r24, X
     1c8:	92 2f       	mov	r25, r18
     1ca:	90 95       	com	r25
     1cc:	89 23       	and	r24, r25
     1ce:	8c 93       	st	X, r24
     1d0:	c7 ee       	ldi	r28, 0xE7	; 231
     1d2:	d3 e0       	ldi	r29, 0x03	; 3
     1d4:	21 97       	sbiw	r28, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <_Z5resetPVhS0_h+0x2a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <_Z5resetPVhS0_h+0x30>
     1da:	00 00       	nop
     1dc:	8c 91       	ld	r24, X
     1de:	28 2b       	or	r18, r24
     1e0:	2c 93       	st	X, r18
     1e2:	80 81       	ld	r24, Z
     1e4:	98 23       	and	r25, r24
     1e6:	90 83       	st	Z, r25
     1e8:	8f ec       	ldi	r24, 0xCF	; 207
     1ea:	97 e0       	ldi	r25, 0x07	; 7
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <_Z5resetPVhS0_h+0x42>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <_Z5resetPVhS0_h+0x48>
     1f2:	00 00       	nop
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <_Z11SendToPort1PVhS0_h>:
     1fa:	dc 01       	movw	r26, r24
     1fc:	fb 01       	movw	r30, r22
     1fe:	f8 94       	cli
     200:	90 81       	ld	r25, Z
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <_Z11SendToPort1PVhS0_h+0x12>
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	4a 95       	dec	r20
     20e:	e2 f7       	brpl	.-8      	; 0x208 <_Z11SendToPort1PVhS0_h+0xe>
     210:	92 2b       	or	r25, r18
     212:	90 83       	st	Z, r25
     214:	9c 91       	ld	r25, X
     216:	20 95       	com	r18
     218:	92 23       	and	r25, r18
     21a:	9c 93       	st	X, r25
     21c:	8a e0       	ldi	r24, 0x0A	; 10
     21e:	8a 95       	dec	r24
     220:	f1 f7       	brne	.-4      	; 0x21e <_Z11SendToPort1PVhS0_h+0x24>
     222:	00 c0       	rjmp	.+0      	; 0x224 <_Z11SendToPort1PVhS0_h+0x2a>
     224:	80 81       	ld	r24, Z
     226:	28 23       	and	r18, r24
     228:	20 83       	st	Z, r18
     22a:	8a ec       	ldi	r24, 0xCA	; 202
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <_Z11SendToPort1PVhS0_h+0x32>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_Z11SendToPort1PVhS0_h+0x38>
     232:	08 95       	ret

00000234 <_Z11SendToPort0PVhS0_h>:
     234:	dc 01       	movw	r26, r24
     236:	fb 01       	movw	r30, r22
     238:	f8 94       	cli
     23a:	90 81       	ld	r25, Z
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <_Z11SendToPort0PVhS0_h+0x12>
     242:	22 0f       	add	r18, r18
     244:	33 1f       	adc	r19, r19
     246:	4a 95       	dec	r20
     248:	e2 f7       	brpl	.-8      	; 0x242 <_Z11SendToPort0PVhS0_h+0xe>
     24a:	92 2b       	or	r25, r18
     24c:	90 83       	st	Z, r25
     24e:	9c 91       	ld	r25, X
     250:	20 95       	com	r18
     252:	92 23       	and	r25, r18
     254:	9c 93       	st	X, r25
     256:	8a ea       	ldi	r24, 0xAA	; 170
     258:	8a 95       	dec	r24
     25a:	f1 f7       	brne	.-4      	; 0x258 <_Z11SendToPort0PVhS0_h+0x24>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <_Z11SendToPort0PVhS0_h+0x2a>
     25e:	80 81       	ld	r24, Z
     260:	28 23       	and	r18, r24
     262:	20 83       	st	Z, r18
     264:	8a e2       	ldi	r24, 0x2A	; 42
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <_Z11SendToPort0PVhS0_h+0x32>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z11SendToPort0PVhS0_h+0x38>
     26c:	08 95       	ret

0000026e <_Z14SendByteToPortPVhS0_hh>:
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	6c 01       	movw	r12, r24
     280:	7b 01       	movw	r14, r22
     282:	04 2f       	mov	r16, r20
     284:	12 2f       	mov	r17, r18
     286:	c8 e0       	ldi	r28, 0x08	; 8
     288:	d0 e0       	ldi	r29, 0x00	; 0
     28a:	10 ff       	sbrs	r17, 0
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_Z14SendByteToPortPVhS0_hh+0x2c>
     28e:	40 2f       	mov	r20, r16
     290:	b7 01       	movw	r22, r14
     292:	c6 01       	movw	r24, r12
     294:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z11SendToPort1PVhS0_h>
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <_Z14SendByteToPortPVhS0_hh+0x36>
     29a:	40 2f       	mov	r20, r16
     29c:	b7 01       	movw	r22, r14
     29e:	c6 01       	movw	r24, r12
     2a0:	0e 94 1a 01 	call	0x234	; 0x234 <_Z11SendToPort0PVhS0_h>
     2a4:	16 95       	lsr	r17
     2a6:	21 97       	sbiw	r28, 0x01	; 1
     2a8:	81 f7       	brne	.-32     	; 0x28a <_Z14SendByteToPortPVhS0_hh+0x1c>
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	08 95       	ret

000002bc <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
     2bc:	8f 92       	push	r8
     2be:	9f 92       	push	r9
     2c0:	af 92       	push	r10
     2c2:	bf 92       	push	r11
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	db 01       	movw	r26, r22
     2d6:	f8 94       	cli
     2d8:	ee 20       	and	r14, r14
     2da:	09 f4       	brne	.+2      	; 0x2de <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x22>
     2dc:	50 c0       	rjmp	.+160    	; 0x37e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xc2>
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	02 2e       	mov	r0, r18
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2e>
     2e6:	66 0f       	add	r22, r22
     2e8:	77 1f       	adc	r23, r23
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2a>
     2ee:	a6 2e       	mov	r10, r22
     2f0:	b6 2e       	mov	r11, r22
     2f2:	b0 94       	com	r11
     2f4:	68 01       	movw	r12, r16
     2f6:	0e 0d       	add	r16, r14
     2f8:	11 1d       	adc	r17, r1
     2fa:	e7 e0       	ldi	r30, 0x07	; 7
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	7f 01       	movw	r14, r30
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	46 01       	movw	r8, r12
     306:	e6 01       	movw	r28, r12
     308:	18 82       	st	Y, r1
     30a:	e0 e0       	ldi	r30, 0x00	; 0
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	2c 91       	ld	r18, X
     310:	2a 29       	or	r18, r10
     312:	2c 93       	st	X, r18
     314:	ec 01       	movw	r28, r24
     316:	28 81       	ld	r18, Y
     318:	2b 21       	and	r18, r11
     31a:	28 83       	st	Y, r18
     31c:	d5 e0       	ldi	r29, 0x05	; 5
     31e:	da 95       	dec	r29
     320:	f1 f7       	brne	.-4      	; 0x31e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x62>
     322:	00 00       	nop
     324:	2c 91       	ld	r18, X
     326:	2b 21       	and	r18, r11
     328:	2c 93       	st	X, r18
     32a:	2a e2       	ldi	r18, 0x2A	; 42
     32c:	2a 95       	dec	r18
     32e:	f1 f7       	brne	.-4      	; 0x32c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x70>
     330:	00 c0       	rjmp	.+0      	; 0x332 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x76>
     332:	ea 01       	movw	r28, r20
     334:	28 81       	ld	r18, Y
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	26 23       	and	r18, r22
     33a:	37 23       	and	r19, r23
     33c:	0e 2c       	mov	r0, r14
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x88>
     340:	22 0f       	add	r18, r18
     342:	33 1f       	adc	r19, r19
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x84>
     348:	e4 01       	movw	r28, r8
     34a:	38 81       	ld	r19, Y
     34c:	23 2b       	or	r18, r19
     34e:	e7 30       	cpi	r30, 0x07	; 7
     350:	f1 05       	cpc	r31, r1
     352:	14 f0       	brlt	.+4      	; 0x358 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x9c>
     354:	28 83       	st	Y, r18
     356:	05 c0       	rjmp	.+10     	; 0x362 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	35 95       	asr	r19
     35c:	27 95       	ror	r18
     35e:	e4 01       	movw	r28, r8
     360:	28 83       	st	Y, r18
     362:	d5 e7       	ldi	r29, 0x75	; 117
     364:	da 95       	dec	r29
     366:	f1 f7       	brne	.-4      	; 0x364 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa8>
     368:	00 00       	nop
     36a:	31 96       	adiw	r30, 0x01	; 1
     36c:	e8 30       	cpi	r30, 0x08	; 8
     36e:	f1 05       	cpc	r31, r1
     370:	71 f6       	brne	.-100    	; 0x30e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
     372:	ef ef       	ldi	r30, 0xFF	; 255
     374:	ce 1a       	sub	r12, r30
     376:	de 0a       	sbc	r13, r30
     378:	0c 15       	cp	r16, r12
     37a:	1d 05       	cpc	r17, r13
     37c:	19 f6       	brne	.-122    	; 0x304 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x48>
     37e:	78 94       	sei
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	08 95       	ret

0000039a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
     3a6:	8b 01       	movw	r16, r22
     3a8:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     3aa:	42 2f       	mov	r20, r18
     3ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3b0:	2c ec       	ldi	r18, 0xCC	; 204
     3b2:	4f 2d       	mov	r20, r15
     3b4:	b8 01       	movw	r22, r16
     3b6:	ce 01       	movw	r24, r28
     3b8:	0e 94 37 01 	call	0x26e	; 0x26e <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3bc:	24 e4       	ldi	r18, 0x44	; 68
     3be:	4f 2d       	mov	r20, r15
     3c0:	b8 01       	movw	r22, r16
     3c2:	ce 01       	movw	r24, r28
     3c4:	0e 94 37 01 	call	0x26e	; 0x26e <_Z14SendByteToPortPVhS0_hh>
	}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	08 95       	ret

000003d4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3d4:	af 92       	push	r10
     3d6:	bf 92       	push	r11
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
     3ea:	6b 01       	movw	r12, r22
     3ec:	5a 01       	movw	r10, r20
     3ee:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3f0:	42 2f       	mov	r20, r18
     3f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3f6:	2c ec       	ldi	r18, 0xCC	; 204
     3f8:	4f 2d       	mov	r20, r15
     3fa:	b6 01       	movw	r22, r12
     3fc:	ce 01       	movw	r24, r28
     3fe:	0e 94 37 01 	call	0x26e	; 0x26e <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     402:	2e eb       	ldi	r18, 0xBE	; 190
     404:	4f 2d       	mov	r20, r15
     406:	b6 01       	movw	r22, r12
     408:	ce 01       	movw	r24, r28
     40a:	0e 94 37 01 	call	0x26e	; 0x26e <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     40e:	0f 2e       	mov	r0, r31
     410:	f9 e0       	ldi	r31, 0x09	; 9
     412:	ef 2e       	mov	r14, r31
     414:	f0 2d       	mov	r31, r0
     416:	2f 2d       	mov	r18, r15
     418:	a5 01       	movw	r20, r10
     41a:	b6 01       	movw	r22, r12
     41c:	ce 01       	movw	r24, r28
     41e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	bf 90       	pop	r11
     434:	af 90       	pop	r10
     436:	08 95       	ret

00000438 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
		AdcClass::Data = ADC;
     446:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     44a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     44e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZN8AdcClass4DataE+0x1>
     452:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZN8AdcClass4DataE>
		AdcClass::DataReady = true;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZN8AdcClass9DataReadyE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45c:	8a e1       	ldi	r24, 0x1A	; 26
     45e:	8a 95       	dec	r24
     460:	f1 f7       	brne	.-4      	; 0x45e <__vector_21+0x26>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     464:	9f 91       	pop	r25
     466:	8f 91       	pop	r24
     468:	0f 90       	pop	r0
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	0f 90       	pop	r0
     46e:	1f 90       	pop	r1
     470:	18 95       	reti

00000472 <__vector_16>:
		}

    }
}

ISR(TIMER0_OVF_vect){
     472:	1f 92       	push	r1
     474:	0f 92       	push	r0
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
	static uint8_t iov=0;
	static uint8_t opacityDelay = 0;
	
	if (opacityDelay == MAXGRADES) {	
     494:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ11__vector_16E12opacityDelay>
     498:	8f 30       	cpi	r24, 0x0F	; 15
     49a:	09 f5       	brne	.+66     	; 0x4de <__vector_16+0x6c>
		ClrScr();	
     49c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z6ClrScrv>
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
     4a0:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <screen_arr+0x4>
     4a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ11__vector_16E3iov>
     4a8:	e9 2f       	mov	r30, r25
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	ed 5e       	subi	r30, 0xED	; 237
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	80 81       	ld	r24, Z
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	29 13       	cpse	r18, r25
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_Z11Display7seghb>
		NextDigit(4-iov);
     4bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZZ11__vector_16E3iov>
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	89 1b       	sub	r24, r25
     4c4:	0e 94 41 0b 	call	0x1682	; 0x1682 <_Z9NextDigith>
		iov += 1;
     4c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZZ11__vector_16E3iov>
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
		if(iov > 3) iov=0;
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	18 f4       	brcc	.+6      	; 0x4d8 <__vector_16+0x66>
	
	if (opacityDelay == MAXGRADES) {	
		ClrScr();	
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
		NextDigit(4-iov);
		iov += 1;
     4d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZZ11__vector_16E3iov>
     4d6:	11 c0       	rjmp	.+34     	; 0x4fa <__vector_16+0x88>
		if(iov > 3) iov=0;
     4d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ11__vector_16E3iov>
     4dc:	0e c0       	rjmp	.+28     	; 0x4fa <__vector_16+0x88>
	} 
	else if(opacityDelay == (MAXGRADES - opacity)) {
     4de:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <opacity>
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	2f e0       	ldi	r18, 0x0F	; 15
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	24 1b       	sub	r18, r20
     4ea:	31 09       	sbc	r19, r1
     4ec:	47 fd       	sbrc	r20, 7
     4ee:	33 95       	inc	r19
     4f0:	82 17       	cp	r24, r18
     4f2:	93 07       	cpc	r25, r19
     4f4:	11 f4       	brne	.+4      	; 0x4fa <__vector_16+0x88>
		ClrScr();
     4f6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z6ClrScrv>
	}
	opacityDelay = opacityDelay < MAXGRADES ? opacityDelay + 1 : 0;
     4fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ11__vector_16E12opacityDelay>
     4fe:	8f 30       	cpi	r24, 0x0F	; 15
     500:	10 f4       	brcc	.+4      	; 0x506 <__vector_16+0x94>
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	01 c0       	rjmp	.+2      	; 0x508 <__vector_16+0x96>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ11__vector_16E12opacityDelay>
	
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <_Z21EnableTimer0Interruptv>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
     52e:	ee e6       	ldi	r30, 0x6E	; 110
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	81 60       	ori	r24, 0x01	; 1
     536:	80 83       	st	Z, r24
	TCCR0B = 1;//Prescaler
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	85 bd       	out	0x25, r24	; 37
     53c:	08 95       	ret

0000053e <_Z10resetTimerv>:
}

void resetTimer() {
	screen_arr[4] = 2; // DP position
     53e:	e3 e1       	ldi	r30, 0x13	; 19
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 0;
     546:	13 82       	std	Z+3, r1	; 0x03
	screen_arr[2] = 0;
     548:	12 82       	std	Z+2, r1	; 0x02
	screen_arr[1] = 0;
     54a:	11 82       	std	Z+1, r1	; 0x01
	screen_arr[0] = 0;
     54c:	10 82       	st	Z, r1
     54e:	08 95       	ret

00000550 <_Z6buzzerb>:
}

void buzzer(bool on) {
	if(on) {
     550:	88 23       	and	r24, r24
     552:	19 f0       	breq	.+6      	; 0x55a <_Z6buzzerb+0xa>
		DDRB |= 1 << PORTB6;
     554:	26 9a       	sbi	0x04, 6	; 4
		PORTB &= ~(1 << PORTB6);
     556:	2e 98       	cbi	0x05, 6	; 5
     558:	08 95       	ret
	} else {
		PORTB |= 1 << PORTB6;
     55a:	2e 9a       	sbi	0x05, 6	; 5
     55c:	08 95       	ret

0000055e <_Z10doubleBeepv>:
	}
}

void doubleBeep() {
	buzzer(true);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     564:	2f e7       	ldi	r18, 0x7F	; 127
     566:	88 e3       	ldi	r24, 0x38	; 56
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	21 50       	subi	r18, 0x01	; 1
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	90 40       	sbci	r25, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <_Z10doubleBeepv+0xc>
     572:	00 c0       	rjmp	.+0      	; 0x574 <_Z10doubleBeepv+0x16>
     574:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     57c:	2f e7       	ldi	r18, 0x7F	; 127
     57e:	88 e3       	ldi	r24, 0x38	; 56
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <_Z10doubleBeepv+0x24>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <_Z10doubleBeepv+0x2e>
     58c:	00 00       	nop
	_delay_ms(50);
	buzzer(true);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     594:	2f e7       	ldi	r18, 0x7F	; 127
     596:	88 e3       	ldi	r24, 0x38	; 56
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	80 40       	sbci	r24, 0x00	; 0
     59e:	90 40       	sbci	r25, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <_Z10doubleBeepv+0x3c>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <_Z10doubleBeepv+0x46>
     5a4:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     5ac:	08 95       	ret

000005ae <_Z8longBeepv>:
}

void longBeep() {
	buzzer(true);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	84 e3       	ldi	r24, 0x34	; 52
     5b8:	9c e0       	ldi	r25, 0x0C	; 12
     5ba:	21 50       	subi	r18, 0x01	; 1
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	90 40       	sbci	r25, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <_Z8longBeepv+0xc>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_Z8longBeepv+0x16>
     5c4:	00 00       	nop
	_delay_ms(500);
	buzzer(false);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     5cc:	08 95       	ret

000005ce <_Z10singleBeepv>:
}

void singleBeep() {
	buzzer(true);
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	80 e7       	ldi	r24, 0x70	; 112
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <_Z10singleBeepv+0xc>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <_Z10singleBeepv+0x16>
     5e4:	00 00       	nop
	_delay_ms(100);
	buzzer(false);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     5ec:	08 95       	ret

000005ee <_Z10keyCheckerv>:
/*
*PORTD3 MODE
*PORTD4 SETUP
*/	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	uint8_t keyState = PIND;
     5ee:	89 b1       	in	r24, 0x09	; 9
	 keyState = (~keyState >> 3) & 3;
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	80 95       	com	r24
     5f4:	90 95       	com	r25
     5f6:	95 95       	asr	r25
     5f8:	87 95       	ror	r24
     5fa:	95 95       	asr	r25
     5fc:	87 95       	ror	r24
     5fe:	95 95       	asr	r25
     600:	87 95       	ror	r24
     602:	83 70       	andi	r24, 0x03	; 3
	if (keyState == keyStatePrevious && keyState) {
     604:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_ZZ10keyCheckervE16keyStatePrevious>
     608:	89 13       	cpse	r24, r25
     60a:	22 c0       	rjmp	.+68     	; 0x650 <_Z10keyCheckerv+0x62>
     60c:	88 23       	and	r24, r24
     60e:	01 f1       	breq	.+64     	; 0x650 <_Z10keyCheckerv+0x62>
		if (times < 1500) {
     610:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     614:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     618:	2c 3d       	cpi	r18, 0xDC	; 220
     61a:	95 e0       	ldi	r25, 0x05	; 5
     61c:	39 07       	cpc	r19, r25
     61e:	60 f4       	brcc	.+24     	; 0x638 <_Z10keyCheckerv+0x4a>
			times += 1;
     620:	2f 5f       	subi	r18, 0xFF	; 255
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
     628:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
     62c:	ef ec       	ldi	r30, 0xCF	; 207
     62e:	f7 e0       	ldi	r31, 0x07	; 7
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <_Z10keyCheckerv+0x42>
     634:	00 c0       	rjmp	.+0      	; 0x636 <_Z10keyCheckerv+0x48>
     636:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10) {
     638:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     63c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     640:	2a 30       	cpi	r18, 0x0A	; 10
     642:	31 05       	cpc	r19, r1
     644:	71 f0       	breq	.+28     	; 0x662 <_Z10keyCheckerv+0x74>
			return keyState;
		}
		if (times == 1000) {
     646:	28 3e       	cpi	r18, 0xE8	; 232
     648:	33 40       	sbci	r19, 0x03	; 3
     64a:	51 f0       	breq	.+20     	; 0x660 <_Z10keyCheckerv+0x72>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	08 95       	ret
		if (times == 1000) {
			return 3;
		}
	}
	else {
		keyStatePrevious = keyState;
     650:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ10keyCheckervE16keyStatePrevious>
		times = 0;
     654:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
     658:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}

	return 0;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	08 95       	ret
		}
		if (times == 10) {
			return keyState;
		}
		if (times == 1000) {
			return 3;
     660:	83 e0       	ldi	r24, 0x03	; 3
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
}
     662:	08 95       	ret

00000664 <_Z9timerModev>:
	buzzer(true);
	_delay_ms(100);
	buzzer(false);
}

uint8_t timerMode () {
     664:	af 92       	push	r10
     666:	bf 92       	push	r11
     668:	cf 92       	push	r12
     66a:	df 92       	push	r13
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	63 97       	sbiw	r28, 0x13	; 19
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
	resetTimer();
     688:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z10resetTimerv>
	doubleBeep();
     68c:	0e 94 af 02 	call	0x55e	; 0x55e <_Z10doubleBeepv>
	
	while(true) {
		readTime(timeArr);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z8readTimePh>
		currentSeconds = timeArr[0];
     698:	c9 80       	ldd	r12, Y+1	; 0x01
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
     69a:	a1 2c       	mov	r10, r1
uint8_t timerMode () {
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
     69c:	d1 2c       	mov	r13, r1

uint8_t timerMode () {
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	10 e0       	ldi	r17, 0x00	; 0
			secondsTotal += 1;
		}
		
		lastSeconds = currentSeconds;
		
		screen_arr[0] = secondsTotal % 10;
     6a2:	0f 2e       	mov	r0, r31
     6a4:	f3 e1       	ldi	r31, 0x13	; 19
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
		screen_arr[1] = secondsTotal % 60 / 10;
     6ae:	0f 2e       	mov	r0, r31
     6b0:	fc e3       	ldi	r31, 0x3C	; 60
     6b2:	bf 2e       	mov	r11, r31
     6b4:	f0 2d       	mov	r31, r0
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <_Z9timerModev+0x5e>
	
	while(true) {
		readTime(timeArr);
		currentSeconds = timeArr[0];
		
		if (conunerEnabled && currentSeconds != lastSeconds) {
     6b8:	8c 15       	cp	r24, r12
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <_Z9timerModev+0x5c>
			secondsTotal += 1;
     6bc:	0f 5f       	subi	r16, 0xFF	; 255
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
     6c0:	c8 2e       	mov	r12, r24
			secondsTotal += 1;
		}
		
		lastSeconds = currentSeconds;
		
		screen_arr[0] = secondsTotal % 10;
     6c2:	98 01       	movw	r18, r16
     6c4:	ad ec       	ldi	r26, 0xCD	; 205
     6c6:	bc ec       	ldi	r27, 0xCC	; 204
     6c8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	9c 01       	movw	r18, r24
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	98 01       	movw	r18, r16
     6f0:	28 1b       	sub	r18, r24
     6f2:	39 0b       	sbc	r19, r25
     6f4:	f7 01       	movw	r30, r14
     6f6:	20 83       	st	Z, r18
		screen_arr[1] = secondsTotal % 60 / 10;
     6f8:	98 01       	movw	r18, r16
     6fa:	a9 e8       	ldi	r26, 0x89	; 137
     6fc:	b8 e8       	ldi	r27, 0x88	; 136
     6fe:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     702:	ac 01       	movw	r20, r24
     704:	56 95       	lsr	r21
     706:	47 95       	ror	r20
     708:	52 95       	swap	r21
     70a:	42 95       	swap	r20
     70c:	4f 70       	andi	r20, 0x0F	; 15
     70e:	45 27       	eor	r20, r21
     710:	5f 70       	andi	r21, 0x0F	; 15
     712:	45 27       	eor	r20, r21
     714:	b4 9e       	mul	r11, r20
     716:	c0 01       	movw	r24, r0
     718:	b5 9e       	mul	r11, r21
     71a:	90 0d       	add	r25, r0
     71c:	11 24       	eor	r1, r1
     71e:	28 1b       	sub	r18, r24
     720:	39 0b       	sbc	r19, r25
     722:	ad ec       	ldi	r26, 0xCD	; 205
     724:	bc ec       	ldi	r27, 0xCC	; 204
     726:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	96 95       	lsr	r25
     730:	87 95       	ror	r24
     732:	96 95       	lsr	r25
     734:	87 95       	ror	r24
     736:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[2] = secondsTotal / 60 % 10;
     738:	9a 01       	movw	r18, r20
     73a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     73e:	96 95       	lsr	r25
     740:	87 95       	ror	r24
     742:	96 95       	lsr	r25
     744:	87 95       	ror	r24
     746:	96 95       	lsr	r25
     748:	87 95       	ror	r24
     74a:	9c 01       	movw	r18, r24
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	82 0f       	add	r24, r18
     75e:	93 1f       	adc	r25, r19
     760:	48 1b       	sub	r20, r24
     762:	59 0b       	sbc	r21, r25
     764:	42 83       	std	Z+2, r20	; 0x02
		screen_arr[3] = secondsTotal / 60 / 10;
     766:	98 01       	movw	r18, r16
     768:	36 95       	lsr	r19
     76a:	27 95       	ror	r18
     76c:	36 95       	lsr	r19
     76e:	27 95       	ror	r18
     770:	36 95       	lsr	r19
     772:	27 95       	ror	r18
     774:	af e4       	ldi	r26, 0x4F	; 79
     776:	bb e1       	ldi	r27, 0x1B	; 27
     778:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     77c:	96 95       	lsr	r25
     77e:	87 95       	ror	r24
     780:	96 95       	lsr	r25
     782:	87 95       	ror	r24
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	83 83       	std	Z+3, r24	; 0x03
		
		if (conunerEnabled) {
     78a:	dd 20       	and	r13, r13
     78c:	e1 f0       	breq	.+56     	; 0x7c6 <_Z9timerModev+0x162>
			if (secondsTotal == TIMER_ALARM_TIME) {
     78e:	0b 31       	cpi	r16, 0x1B	; 27
     790:	11 05       	cpc	r17, r1
     792:	31 f4       	brne	.+12     	; 0x7a0 <_Z9timerModev+0x13c>
				buzzering = true;
				buzzer(true);
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     79a:	aa 24       	eor	r10, r10
     79c:	a3 94       	inc	r10
     79e:	17 c0       	rjmp	.+46     	; 0x7ce <_Z9timerModev+0x16a>
			}
			if (buzzering && secondsTotal <= TIMER_ALARM_TIME + 4 && secondsTotal > TIMER_ALARM_TIME) {
     7a0:	aa 20       	and	r10, r10
     7a2:	89 f0       	breq	.+34     	; 0x7c6 <_Z9timerModev+0x162>
     7a4:	00 32       	cpi	r16, 0x20	; 32
     7a6:	11 05       	cpc	r17, r1
     7a8:	58 f4       	brcc	.+22     	; 0x7c0 <_Z9timerModev+0x15c>
     7aa:	0c 31       	cpi	r16, 0x1C	; 28
     7ac:	11 05       	cpc	r17, r1
     7ae:	58 f0       	brcs	.+22     	; 0x7c6 <_Z9timerModev+0x162>
				buzzer((secondsTotal - TIMER_ALARM_TIME) % 2 - 1);
     7b0:	c8 01       	movw	r24, r16
     7b2:	4b 97       	sbiw	r24, 0x1b	; 27
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	8f 27       	eor	r24, r31
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <_Z9timerModev+0x162>
			}
			
			if (buzzering && secondsTotal > TIMER_ALARM_TIME + 4) {
				buzzer(false);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 a8 02 	call	0x550	; 0x550 <_Z6buzzerb>
			}
		}
		
		if (secondsTotal > 15 * 60) {
     7c6:	05 38       	cpi	r16, 0x85	; 133
     7c8:	23 e0       	ldi	r18, 0x03	; 3
     7ca:	12 07       	cpc	r17, r18
     7cc:	a8 f5       	brcc	.+106    	; 0x838 <_Z9timerModev+0x1d4>
			return 0;
		}
		
		uint8_t key = keyChecker();
     7ce:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		
		if(key) {
     7d2:	88 23       	and	r24, r24
     7d4:	19 f1       	breq	.+70     	; 0x81c <_Z9timerModev+0x1b8>
			if (key == 1) {
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	31 f4       	brne	.+12     	; 0x7e6 <_Z9timerModev+0x182>
				// short press button 1
				singleBeep();
     7da:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_Z10singleBeepv>
				buzzering = false;
     7de:	a1 2c       	mov	r10, r1
				conunerEnabled = true;
     7e0:	dd 24       	eor	r13, r13
     7e2:	d3 94       	inc	r13
     7e4:	1b c0       	rjmp	.+54     	; 0x81c <_Z9timerModev+0x1b8>
			}
			
			if (key == 2 ) {
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	a1 f4       	brne	.+40     	; 0x812 <_Z9timerModev+0x1ae>
				// short press button 2
				doubleBeep();
     7ea:	0e 94 af 02 	call	0x55e	; 0x55e <_Z10doubleBeepv>
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
     7ee:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z10resetTimerv>
     7f2:	8f ec       	ldi	r24, 0xCF	; 207
     7f4:	97 e0       	ldi	r25, 0x07	; 7
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <_Z9timerModev+0x192>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_Z9timerModev+0x198>
     7fc:	00 00       	nop
	bool buzzering = false;
	resetTimer();
	doubleBeep();
	
	while(true) {
		readTime(timeArr);
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z8readTimePh>
		currentSeconds = timeArr[0];
     806:	89 81       	ldd	r24, Y+1	; 0x01
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
     808:	a1 2c       	mov	r10, r1
			
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
     80a:	d1 2c       	mov	r13, r1
			}
			
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	57 cf       	rjmp	.-338    	; 0x6c0 <_Z9timerModev+0x5c>
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
			}
			
			if (key == 3) {
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	19 f4       	brne	.+6      	; 0x81c <_Z9timerModev+0x1b8>
				// long press button 2
				longBeep();
     816:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z8longBeepv>
				return 0;
     81a:	0e c0       	rjmp	.+28     	; 0x838 <_Z9timerModev+0x1d4>
     81c:	ef ec       	ldi	r30, 0xCF	; 207
     81e:	f7 e0       	ldi	r31, 0x07	; 7
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <_Z9timerModev+0x1bc>
     824:	00 c0       	rjmp	.+0      	; 0x826 <_Z9timerModev+0x1c2>
     826:	00 00       	nop
	bool buzzering = false;
	resetTimer();
	doubleBeep();
	
	while(true) {
		readTime(timeArr);
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z8readTimePh>
		currentSeconds = timeArr[0];
     830:	89 81       	ldd	r24, Y+1	; 0x01
		
		if (conunerEnabled && currentSeconds != lastSeconds) {
     832:	d1 10       	cpse	r13, r1
     834:	41 cf       	rjmp	.-382    	; 0x6b8 <_Z9timerModev+0x54>
     836:	44 cf       	rjmp	.-376    	; 0x6c0 <_Z9timerModev+0x5c>

		}
		
		_delay_ms(1);
	}
}
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	63 96       	adiw	r28, 0x13	; 19
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	ff 90       	pop	r15
     850:	ef 90       	pop	r14
     852:	df 90       	pop	r13
     854:	cf 90       	pop	r12
     856:	bf 90       	pop	r11
     858:	af 90       	pop	r10
     85a:	08 95       	ret

0000085c <_Z6dsModev>:
		if(opacity < 0) opacity = 0;
	}
	
}

uint8_t dsMode() {
     85c:	3f 92       	push	r3
     85e:	4f 92       	push	r4
     860:	5f 92       	push	r5
     862:	6f 92       	push	r6
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	29 97       	sbiw	r28, 0x09	; 9
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     88e:	e3 e1       	ldi	r30, 0x13	; 19
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     896:	8d e2       	ldi	r24, 0x2D	; 45
     898:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     89a:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     89c:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     89e:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     8a0:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     8a2:	e1 2c       	mov	r14, r1
     8a4:	f1 2c       	mov	r15, r1
			else {
				screen_arr[3] = -1;
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     8a6:	6f 01       	movw	r12, r30
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fa e0       	ldi	r31, 0x0A	; 10
     8ac:	af 2e       	mov	r10, r31
     8ae:	b1 2c       	mov	r11, r1
     8b0:	f0 2d       	mov	r31, r0
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     8b2:	44 24       	eor	r4, r4
     8b4:	4a 94       	dec	r4
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
					
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f4 e6       	ldi	r31, 0x64	; 100
     8ba:	8f 2e       	mov	r8, r31
     8bc:	91 2c       	mov	r9, r1
     8be:	f0 2d       	mov	r31, r0
			temper <<= 8;
			temper |= temperatureArr[0];
					
					
			if(temper < 0) {
				screen_arr[3] = '-';
     8c0:	0f 2e       	mov	r0, r31
     8c2:	fd e2       	ldi	r31, 0x2D	; 45
     8c4:	3f 2e       	mov	r3, r31
     8c6:	f0 2d       	mov	r31, r0
				temper *= -1;
				temper += 1;
     8c8:	66 24       	eor	r6, r6
     8ca:	63 94       	inc	r6
     8cc:	71 2c       	mov	r7, r1
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <_Z6dsModev+0x78>
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     8d0:	e1 2c       	mov	r14, r1
     8d2:	f1 2c       	mov	r15, r1
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while(true){
		if(inner_counter == 0)
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	79 f4       	brne	.+30     	; 0x8f8 <_Z6dsModev+0x9c>
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
     8da:	22 e0       	ldi	r18, 0x02	; 2
     8dc:	49 e2       	ldi	r20, 0x29	; 41
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	6a e2       	ldi	r22, 0x2A	; 42
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	8b e2       	ldi	r24, 0x2B	; 43
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     8ec:	78 94       	sei
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     8ee:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
     8f2:	81 11       	cpse	r24, r1
     8f4:	68 c0       	rjmp	.+208    	; 0x9c6 <__stack+0xc7>
     8f6:	8c c0       	rjmp	.+280    	; 0xa10 <__stack+0x111>
		if(inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
			sei();
		}
		if(inner_counter == 1000)
     8f8:	88 ee       	ldi	r24, 0xE8	; 232
     8fa:	e8 16       	cp	r14, r24
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	f8 06       	cpc	r15, r24
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
     902:	5d c0       	rjmp	.+186    	; 0x9be <__stack+0xbf>
		{
			ReadTemperatureArr(&PORTD,&DDRD,&PIND,PIND2,temperatureArr);
     904:	8e 01       	movw	r16, r28
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	22 e0       	ldi	r18, 0x02	; 2
     90c:	49 e2       	ldi	r20, 0x29	; 41
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	6a e2       	ldi	r22, 0x2A	; 42
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	8b e2       	ldi	r24, 0x2B	; 43
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     91c:	2a 81       	ldd	r18, Y+2	; 0x02
     91e:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     920:	32 2f       	mov	r19, r18
     922:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	28 2b       	or	r18, r24
					
					
			if(temper < 0) {
     928:	33 23       	and	r19, r19
     92a:	3c f4       	brge	.+14     	; 0x93a <__stack+0x3b>
				screen_arr[3] = '-';
     92c:	f6 01       	movw	r30, r12
     92e:	33 82       	std	Z+3, r3	; 0x03
				temper *= -1;
				temper += 1;
     930:	c3 01       	movw	r24, r6
     932:	82 1b       	sub	r24, r18
     934:	93 0b       	sbc	r25, r19
     936:	9c 01       	movw	r18, r24
     938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
			}
			else {
				screen_arr[3] = -1;
     93a:	f6 01       	movw	r30, r12
     93c:	43 82       	std	Z+3, r4	; 0x03
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     93e:	c9 01       	movw	r24, r18
     940:	8f 70       	andi	r24, 0x0F	; 15
     942:	99 27       	eor	r25, r25
     944:	ac 01       	movw	r20, r24
     946:	44 0f       	add	r20, r20
     948:	55 1f       	adc	r21, r21
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	84 0f       	add	r24, r20
     958:	95 1f       	adc	r25, r21
     95a:	95 95       	asr	r25
     95c:	87 95       	ror	r24
     95e:	95 95       	asr	r25
     960:	87 95       	ror	r24
     962:	95 95       	asr	r25
     964:	87 95       	ror	r24
     966:	95 95       	asr	r25
     968:	87 95       	ror	r24
     96a:	f6 01       	movw	r30, r12
     96c:	80 83       	st	Z, r24
					
			temper>>=4;
     96e:	35 95       	asr	r19
     970:	27 95       	ror	r18
     972:	35 95       	asr	r19
     974:	27 95       	ror	r18
     976:	35 95       	asr	r19
     978:	27 95       	ror	r18
     97a:	35 95       	asr	r19
     97c:	27 95       	ror	r18
			if(temper >= 100) {
     97e:	24 36       	cpi	r18, 0x64	; 100
     980:	31 05       	cpc	r19, r1
     982:	3c f0       	brlt	.+14     	; 0x992 <__stack+0x93>
				screen_arr[3] = temper/100;
     984:	c9 01       	movw	r24, r18
     986:	b4 01       	movw	r22, r8
     988:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divmodhi4>
     98c:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     98e:	28 2f       	mov	r18, r24
     990:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     992:	c9 01       	movw	r24, r18
     994:	09 96       	adiw	r24, 0x09	; 9
     996:	43 97       	sbiw	r24, 0x13	; 19
     998:	28 f0       	brcs	.+10     	; 0x9a4 <__stack+0xa5>
     99a:	c9 01       	movw	r24, r18
     99c:	b5 01       	movw	r22, r10
     99e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divmodhi4>
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	64 2d       	mov	r22, r4
     9a6:	f6 01       	movw	r30, r12
     9a8:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper%10;
     9aa:	c9 01       	movw	r24, r18
     9ac:	b5 01       	movw	r22, r10
     9ae:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divmodhi4>
     9b2:	81 83       	std	Z+1, r24	; 0x01
		}


		uint8_t key = keyChecker();
     9b4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
     9b8:	81 11       	cpse	r24, r1
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <__stack+0xc7>
     9bc:	22 c0       	rjmp	.+68     	; 0xa02 <__stack+0x103>
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     9be:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
     9c2:	88 23       	and	r24, r24
     9c4:	21 f0       	breq	.+8      	; 0x9ce <__stack+0xcf>
			if (key == 1) return 2;
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	c1 f0       	breq	.+48     	; 0x9fa <__stack+0xfb>
			
			if (key == 2 ) {
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	c1 f0       	breq	.+48     	; 0x9fe <__stack+0xff>
     9ce:	8f ec       	ldi	r24, 0xCF	; 207
     9d0:	97 e0       	ldi	r25, 0x07	; 7
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <__stack+0xd3>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <__stack+0xd9>
     9d8:	00 00       	nop
				return 5;
			}

		}
		_delay_ms(1);
		if(inner_counter <=1000)
     9da:	99 ee       	ldi	r25, 0xE9	; 233
     9dc:	e9 16       	cp	r14, r25
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	f9 06       	cpc	r15, r25
     9e2:	20 f4       	brcc	.+8      	; 0x9ec <__stack+0xed>
		inner_counter +=1;
     9e4:	ef ef       	ldi	r30, 0xFF	; 255
     9e6:	ee 1a       	sub	r14, r30
     9e8:	fe 0a       	sbc	r15, r30
     9ea:	74 cf       	rjmp	.-280    	; 0x8d4 <_Z6dsModev+0x78>
		else {
			inner_counter =0;
			exit_counter +=1;
     9ec:	53 94       	inc	r5
			if(exit_counter>7) return 0;
     9ee:	f7 e0       	ldi	r31, 0x07	; 7
     9f0:	f5 15       	cp	r31, r5
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	6d cf       	rjmp	.-294    	; 0x8d0 <_Z6dsModev+0x74>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	12 c0       	rjmp	.+36     	; 0xa1e <__stack+0x11f>
		}


		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 2;
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	10 c0       	rjmp	.+32     	; 0xa1e <__stack+0x11f>
			
			if (key == 2 ) {
				// short press button 2
				return 5;
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	0e c0       	rjmp	.+28     	; 0xa1e <__stack+0x11f>
     a02:	8f ec       	ldi	r24, 0xCF	; 207
     a04:	97 e0       	ldi	r25, 0x07	; 7
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <__stack+0x107>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <__stack+0x10d>
     a0c:	00 00       	nop
     a0e:	ea cf       	rjmp	.-44     	; 0x9e4 <__stack+0xe5>
     a10:	ef ec       	ldi	r30, 0xCF	; 207
     a12:	f7 e0       	ldi	r31, 0x07	; 7
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <__stack+0x115>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x11b>
     a1a:	00 00       	nop
     a1c:	e3 cf       	rjmp	.-58     	; 0x9e4 <__stack+0xe5>
			inner_counter =0;
			exit_counter +=1;
			if(exit_counter>7) return 0;
		}
	}
}
     a1e:	29 96       	adiw	r28, 0x09	; 9
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	5f 90       	pop	r5
     a48:	4f 90       	pop	r4
     a4a:	3f 90       	pop	r3
     a4c:	08 95       	ret

00000a4e <_Z7acbModev>:

uint8_t acbMode() {
     a4e:	3f 92       	push	r3
     a50:	4f 92       	push	r4
     a52:	5f 92       	push	r5
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
		screen_arr[4] = 1;
     a70:	e3 e1       	ldi	r30, 0x13	; 19
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	84 83       	std	Z+4, r24	; 0x04
		screen_arr[3] = 'u';
     a78:	85 e7       	ldi	r24, 0x75	; 117
     a7a:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[2] = -1;
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = -1;
     a80:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[0] = -1;
     a82:	80 83       	st	Z, r24
		sei();
     a84:	78 94       	sei
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     a86:	ec e7       	ldi	r30, 0x7C	; 124
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     a90:	80 81       	ld	r24, Z
     a92:	80 7f       	andi	r24, 0xF0	; 240
     a94:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     a96:	80 81       	ld	r24, Z
     a98:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     a9a:	ea e7       	ldi	r30, 0x7A	; 122
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	80 64       	ori	r24, 0x40	; 64
     aa2:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     aa4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZN8AdcClass9DataReadyE>
     aa8:	88 23       	and	r24, r24
     aaa:	e1 f3       	breq	.-8      	; 0xaa4 <_Z7acbModev+0x56>
		Voltage = CalculateVoltage(Data);
     aac:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZN8AdcClass4DataE>
     ab0:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <_ZN8AdcClass4DataE+0x1>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     abc:	2a ea       	ldi	r18, 0xAA	; 170
     abe:	31 ef       	ldi	r19, 0xF1	; 241
     ac0:	44 e9       	ldi	r20, 0x94	; 148
     ac2:	51 e4       	ldi	r21, 0x41	; 65
     ac4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
     ac8:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <adcOb+0x4>
     acc:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <adcOb+0x5>
     ad0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adcOb+0x6>
     ad4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <adcOb+0x7>
		DataReady = false;
     ad8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN8AdcClass9DataReadyE>
     adc:	8f e1       	ldi	r24, 0x1F	; 31
     ade:	9e e4       	ldi	r25, 0x4E	; 78
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <_Z7acbModev+0x92>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <_Z7acbModev+0x98>
     ae6:	00 00       	nop
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     ae8:	ec e7       	ldi	r30, 0x7C	; 124
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     af2:	80 81       	ld	r24, Z
     af4:	80 7f       	andi	r24, 0xF0	; 240
     af6:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     af8:	80 81       	ld	r24, Z
     afa:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     afc:	ea e7       	ldi	r30, 0x7A	; 122
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	80 64       	ori	r24, 0x40	; 64
     b04:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     b06:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZN8AdcClass9DataReadyE>
     b0a:	88 23       	and	r24, r24
     b0c:	e1 f3       	breq	.-8      	; 0xb06 <_Z7acbModev+0xb8>
		Voltage = CalculateVoltage(Data);
     b0e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZN8AdcClass4DataE>
     b12:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <_ZN8AdcClass4DataE+0x1>
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     b1e:	2a ea       	ldi	r18, 0xAA	; 170
     b20:	31 ef       	ldi	r19, 0xF1	; 241
     b22:	44 e9       	ldi	r20, 0x94	; 148
     b24:	51 e4       	ldi	r21, 0x41	; 65
     b26:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     b2e:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <adcOb+0x4>
     b32:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <adcOb+0x5>
     b36:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adcOb+0x6>
     b3a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <adcOb+0x7>
		DataReady = false;
     b3e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN8AdcClass9DataReadyE>
		uint16_t exitCouter = 0;
		adcOb.MesureVoltage(PORTC0);
		_delay_ms(10);
		adcOb.MesureVoltage(PORTC0);
		screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     b42:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
     b46:	cd ec       	ldi	r28, 0xCD	; 205
     b48:	6c 9f       	mul	r22, r28
     b4a:	81 2d       	mov	r24, r1
     b4c:	11 24       	eor	r1, r1
     b4e:	86 95       	lsr	r24
     b50:	86 95       	lsr	r24
     b52:	86 95       	lsr	r24
     b54:	03 e1       	ldi	r16, 0x13	; 19
     b56:	11 e0       	ldi	r17, 0x01	; 1
     b58:	f8 01       	movw	r30, r16
     b5a:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     b5c:	88 0f       	add	r24, r24
     b5e:	98 2f       	mov	r25, r24
     b60:	99 0f       	add	r25, r25
     b62:	99 0f       	add	r25, r25
     b64:	89 0f       	add	r24, r25
     b66:	68 1b       	sub	r22, r24
     b68:	61 83       	std	Z+1, r22	; 0x01
		screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	c7 01       	movw	r24, r14
     b74:	b6 01       	movw	r22, r12
     b76:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
     b7a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
     b7e:	6c 9f       	mul	r22, r28
     b80:	81 2d       	mov	r24, r1
     b82:	11 24       	eor	r1, r1
     b84:	86 95       	lsr	r24
     b86:	86 95       	lsr	r24
     b88:	86 95       	lsr	r24
     b8a:	88 0f       	add	r24, r24
     b8c:	98 2f       	mov	r25, r24
     b8e:	99 0f       	add	r25, r25
     b90:	99 0f       	add	r25, r25
     b92:	89 0f       	add	r24, r25
     b94:	68 1b       	sub	r22, r24
     b96:	f8 01       	movw	r30, r16
     b98:	60 83       	st	Z, r22
		screen_arr[3] = 'u';
		screen_arr[2] = -1;
		screen_arr[1] = -1;
		screen_arr[0] = -1;
		sei();
		uint16_t exitCouter = 0;
     b9a:	c0 e0       	ldi	r28, 0x00	; 0
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
			if(exitCouter % 1000 == 0) {
     b9e:	0f 2e       	mov	r0, r31
     ba0:	f8 ee       	ldi	r31, 0xE8	; 232
     ba2:	ef 2e       	mov	r14, r31
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
     ba6:	ff 2e       	mov	r15, r31
     ba8:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     baa:	0c e7       	ldi	r16, 0x7C	; 124
     bac:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     bae:	0f 2e       	mov	r0, r31
     bb0:	fa e7       	ldi	r31, 0x7A	; 122
     bb2:	af 2e       	mov	r10, r31
     bb4:	b1 2c       	mov	r11, r1
     bb6:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     bb8:	0f 2e       	mov	r0, r31
     bba:	fb e0       	ldi	r31, 0x0B	; 11
     bbc:	8f 2e       	mov	r8, r31
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	9f 2e       	mov	r9, r31
     bc2:	f0 2d       	mov	r31, r0
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				_delay_ms(1);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fd ec       	ldi	r31, 0xCD	; 205
     bc8:	3f 2e       	mov	r3, r31
     bca:	f0 2d       	mov	r31, r0
     bcc:	6f 01       	movw	r12, r30
		while(true){
			
			


			uint8_t key = keyChecker();
     bce:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
			if(key) {
				if (key == 1) return 0;
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <_Z7acbModev+0x18a>
     bd6:	83 c0       	rjmp	.+262    	; 0xcde <_Z7acbModev+0x290>
     bd8:	8f ec       	ldi	r24, 0xCF	; 207
     bda:	97 e0       	ldi	r25, 0x07	; 7
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <_Z7acbModev+0x18e>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <_Z7acbModev+0x194>
     be2:	00 00       	nop
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
     be4:	21 96       	adiw	r28, 0x01	; 1
			if(exitCouter % 1000 == 0) {
     be6:	9e 01       	movw	r18, r28
     be8:	36 95       	lsr	r19
     bea:	27 95       	ror	r18
     bec:	36 95       	lsr	r19
     bee:	27 95       	ror	r18
     bf0:	36 95       	lsr	r19
     bf2:	27 95       	ror	r18
     bf4:	a5 ec       	ldi	r26, 0xC5	; 197
     bf6:	b0 e2       	ldi	r27, 0x20	; 32
     bf8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__umulhisi3>
     bfc:	92 95       	swap	r25
     bfe:	82 95       	swap	r24
     c00:	8f 70       	andi	r24, 0x0F	; 15
     c02:	89 27       	eor	r24, r25
     c04:	9f 70       	andi	r25, 0x0F	; 15
     c06:	89 27       	eor	r24, r25
     c08:	8e 9d       	mul	r24, r14
     c0a:	90 01       	movw	r18, r0
     c0c:	8f 9d       	mul	r24, r15
     c0e:	30 0d       	add	r19, r0
     c10:	9e 9d       	mul	r25, r14
     c12:	30 0d       	add	r19, r0
     c14:	11 24       	eor	r1, r1
     c16:	c2 17       	cp	r28, r18
     c18:	d3 07       	cpc	r29, r19
     c1a:	09 f0       	breq	.+2      	; 0xc1e <_Z7acbModev+0x1d0>
     c1c:	5b c0       	rjmp	.+182    	; 0xcd4 <_Z7acbModev+0x286>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	8f 70       	andi	r24, 0x0F	; 15
     c24:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     c26:	80 81       	ld	r24, Z
     c28:	80 7f       	andi	r24, 0xF0	; 240
     c2a:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     c2c:	80 81       	ld	r24, Z
     c2e:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     c30:	f5 01       	movw	r30, r10
     c32:	80 81       	ld	r24, Z
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     c38:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZN8AdcClass9DataReadyE>
     c3c:	88 23       	and	r24, r24
     c3e:	e1 f3       	breq	.-8      	; 0xc38 <_Z7acbModev+0x1ea>
		Voltage = CalculateVoltage(Data);
     c40:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZN8AdcClass4DataE>
     c44:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <_ZN8AdcClass4DataE+0x1>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
     c50:	2a ea       	ldi	r18, 0xAA	; 170
     c52:	31 ef       	ldi	r19, 0xF1	; 241
     c54:	44 e9       	ldi	r20, 0x94	; 148
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
     c5c:	f4 01       	movw	r30, r8
     c5e:	64 83       	std	Z+4, r22	; 0x04
     c60:	75 83       	std	Z+5, r23	; 0x05
     c62:	86 83       	std	Z+6, r24	; 0x06
     c64:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     c66:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN8AdcClass9DataReadyE>
     c6a:	8f ec       	ldi	r24, 0xCF	; 207
     c6c:	97 e0       	ldi	r25, 0x07	; 7
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <_Z7acbModev+0x220>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <_Z7acbModev+0x226>
     c74:	00 00       	nop
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				_delay_ms(1);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     c76:	44 80       	ldd	r4, Z+4	; 0x04
     c78:	55 80       	ldd	r5, Z+5	; 0x05
     c7a:	66 80       	ldd	r6, Z+6	; 0x06
     c7c:	77 80       	ldd	r7, Z+7	; 0x07
     c7e:	c3 01       	movw	r24, r6
     c80:	b2 01       	movw	r22, r4
     c82:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
     c86:	63 9d       	mul	r22, r3
     c88:	81 2d       	mov	r24, r1
     c8a:	11 24       	eor	r1, r1
     c8c:	86 95       	lsr	r24
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	f6 01       	movw	r30, r12
     c94:	82 83       	std	Z+2, r24	; 0x02
				screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     c96:	88 0f       	add	r24, r24
     c98:	98 2f       	mov	r25, r24
     c9a:	99 0f       	add	r25, r25
     c9c:	99 0f       	add	r25, r25
     c9e:	89 0f       	add	r24, r25
     ca0:	68 1b       	sub	r22, r24
     ca2:	61 83       	std	Z+1, r22	; 0x01
				screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e2       	ldi	r20, 0x20	; 32
     caa:	51 e4       	ldi	r21, 0x41	; 65
     cac:	c3 01       	movw	r24, r6
     cae:	b2 01       	movw	r22, r4
     cb0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
     cb4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
     cb8:	63 9d       	mul	r22, r3
     cba:	81 2d       	mov	r24, r1
     cbc:	11 24       	eor	r1, r1
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	88 0f       	add	r24, r24
     cc6:	98 2f       	mov	r25, r24
     cc8:	99 0f       	add	r25, r25
     cca:	99 0f       	add	r25, r25
     ccc:	89 0f       	add	r24, r25
     cce:	68 1b       	sub	r22, r24
     cd0:	f6 01       	movw	r30, r12
     cd2:	60 83       	st	Z, r22
			}
			if(exitCouter > 7000) return 0;
     cd4:	c9 35       	cpi	r28, 0x59	; 89
     cd6:	fb e1       	ldi	r31, 0x1B	; 27
     cd8:	df 07       	cpc	r29, r31
     cda:	09 f0       	breq	.+2      	; 0xcde <_Z7acbModev+0x290>
     cdc:	78 cf       	rjmp	.-272    	; 0xbce <_Z7acbModev+0x180>
		}
}
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	7f 90       	pop	r7
     cfa:	6f 90       	pop	r6
     cfc:	5f 90       	pop	r5
     cfe:	4f 90       	pop	r4
     d00:	3f 90       	pop	r3
     d02:	08 95       	ret

00000d04 <_Z12setupMinutesv>:

uint8_t setupMinutes () {
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
     d16:	e3 e1       	ldi	r30, 0x13	; 19
     d18:	f1 e0       	ldi	r31, 0x01	; 1
     d1a:	90 81       	ld	r25, Z
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	88 0f       	add	r24, r24
     d20:	18 2f       	mov	r17, r24
     d22:	11 0f       	add	r17, r17
     d24:	11 0f       	add	r17, r17
     d26:	81 0f       	add	r24, r17
     d28:	18 2f       	mov	r17, r24
     d2a:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     d2c:	c0 e0       	ldi	r28, 0x00	; 0
     d2e:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				minutes += 1;
				minutes %= 60;
     d30:	0f 2e       	mov	r0, r31
     d32:	f9 e8       	ldi	r31, 0x89	; 137
     d34:	bf 2e       	mov	r11, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	0f 2e       	mov	r0, r31
     d3a:	fc e3       	ldi	r31, 0x3C	; 60
     d3c:	cf 2e       	mov	r12, r31
     d3e:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
			screen_arr [0] = minutes % 10;
		}
		else {
			screen_arr [1] = -1;
     d40:	7f 01       	movw	r14, r30
     d42:	0f ef       	ldi	r16, 0xFF	; 255
			return 4;
			}

		}
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
     d44:	0f 2e       	mov	r0, r31
     d46:	fd ec       	ldi	r31, 0xCD	; 205
     d48:	df 2e       	mov	r13, r31
     d4a:	f0 2d       	mov	r31, r0

uint8_t setupMinutes () {
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     d4c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
     d50:	88 23       	and	r24, r24
     d52:	81 f0       	breq	.+32     	; 0xd74 <_Z12setupMinutesv+0x70>
			if (key == 1) {
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	61 f4       	brne	.+24     	; 0xd70 <_Z12setupMinutesv+0x6c>
				minutes += 1;
     d58:	81 0f       	add	r24, r17
				minutes %= 60;
     d5a:	8b 9d       	mul	r24, r11
     d5c:	11 2d       	mov	r17, r1
     d5e:	11 24       	eor	r1, r1
     d60:	12 95       	swap	r17
     d62:	16 95       	lsr	r17
     d64:	17 70       	andi	r17, 0x07	; 7
     d66:	1c 9d       	mul	r17, r12
     d68:	80 19       	sub	r24, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	18 2f       	mov	r17, r24
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <_Z12setupMinutesv+0x70>
				
			}
			if (key == 2) {
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	41 f1       	breq	.+80     	; 0xdc4 <_Z12setupMinutesv+0xc0>
			screen_arr [0] = minutes % 10;
			return 4;
			}

		}
		if (blinker > 250) {
     d74:	cb 3f       	cpi	r28, 0xFB	; 251
     d76:	d1 05       	cpc	r29, r1
     d78:	98 f0       	brcs	.+38     	; 0xda0 <_Z12setupMinutesv+0x9c>
			screen_arr [1] = minutes / 10;
     d7a:	1d 9d       	mul	r17, r13
     d7c:	81 2d       	mov	r24, r1
     d7e:	11 24       	eor	r1, r1
     d80:	86 95       	lsr	r24
     d82:	86 95       	lsr	r24
     d84:	86 95       	lsr	r24
     d86:	f7 01       	movw	r30, r14
     d88:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     d8a:	88 0f       	add	r24, r24
     d8c:	98 2f       	mov	r25, r24
     d8e:	99 0f       	add	r25, r25
     d90:	99 0f       	add	r25, r25
     d92:	89 0f       	add	r24, r25
     d94:	f1 2f       	mov	r31, r17
     d96:	f8 1b       	sub	r31, r24
     d98:	8f 2f       	mov	r24, r31
     d9a:	f7 01       	movw	r30, r14
     d9c:	80 83       	st	Z, r24
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <_Z12setupMinutesv+0xa2>
		}
		else {
			screen_arr [1] = -1;
     da0:	f7 01       	movw	r30, r14
     da2:	01 83       	std	Z+1, r16	; 0x01
			screen_arr [0] = -1;
     da4:	00 83       	st	Z, r16
		}
		if (blinker < 500) {
     da6:	c4 3f       	cpi	r28, 0xF4	; 244
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	df 07       	cpc	r29, r31
     dac:	10 f4       	brcc	.+4      	; 0xdb2 <_Z12setupMinutesv+0xae>
			blinker += 1;
     dae:	21 96       	adiw	r28, 0x01	; 1
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <_Z12setupMinutesv+0xb2>
		}
		else {
			blinker = 0;
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	8f ec       	ldi	r24, 0xCF	; 207
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <_Z12setupMinutesv+0xb6>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <_Z12setupMinutesv+0xbc>
     dc0:	00 00       	nop
     dc2:	c4 cf       	rjmp	.-120    	; 0xd4c <_Z12setupMinutesv+0x48>
				minutes += 1;
				minutes %= 60;
				
			}
			if (key == 2) {
			rtcSendMinutes (minutes);
     dc4:	81 2f       	mov	r24, r17
     dc6:	0e 94 35 0a 	call	0x146a	; 0x146a <_Z14rtcSendMinutesh>
			screen_arr [1] = minutes / 10;
     dca:	8d ec       	ldi	r24, 0xCD	; 205
     dcc:	18 9f       	mul	r17, r24
     dce:	81 2d       	mov	r24, r1
     dd0:	11 24       	eor	r1, r1
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	86 95       	lsr	r24
     dd8:	e3 e1       	ldi	r30, 0x13	; 19
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     dde:	88 0f       	add	r24, r24
     de0:	98 2f       	mov	r25, r24
     de2:	99 0f       	add	r25, r25
     de4:	99 0f       	add	r25, r25
     de6:	89 0f       	add	r24, r25
     de8:	18 1b       	sub	r17, r24
     dea:	10 83       	st	Z, r17
			blinker = 0;
		}
		_delay_ms(1);

	}
}
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	08 95       	ret

00000e02 <_Z10setupHoursv>:
uint8_t setupHours () {
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
     e14:	e3 e1       	ldi	r30, 0x13	; 19
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	99 0f       	add	r25, r25
     e1e:	19 2f       	mov	r17, r25
     e20:	11 0f       	add	r17, r17
     e22:	11 0f       	add	r17, r17
     e24:	19 0f       	add	r17, r25
     e26:	18 0f       	add	r17, r24
	uint16_t blinker = 0;
     e28:	c0 e0       	ldi	r28, 0x00	; 0
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				hours += 1;
				hours %= 24;
     e2c:	0f 2e       	mov	r0, r31
     e2e:	fb ea       	ldi	r31, 0xAB	; 171
     e30:	bf 2e       	mov	r11, r31
     e32:	f0 2d       	mov	r31, r0
     e34:	0f 2e       	mov	r0, r31
     e36:	f8 e1       	ldi	r31, 0x18	; 24
     e38:	cf 2e       	mov	r12, r31
     e3a:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
			screen_arr [2] = hours % 10;
		}
		else {
			screen_arr [3] = -1;
     e3c:	7f 01       	movw	r14, r30
     e3e:	0f ef       	ldi	r16, 0xFF	; 255
			return 0;
			}

		}
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
     e40:	0f 2e       	mov	r0, r31
     e42:	fd ec       	ldi	r31, 0xCD	; 205
     e44:	df 2e       	mov	r13, r31
     e46:	f0 2d       	mov	r31, r0
}
uint8_t setupHours () {
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     e48:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
     e4c:	88 23       	and	r24, r24
     e4e:	79 f0       	breq	.+30     	; 0xe6e <_Z10setupHoursv+0x6c>
			if (key == 1) {
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	59 f4       	brne	.+22     	; 0xe6a <_Z10setupHoursv+0x68>
				hours += 1;
     e54:	81 0f       	add	r24, r17
				hours %= 24;
     e56:	8b 9d       	mul	r24, r11
     e58:	11 2d       	mov	r17, r1
     e5a:	11 24       	eor	r1, r1
     e5c:	12 95       	swap	r17
     e5e:	1f 70       	andi	r17, 0x0F	; 15
     e60:	1c 9d       	mul	r17, r12
     e62:	80 19       	sub	r24, r0
     e64:	11 24       	eor	r1, r1
     e66:	18 2f       	mov	r17, r24
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_Z10setupHoursv+0x6c>
				
			}
			if (key == 2) {
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	41 f1       	breq	.+80     	; 0xebe <_Z10setupHoursv+0xbc>
			rtcSendHours (hours);
			return 0;
			}

		}
		if (blinker > 250) {
     e6e:	cb 3f       	cpi	r28, 0xFB	; 251
     e70:	d1 05       	cpc	r29, r1
     e72:	98 f0       	brcs	.+38     	; 0xe9a <_Z10setupHoursv+0x98>
			screen_arr [3] = hours / 10;
     e74:	1d 9d       	mul	r17, r13
     e76:	81 2d       	mov	r24, r1
     e78:	11 24       	eor	r1, r1
     e7a:	86 95       	lsr	r24
     e7c:	86 95       	lsr	r24
     e7e:	86 95       	lsr	r24
     e80:	f7 01       	movw	r30, r14
     e82:	83 83       	std	Z+3, r24	; 0x03
			screen_arr [2] = hours % 10;
     e84:	88 0f       	add	r24, r24
     e86:	98 2f       	mov	r25, r24
     e88:	99 0f       	add	r25, r25
     e8a:	99 0f       	add	r25, r25
     e8c:	89 0f       	add	r24, r25
     e8e:	f1 2f       	mov	r31, r17
     e90:	f8 1b       	sub	r31, r24
     e92:	8f 2f       	mov	r24, r31
     e94:	f7 01       	movw	r30, r14
     e96:	82 83       	std	Z+2, r24	; 0x02
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <_Z10setupHoursv+0x9e>
		}
		else {
			screen_arr [3] = -1;
     e9a:	f7 01       	movw	r30, r14
     e9c:	03 83       	std	Z+3, r16	; 0x03
			screen_arr [2] = -1;
     e9e:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500) {
     ea0:	c4 3f       	cpi	r28, 0xF4	; 244
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	df 07       	cpc	r29, r31
     ea6:	10 f4       	brcc	.+4      	; 0xeac <_Z10setupHoursv+0xaa>
			blinker += 1;
     ea8:	21 96       	adiw	r28, 0x01	; 1
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <_Z10setupHoursv+0xae>
		}
		else {
			blinker = 0;
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	d0 e0       	ldi	r29, 0x00	; 0
     eb0:	8f ec       	ldi	r24, 0xCF	; 207
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <_Z10setupHoursv+0xb2>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <_Z10setupHoursv+0xb8>
     eba:	00 00       	nop
     ebc:	c5 cf       	rjmp	.-118    	; 0xe48 <_Z10setupHoursv+0x46>
				hours += 1;
				hours %= 24;
				
			}
			if (key == 2) {
			rtcSendHours (hours);
     ebe:	81 2f       	mov	r24, r17
     ec0:	0e 94 82 0a 	call	0x1504	; 0x1504 <_Z12rtcSendHoursh>
		}
		_delay_ms(1);


	}
}
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	08 95       	ret

00000eda <_Z14clrScreenArrayv>:
	}

	return 0;
}
void clrScreenArray () {
	screen_arr[0]=-1;
     eda:	e3 e1       	ldi	r30, 0x13	; 19
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	80 83       	st	Z, r24
	screen_arr[1]=-1;
     ee2:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2]=-1;
     ee4:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3]=-1;
     ee6:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4]=-1;
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	08 95       	ret

00000eec <_Z8rtcCyclev>:
		
		_delay_ms(1);
	}
}

uint8_t rtcCycle () {
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	67 97       	sbiw	r28, 0x17	; 23
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
	int8_t endLowEnergy = -1;
	static double adcAvg = 1023;

	uint8_t timeArr[0x13];

	bool powerGoodDelay = true;
     f20:	55 24       	eor	r5, r5
     f22:	53 94       	inc	r5
		_delay_ms(1);
	}
}

uint8_t rtcCycle () {
	int8_t startLowEnergy = -1;
     f24:	bb 24       	eor	r11, r11
     f26:	ba 94       	dec	r11
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
				if(startLowEnergy == endLowEnergy) {
					clrScreenArray();
					powerGoodDelay = false;
     f28:	a1 2c       	mov	r10, r1
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     f2a:	0f 2e       	mov	r0, r31
     f2c:	fc e3       	ldi	r31, 0x3C	; 60
     f2e:	2f 2e       	mov	r2, r31
     f30:	31 2c       	mov	r3, r1
     f32:	f0 2d       	mov	r31, r0
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		
		readTime(timeArr);
		
		if (powerGood || powerGoodDelay) {
			screen_arr[0] = timeArr[1] & 0x0F;
     f34:	0f 2e       	mov	r0, r31
     f36:	f3 e1       	ldi	r31, 0x13	; 19
     f38:	cf 2e       	mov	r12, r31
     f3a:	f1 e0       	ldi	r31, 0x01	; 1
     f3c:	df 2e       	mov	r13, r31
     f3e:	f0 2d       	mov	r31, r0
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
     f40:	68 94       	set
     f42:	44 24       	eor	r4, r4
     f44:	41 f8       	bld	r4, 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     f46:	0c e7       	ldi	r16, 0x7C	; 124
     f48:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     f4a:	0f 2e       	mov	r0, r31
     f4c:	fa e7       	ldi	r31, 0x7A	; 122
     f4e:	8f 2e       	mov	r8, r31
     f50:	91 2c       	mov	r9, r1
     f52:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     f54:	0f 2e       	mov	r0, r31
     f56:	fb e0       	ldi	r31, 0x0B	; 11
     f58:	6f 2e       	mov	r6, r31
     f5a:	f1 e0       	ldi	r31, 0x01	; 1
     f5c:	7f 2e       	mov	r7, r31
     f5e:	f0 2d       	mov	r31, r0

	bool powerGoodDelay = true;


	while (true) {
		bool powerGood = PINC & 1;
     f60:	86 b1       	in	r24, 0x06	; 6
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	f8 2e       	mov	r15, r24
		//bool powerGood = false;
		
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		
		readTime(timeArr);
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z8readTimePh>
		
		if (powerGood || powerGoodDelay) {
     f6e:	f1 10       	cpse	r15, r1
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <_Z8rtcCyclev+0x8a>
     f72:	55 20       	and	r5, r5
     f74:	01 f1       	breq	.+64     	; 0xfb6 <_Z8rtcCyclev+0xca>
			screen_arr[0] = timeArr[1] & 0x0F;
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	98 2f       	mov	r25, r24
     f7a:	9f 70       	andi	r25, 0x0F	; 15
     f7c:	f6 01       	movw	r30, r12
     f7e:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	95 95       	asr	r25
     f84:	87 95       	ror	r24
     f86:	95 95       	asr	r25
     f88:	87 95       	ror	r24
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	98 2f       	mov	r25, r24
     f98:	9f 70       	andi	r25, 0x0F	; 15
     f9a:	92 83       	std	Z+2, r25	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	95 95       	asr	r25
     fa8:	87 95       	ror	r24
     faa:	95 95       	asr	r25
     fac:	87 95       	ror	r24
     fae:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[4] = 2;//Dot Point Position
     fb0:	44 82       	std	Z+4, r4	; 0x04
			
		}
		if(powerGood) {
     fb2:	f1 10       	cpse	r15, r1
     fb4:	34 c0       	rjmp	.+104    	; 0x101e <_Z8rtcCyclev+0x132>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
     fb6:	ff ef       	ldi	r31, 0xFF	; 255
     fb8:	bf 12       	cpse	r11, r31
     fba:	1f c0       	rjmp	.+62     	; 0xffa <_Z8rtcCyclev+0x10e>
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     fbc:	2a 81       	ldd	r18, Y+2	; 0x02
     fbe:	82 2f       	mov	r24, r18
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	95 95       	asr	r25
     fc8:	87 95       	ror	r24
     fca:	95 95       	asr	r25
     fcc:	87 95       	ror	r24
     fce:	95 95       	asr	r25
     fd0:	87 95       	ror	r24
     fd2:	ac 01       	movw	r20, r24
     fd4:	44 0f       	add	r20, r20
     fd6:	55 1f       	adc	r21, r21
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	84 0f       	add	r24, r20
     fe6:	95 1f       	adc	r25, r21
     fe8:	2f 70       	andi	r18, 0x0F	; 15
     fea:	82 0f       	add	r24, r18
     fec:	91 1d       	adc	r25, r1
     fee:	05 96       	adiw	r24, 0x05	; 5
     ff0:	b1 01       	movw	r22, r2
     ff2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__divmodhi4>
     ff6:	b8 2e       	mov	r11, r24
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <_Z8rtcCyclev+0x13a>
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
				if(startLowEnergy == endLowEnergy) {
     ffc:	98 2f       	mov	r25, r24
     ffe:	96 95       	lsr	r25
    1000:	96 95       	lsr	r25
    1002:	96 95       	lsr	r25
    1004:	9e 71       	andi	r25, 0x1E	; 30
    1006:	29 2f       	mov	r18, r25
    1008:	22 0f       	add	r18, r18
    100a:	22 0f       	add	r18, r18
    100c:	92 0f       	add	r25, r18
    100e:	8f 70       	andi	r24, 0x0F	; 15
    1010:	89 0f       	add	r24, r25
    1012:	b8 12       	cpse	r11, r24
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <_Z8rtcCyclev+0x13a>
					clrScreenArray();
    1016:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z14clrScreenArrayv>
					powerGoodDelay = false;
    101a:	5a 2c       	mov	r5, r10
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <_Z8rtcCyclev+0x13a>
			
		}
		if(powerGood) {
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
    101e:	55 24       	eor	r5, r5
    1020:	53 94       	inc	r5
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
			
		}
		if(powerGood) {
			startLowEnergy = -1;
    1022:	bb 24       	eor	r11, r11
    1024:	ba 94       	dec	r11
			
			}
		
		
		
		uint8_t key = keyChecker();
    1026:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z10keyCheckerv>
		if(key) {
    102a:	88 23       	and	r24, r24
    102c:	79 f0       	breq	.+30     	; 0x104c <_Z8rtcCyclev+0x160>
			if (key == 1) {
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	39 f4       	brne	.+14     	; 0x1040 <_Z8rtcCyclev+0x154>
				// short press button 1
				if(!powerGoodDelay) {
    1032:	51 10       	cpse	r5, r1
    1034:	83 c0       	rjmp	.+262    	; 0x113c <_Z8rtcCyclev+0x250>
					powerGoodDelay = true;
    1036:	55 24       	eor	r5, r5
    1038:	53 94       	inc	r5
					startLowEnergy = -1;
    103a:	bb 24       	eor	r11, r11
    103c:	ba 94       	dec	r11
    103e:	06 c0       	rjmp	.+12     	; 0x104c <_Z8rtcCyclev+0x160>
				}
				else 
				return 1;
			}
			
			if (key == 2 ) {
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	09 f4       	brne	.+2      	; 0x1046 <_Z8rtcCyclev+0x15a>
    1044:	7d c0       	rjmp	.+250    	; 0x1140 <_Z8rtcCyclev+0x254>
				// short press button 2
				return 5;
			}
			
			if (key == 3) {
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	09 f4       	brne	.+2      	; 0x104c <_Z8rtcCyclev+0x160>
    104a:	7c c0       	rjmp	.+248    	; 0x1144 <_Z8rtcCyclev+0x258>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
    104c:	f8 01       	movw	r30, r16
    104e:	80 81       	ld	r24, Z
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    1054:	80 81       	ld	r24, Z
    1056:	80 7f       	andi	r24, 0xF0	; 240
    1058:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    105a:	80 81       	ld	r24, Z
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
    1060:	f4 01       	movw	r30, r8
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
    1068:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZN8AdcClass9DataReadyE>
    106c:	88 23       	and	r24, r24
    106e:	e1 f3       	breq	.-8      	; 0x1068 <_Z8rtcCyclev+0x17c>
		Voltage = CalculateVoltage(Data);
    1070:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <_ZN8AdcClass4DataE>
    1074:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <_ZN8AdcClass4DataE+0x1>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
    1080:	2a ea       	ldi	r18, 0xAA	; 170
    1082:	31 ef       	ldi	r19, 0xF1	; 241
    1084:	44 e9       	ldi	r20, 0x94	; 148
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
    108c:	f3 01       	movw	r30, r6
    108e:	64 83       	std	Z+4, r22	; 0x04
    1090:	75 83       	std	Z+5, r23	; 0x05
    1092:	86 83       	std	Z+6, r24	; 0x06
    1094:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
    1096:	a0 92 1a 01 	sts	0x011A, r10	; 0x80011a <_ZN8AdcClass9DataReadyE>
		}
		adcOb.MesureVoltage(PORTC1);

		//Opacity Correction
		const double corrector = 1024;
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
    109a:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <_ZN8AdcClass4DataE>
    109e:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <_ZN8AdcClass4DataE+0x1>
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 ec       	ldi	r19, 0xC0	; 192
    10a6:	4f e7       	ldi	r20, 0x7F	; 127
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    10ae:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    10b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    10b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    10ba:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5a e3       	ldi	r21, 0x3A	; 58
    10c6:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
    10ca:	6c 8b       	std	Y+20, r22	; 0x14
    10cc:	7d 8b       	std	Y+21, r23	; 0x15
    10ce:	8e 8b       	std	Y+22, r24	; 0x16
    10d0:	9f 8b       	std	Y+23, r25	; 0x17
    10d2:	b7 01       	movw	r22, r14
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e8       	ldi	r20, 0x80	; 128
    10e2:	5a e3       	ldi	r21, 0x3A	; 58
    10e4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	6c 89       	ldd	r22, Y+20	; 0x14
    10ee:	7d 89       	ldd	r23, Y+21	; 0x15
    10f0:	8e 89       	ldd	r24, Y+22	; 0x16
    10f2:	9f 89       	ldd	r25, Y+23	; 0x17
    10f4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__addsf3>
    10f8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    10fc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		opacity = MAXGRADES - adcAvg/(1024/(MAXGRADES+1));
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5c e3       	ldi	r21, 0x3C	; 60
    1110:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	80 e7       	ldi	r24, 0x70	; 112
    111e:	91 e4       	ldi	r25, 0x41	; 65
    1120:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__subsf3>
    1124:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fixsfsi>
    1128:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <opacity>
		if(opacity < 0) opacity = 0;
    112c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <opacity>
    1130:	88 23       	and	r24, r24
    1132:	0c f0       	brlt	.+2      	; 0x1136 <_Z8rtcCyclev+0x24a>
    1134:	15 cf       	rjmp	.-470    	; 0xf60 <_Z8rtcCyclev+0x74>
    1136:	a0 92 04 01 	sts	0x0104, r10	; 0x800104 <opacity>
    113a:	12 cf       	rjmp	.-476    	; 0xf60 <_Z8rtcCyclev+0x74>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else 
				return 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <_Z8rtcCyclev+0x25a>
			}
			
			if (key == 2 ) {
				// short press button 2
				return 5;
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <_Z8rtcCyclev+0x25a>
			}
			
			if (key == 3) {
				// long press button 2
				return 3;
    1144:	83 e0       	ldi	r24, 0x03	; 3
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
		opacity = MAXGRADES - adcAvg/(1024/(MAXGRADES+1));
		if(opacity < 0) opacity = 0;
	}
	
}
    1146:	67 96       	adiw	r28, 0x17	; 23
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	6f 90       	pop	r6
    116e:	5f 90       	pop	r5
    1170:	4f 90       	pop	r4
    1172:	3f 90       	pop	r3
    1174:	2f 90       	pop	r2
    1176:	08 95       	ret

00001178 <main>:
		current Screen = 2 - accumulator mode;
		current Screen = 3 - setup minutes mode;
		current Screen = 4 - setum hours mode;
	*/

	DDRD &=~(1<< 3|1<<PORTD4); //Change direction to input
    1178:	8a b1       	in	r24, 0x0a	; 10
    117a:	87 7e       	andi	r24, 0xE7	; 231
    117c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
    117e:	8b b1       	in	r24, 0x0b	; 11
    1180:	88 61       	ori	r24, 0x18	; 24
    1182:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray();//Start from blank screen
    1184:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
    1188:	0e 94 97 02 	call	0x52e	; 0x52e <_Z21EnableTimer0Interruptv>
	sei();
    118c:	78 94       	sei
	rtcInit();
    118e:	0e 94 82 09 	call	0x1304	; 0x1304 <_Z7rtcInitv>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    1192:	ec e7       	ldi	r30, 0x7C	; 124
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 7f       	andi	r24, 0xF0	; 240
    119a:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    119c:	80 81       	ld	r24, Z
    119e:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    11a0:	ea e7       	ldi	r30, 0x7A	; 122
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	87 60       	ori	r24, 0x07	; 7
    11a8:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
    11b6:	80 81       	ld	r24, Z
    11b8:	80 64       	ori	r24, 0x40	; 64
    11ba:	80 83       	st	Z, r24
uint8_t timerMode();
void clrScreenArray ();

int main(void)
{
	uint8_t currentScreen = 0;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
	sei();
	rtcInit();
	adcOb.Init();
    while (1) 
    {
		switch (currentScreen) {
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	91 f0       	breq	.+36     	; 0x11e6 <main+0x6e>
    11c2:	28 f4       	brcc	.+10     	; 0x11ce <main+0x56>
    11c4:	88 23       	and	r24, r24
    11c6:	49 f0       	breq	.+18     	; 0x11da <main+0x62>
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	51 f0       	breq	.+20     	; 0x11e0 <main+0x68>
    11cc:	18 c0       	rjmp	.+48     	; 0x11fe <main+0x86>
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <main+0x7a>
    11d2:	60 f0       	brcs	.+24     	; 0x11ec <main+0x74>
    11d4:	85 30       	cpi	r24, 0x05	; 5
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <main+0x80>
    11d8:	12 c0       	rjmp	.+36     	; 0x11fe <main+0x86>
			case 0: currentScreen = rtcCycle();
    11da:	0e 94 76 07 	call	0xeec	; 0xeec <_Z8rtcCyclev>
					break;
    11de:	ef cf       	rjmp	.-34     	; 0x11be <main+0x46>
			case 1: currentScreen = dsMode();
    11e0:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z6dsModev>
					break;
    11e4:	ec cf       	rjmp	.-40     	; 0x11be <main+0x46>
			case 2: currentScreen = acbMode();
    11e6:	0e 94 27 05 	call	0xa4e	; 0xa4e <_Z7acbModev>
					break;
    11ea:	e9 cf       	rjmp	.-46     	; 0x11be <main+0x46>
			case 3: currentScreen = setupMinutes();
    11ec:	0e 94 82 06 	call	0xd04	; 0xd04 <_Z12setupMinutesv>
					break;
    11f0:	e6 cf       	rjmp	.-52     	; 0x11be <main+0x46>
			case 4: currentScreen = setupHours();
    11f2:	0e 94 01 07 	call	0xe02	; 0xe02 <_Z10setupHoursv>
					break;
    11f6:	e3 cf       	rjmp	.-58     	; 0x11be <main+0x46>
			case 5: currentScreen = timerMode();
    11f8:	0e 94 32 03 	call	0x664	; 0x664 <_Z9timerModev>
					break;
    11fc:	e0 cf       	rjmp	.-64     	; 0x11be <main+0x46>
			default: currentScreen = rtcCycle();
    11fe:	0e 94 76 07 	call	0xeec	; 0xeec <_Z8rtcCyclev>
					 break;
    1202:	dd cf       	rjmp	.-70     	; 0x11be <main+0x46>

00001204 <_GLOBAL__sub_I_temperature_byte1>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	94 e0       	ldi	r25, 0x04	; 4
    1208:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZN8AdcClass4DataE+0x1>
    120c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZN8AdcClass4DataE>
		DataReady = false;
    1210:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZN8AdcClass9DataReadyE>
		Resistor = INFINITY;
    1214:	eb e0       	ldi	r30, 0x0B	; 11
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e8       	ldi	r26, 0x80	; 128
    121e:	bf e7       	ldi	r27, 0x7F	; 127
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
    1228:	84 83       	std	Z+4, r24	; 0x04
    122a:	95 83       	std	Z+5, r25	; 0x05
    122c:	a6 83       	std	Z+6, r26	; 0x06
    122e:	b7 83       	std	Z+7, r27	; 0x07
    1230:	08 95       	ret

00001232 <_Z13i2cSetBitratej>:
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
}
    1232:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1236:	bc 01       	movw	r22, r24
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatunsisf>
    1240:	9b 01       	movw	r18, r22
    1242:	ac 01       	movw	r20, r24
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	8a ef       	ldi	r24, 0xFA	; 250
    124a:	95 e4       	ldi	r25, 0x45	; 69
    124c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divsf3>
    1250:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
    1254:	60 31       	cpi	r22, 0x10	; 16
    1256:	88 f0       	brcs	.+34     	; 0x127a <_Z13i2cSetBitratej+0x48>
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	60 51       	subi	r22, 0x10	; 16
    125c:	71 09       	sbc	r23, r1
    125e:	07 2e       	mov	r0, r23
    1260:	00 0c       	add	r0, r0
    1262:	88 0b       	sbc	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__floatsisf>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	5e e3       	ldi	r21, 0x3E	; 62
    1272:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__mulsf3>
    1276:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
    127a:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    127e:	88 b1       	in	r24, 0x08	; 8
    1280:	80 63       	ori	r24, 0x30	; 48
    1282:	88 b9       	out	0x08, r24	; 8
    1284:	08 95       	ret

00001286 <_Z11i2cSendStopv>:
    1286:	84 e9       	ldi	r24, 0x94	; 148
    1288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	ec eb       	ldi	r30, 0xBC	; 188
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	90 81       	ld	r25, Z
    1294:	94 ff       	sbrs	r25, 4
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <_Z11i2cSendStopv+0x2e>
    1298:	8a 35       	cpi	r24, 0x5A	; 90
    129a:	31 f4       	brne	.+12     	; 0x12a8 <_Z11i2cSendStopv+0x22>
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	8a 95       	dec	r24
    12a0:	f1 f7       	brne	.-4      	; 0x129e <_Z11i2cSendStopv+0x18>
    12a2:	00 c0       	rjmp	.+0      	; 0x12a4 <_Z11i2cSendStopv+0x1e>
    12a4:	84 e6       	ldi	r24, 0x64	; 100
    12a6:	08 95       	ret
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	9a 95       	dec	r25
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <_Z11i2cSendStopv+0x24>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <_Z11i2cSendStopv+0x2a>
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	ef cf       	rjmp	.-34     	; 0x1292 <_Z11i2cSendStopv+0xc>
    12b4:	8a 35       	cpi	r24, 0x5A	; 90
    12b6:	90 f7       	brcc	.-28     	; 0x129c <_Z11i2cSendStopv+0x16>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret

000012bc <_Z18i2cWaitForCompletev>:
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	ec eb       	ldi	r30, 0xBC	; 188
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	90 81       	ld	r25, Z
    12c4:	99 23       	and	r25, r25
    12c6:	74 f0       	brlt	.+28     	; 0x12e4 <_Z18i2cWaitForCompletev+0x28>
    12c8:	8a 35       	cpi	r24, 0x5A	; 90
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <_Z18i2cWaitForCompletev+0x1c>
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	8a 95       	dec	r24
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <_Z18i2cWaitForCompletev+0x12>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <_Z18i2cWaitForCompletev+0x18>
    12d4:	84 e6       	ldi	r24, 0x64	; 100
    12d6:	08 95       	ret
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	9a 95       	dec	r25
    12dc:	f1 f7       	brne	.-4      	; 0x12da <_Z18i2cWaitForCompletev+0x1e>
    12de:	00 c0       	rjmp	.+0      	; 0x12e0 <_Z18i2cWaitForCompletev+0x24>
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
    12e2:	ef cf       	rjmp	.-34     	; 0x12c2 <_Z18i2cWaitForCompletev+0x6>
    12e4:	8a 35       	cpi	r24, 0x5A	; 90
    12e6:	90 f7       	brcc	.-28     	; 0x12cc <_Z18i2cWaitForCompletev+0x10>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret

000012ec <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
    12ec:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12f0:	28 7f       	andi	r18, 0xF8	; 248
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	28 17       	cp	r18, r24
    12f8:	39 07       	cpc	r19, r25
    12fa:	11 f0       	breq	.+4      	; 0x1300 <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
    12fc:	8a e0       	ldi	r24, 0x0A	; 10
    12fe:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
    1300:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
    1302:	08 95       	ret

00001304 <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
	i2cSetBitrate(400);
    130e:	80 e9       	ldi	r24, 0x90	; 144
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 19 09 	call	0x1232	; 0x1232 <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1316:	cc eb       	ldi	r28, 0xBC	; 188
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	84 ea       	ldi	r24, 0xA4	; 164
    131c:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    131e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1322:	0f 2e       	mov	r0, r31
    1324:	fb eb       	ldi	r31, 0xBB	; 187
    1326:	ef 2e       	mov	r14, r31
    1328:	f1 2c       	mov	r15, r1
    132a:	f0 2d       	mov	r31, r0
    132c:	80 ed       	ldi	r24, 0xD0	; 208
    132e:	f7 01       	movw	r30, r14
    1330:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1332:	14 e8       	ldi	r17, 0x84	; 132
    1334:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1336:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    133a:	88 e2       	ldi	r24, 0x28	; 40
    133c:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1340:	8e e0       	ldi	r24, 0x0E	; 14
    1342:	f7 01       	movw	r30, r14
    1344:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1346:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
    1348:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    134c:	88 e2       	ldi	r24, 0x28	; 40
    134e:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	f7 01       	movw	r30, r14
    1356:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1358:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
    135a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    135e:	88 e2       	ldi	r24, 0x28	; 40
    1360:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	f7 01       	movw	r30, r14
    1368:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    136a:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
    136c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1376:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z11i2cSendStopv>
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	08 95       	ret

00001386 <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    139e:	cc eb       	ldi	r28, 0xBC	; 188
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
    13a2:	04 ea       	ldi	r16, 0xA4	; 164
    13a4:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
    13a6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13aa:	0f 2e       	mov	r0, r31
    13ac:	fb eb       	ldi	r31, 0xBB	; 187
    13ae:	ef 2e       	mov	r14, r31
    13b0:	f1 2c       	mov	r15, r1
    13b2:	f0 2d       	mov	r31, r0
    13b4:	80 ed       	ldi	r24, 0xD0	; 208
    13b6:	f7 01       	movw	r30, r14
    13b8:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13ba:	14 e8       	ldi	r17, 0x84	; 132
    13bc:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    13be:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13c2:	88 e2       	ldi	r24, 0x28	; 40
    13c4:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13c8:	f7 01       	movw	r30, r14
    13ca:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13cc:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    13ce:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13d2:	88 e2       	ldi	r24, 0x28	; 40
    13d4:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>

	i2cSendStop();
    13d8:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    13dc:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
    13de:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13e2:	81 ed       	ldi	r24, 0xD1	; 209
    13e4:	f7 01       	movw	r30, r14
    13e6:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13e8:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
    13ea:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13ee:	88 e2       	ldi	r24, 0x28	; 40
    13f0:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
    13f4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
    13f8:	e5 01       	movw	r28, r10
    13fa:	65 01       	movw	r12, r10
    13fc:	f3 e1       	ldi	r31, 0x13	; 19
    13fe:	cf 0e       	add	r12, r31
    1400:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1402:	0f 2e       	mov	r0, r31
    1404:	fc eb       	ldi	r31, 0xBC	; 188
    1406:	ef 2e       	mov	r14, r31
    1408:	f1 2c       	mov	r15, r1
    140a:	f0 2d       	mov	r31, r0
    140c:	0f 2e       	mov	r0, r31
    140e:	f4 ec       	ldi	r31, 0xC4	; 196
    1410:	9f 2e       	mov	r9, r31
    1412:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1414:	0b eb       	ldi	r16, 0xBB	; 187
    1416:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1418:	f7 01       	movw	r30, r14
    141a:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
    141c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1420:	f8 01       	movw	r30, r16
    1422:	80 81       	ld	r24, Z
		timeArr[i] = i2cGetReceivedByte();
    1424:	89 93       	st	Y+, r24
		i2cWaitForComplete();
    1426:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
    142a:	80 e5       	ldi	r24, 0x50	; 80
    142c:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
    1430:	cc 15       	cp	r28, r12
    1432:	dd 05       	cpc	r29, r13
    1434:	89 f7       	brne	.-30     	; 0x1418 <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
    1436:	84 e8       	ldi	r24, 0x84	; 132
    1438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
    143c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    1440:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	timeArr[6] = i2cGetReceivedByte();
    1444:	f5 01       	movw	r30, r10
    1446:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
    1448:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
    144c:	88 e5       	ldi	r24, 0x58	; 88
    144e:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>

	

}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	08 95       	ret

0000146a <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
    1476:	9d ec       	ldi	r25, 0xCD	; 205
    1478:	89 9f       	mul	r24, r25
    147a:	91 2d       	mov	r25, r1
    147c:	11 24       	eor	r1, r1
    147e:	96 95       	lsr	r25
    1480:	96 95       	lsr	r25
    1482:	96 95       	lsr	r25
	bdc <<= 4;
    1484:	09 2f       	mov	r16, r25
    1486:	02 95       	swap	r16
    1488:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= minutes%10;
    148a:	99 0f       	add	r25, r25
    148c:	29 2f       	mov	r18, r25
    148e:	22 0f       	add	r18, r18
    1490:	22 0f       	add	r18, r18
    1492:	92 0f       	add	r25, r18
    1494:	89 1b       	sub	r24, r25
    1496:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1498:	cc eb       	ldi	r28, 0xBC	; 188
    149a:	d0 e0       	ldi	r29, 0x00	; 0
    149c:	84 ea       	ldi	r24, 0xA4	; 164
    149e:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    14a0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14a4:	0f 2e       	mov	r0, r31
    14a6:	fb eb       	ldi	r31, 0xBB	; 187
    14a8:	ef 2e       	mov	r14, r31
    14aa:	f1 2c       	mov	r15, r1
    14ac:	f0 2d       	mov	r31, r0
    14ae:	80 ed       	ldi	r24, 0xD0	; 208
    14b0:	f7 01       	movw	r30, r14
    14b2:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14b4:	14 e8       	ldi	r17, 0x84	; 132
    14b6:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    14b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14bc:	88 e2       	ldi	r24, 0x28	; 40
    14be:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14c2:	f7 01       	movw	r30, r14
    14c4:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14c6:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    14c8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14cc:	88 e2       	ldi	r24, 0x28	; 40
    14ce:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14d2:	f7 01       	movw	r30, r14
    14d4:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14d6:	18 83       	st	Y, r17

	i2cSendByte(0);
	i2cWaitForComplete();
    14d8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14dc:	88 e2       	ldi	r24, 0x28	; 40
    14de:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    14e2:	f7 01       	movw	r30, r14
    14e4:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    14e6:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    14e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    14ec:	88 e2       	ldi	r24, 0x28	; 40
    14ee:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>

	i2cSendStop();
    14f2:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z11i2cSendStopv>
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	08 95       	ret

00001504 <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
    1510:	9d ec       	ldi	r25, 0xCD	; 205
    1512:	89 9f       	mul	r24, r25
    1514:	91 2d       	mov	r25, r1
    1516:	11 24       	eor	r1, r1
    1518:	96 95       	lsr	r25
    151a:	96 95       	lsr	r25
    151c:	96 95       	lsr	r25
	bdc <<= 4;
    151e:	09 2f       	mov	r16, r25
    1520:	02 95       	swap	r16
    1522:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= hours%10;
    1524:	99 0f       	add	r25, r25
    1526:	29 2f       	mov	r18, r25
    1528:	22 0f       	add	r18, r18
    152a:	22 0f       	add	r18, r18
    152c:	92 0f       	add	r25, r18
    152e:	89 1b       	sub	r24, r25
    1530:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1532:	cc eb       	ldi	r28, 0xBC	; 188
    1534:	d0 e0       	ldi	r29, 0x00	; 0
    1536:	84 ea       	ldi	r24, 0xA4	; 164
    1538:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    153a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    153e:	0f 2e       	mov	r0, r31
    1540:	fb eb       	ldi	r31, 0xBB	; 187
    1542:	ef 2e       	mov	r14, r31
    1544:	f1 2c       	mov	r15, r1
    1546:	f0 2d       	mov	r31, r0
    1548:	80 ed       	ldi	r24, 0xD0	; 208
    154a:	f7 01       	movw	r30, r14
    154c:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    154e:	14 e8       	ldi	r17, 0x84	; 132
    1550:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1552:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1556:	88 e2       	ldi	r24, 0x28	; 40
    1558:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	f7 01       	movw	r30, r14
    1560:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1562:	18 83       	st	Y, r17

	i2cSendByte(0x02);
	i2cWaitForComplete();
    1564:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1568:	88 e2       	ldi	r24, 0x28	; 40
    156a:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    156e:	f7 01       	movw	r30, r14
    1570:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1572:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    1574:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1578:	88 e2       	ldi	r24, 0x28	; 40
    157a:	0e 94 76 09 	call	0x12ec	; 0x12ec <_Z18checki2cReturnCodeh>

	i2cSendStop();
    157e:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z11i2cSendStopv>
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	08 95       	ret

00001590 <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
    1590:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
    1592:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
    1594:	8a b1       	in	r24, 0x0a	; 10
    1596:	82 62       	ori	r24, 0x22	; 34
    1598:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
    159a:	8b b1       	in	r24, 0x0b	; 11
    159c:	8d 7d       	andi	r24, 0xDD	; 221
    159e:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
    15a0:	84 b1       	in	r24, 0x04	; 4
    15a2:	8d 63       	ori	r24, 0x3D	; 61
    15a4:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
    15a6:	85 b1       	in	r24, 0x05	; 5
    15a8:	82 7c       	andi	r24, 0xC2	; 194
    15aa:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
    15ac:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
    15ae:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
    15b0:	8a b1       	in	r24, 0x0a	; 10
    15b2:	80 6c       	ori	r24, 0xC0	; 192
    15b4:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
    15b6:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
    15b8:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
    15ba:	8b b1       	in	r24, 0x0b	; 11
    15bc:	80 6c       	ori	r24, 0xC0	; 192
    15be:	8b b9       	out	0x0b, r24	; 11
    15c0:	08 95       	ret

000015c2 <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	c8 2f       	mov	r28, r24
    15c8:	d6 2f       	mov	r29, r22
	ClrScr();
    15ca:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
    15ce:	d1 11       	cpse	r29, r1
    15d0:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
    15d2:	8c 2f       	mov	r24, r28
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	86 37       	cpi	r24, 0x76	; 118
    15d8:	91 05       	cpc	r25, r1
    15da:	08 f0       	brcs	.+2      	; 0x15de <_Z11Display7seghb+0x1c>
    15dc:	4d c0       	rjmp	.+154    	; 0x1678 <_Z11Display7seghb+0xb6>
    15de:	fc 01       	movw	r30, r24
    15e0:	ec 5c       	subi	r30, 0xCC	; 204
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    15e8:	85 b1       	in	r24, 0x05	; 5
    15ea:	89 62       	ori	r24, 0x29	; 41
    15ec:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    15ee:	8b b1       	in	r24, 0x0b	; 11
    15f0:	82 62       	ori	r24, 0x22	; 34
    15f2:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    15f4:	42 9a       	sbi	0x08, 2	; 8
				break;
    15f6:	42 c0       	rjmp	.+132    	; 0x167c <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    15f8:	85 b1       	in	r24, 0x05	; 5
    15fa:	89 60       	ori	r24, 0x09	; 9
    15fc:	85 b9       	out	0x05, r24	; 5
				break;
    15fe:	3e c0       	rjmp	.+124    	; 0x167c <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    1600:	85 b1       	in	r24, 0x05	; 5
    1602:	85 62       	ori	r24, 0x25	; 37
    1604:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1606:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    1608:	42 9a       	sbi	0x08, 2	; 8
				break;
    160a:	38 c0       	rjmp	.+112    	; 0x167c <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    160c:	85 b1       	in	r24, 0x05	; 5
    160e:	8d 62       	ori	r24, 0x2D	; 45
    1610:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    1612:	59 9a       	sbi	0x0b, 1	; 11
				break;
    1614:	33 c0       	rjmp	.+102    	; 0x167c <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    1616:	85 b1       	in	r24, 0x05	; 5
    1618:	8d 60       	ori	r24, 0x0D	; 13
    161a:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    161c:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    161e:	2e c0       	rjmp	.+92     	; 0x167c <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    1620:	85 b1       	in	r24, 0x05	; 5
    1622:	8c 62       	ori	r24, 0x2C	; 44
    1624:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1626:	8b b1       	in	r24, 0x0b	; 11
    1628:	82 62       	ori	r24, 0x22	; 34
    162a:	8b b9       	out	0x0b, r24	; 11
				break;
    162c:	27 c0       	rjmp	.+78     	; 0x167c <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    162e:	85 b1       	in	r24, 0x05	; 5
    1630:	8c 62       	ori	r24, 0x2C	; 44
    1632:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1634:	8b b1       	in	r24, 0x0b	; 11
    1636:	82 62       	ori	r24, 0x22	; 34
    1638:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    163a:	42 9a       	sbi	0x08, 2	; 8
				break;
    163c:	1f c0       	rjmp	.+62     	; 0x167c <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    163e:	85 b1       	in	r24, 0x05	; 5
    1640:	89 60       	ori	r24, 0x09	; 9
    1642:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1644:	8b b1       	in	r24, 0x0b	; 11
    1646:	82 62       	ori	r24, 0x22	; 34
    1648:	8b b9       	out	0x0b, r24	; 11
				break;
    164a:	18 c0       	rjmp	.+48     	; 0x167c <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    164c:	85 b1       	in	r24, 0x05	; 5
    164e:	8d 62       	ori	r24, 0x2D	; 45
    1650:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1652:	8b b1       	in	r24, 0x0b	; 11
    1654:	82 62       	ori	r24, 0x22	; 34
    1656:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1658:	42 9a       	sbi	0x08, 2	; 8
				break;
    165a:	10 c0       	rjmp	.+32     	; 0x167c <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    165c:	85 b1       	in	r24, 0x05	; 5
    165e:	8d 62       	ori	r24, 0x2D	; 45
    1660:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    1662:	8b b1       	in	r24, 0x0b	; 11
    1664:	82 62       	ori	r24, 0x22	; 34
    1666:	8b b9       	out	0x0b, r24	; 11
				break;
    1668:	09 c0       	rjmp	.+18     	; 0x167c <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    166a:	85 b1       	in	r24, 0x05	; 5
    166c:	88 62       	ori	r24, 0x28	; 40
    166e:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    1670:	42 9a       	sbi	0x08, 2	; 8
				break;
    1672:	04 c0       	rjmp	.+8      	; 0x167c <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    1674:	2a 9a       	sbi	0x05, 2	; 5
				break;
    1676:	02 c0       	rjmp	.+4      	; 0x167c <_Z11Display7seghb+0xba>
		default: ClrScr();
    1678:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z6ClrScrv>
				break;

	}
}
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    1682:	82 30       	cpi	r24, 0x02	; 2
    1684:	59 f0       	breq	.+22     	; 0x169c <_Z9NextDigith+0x1a>
    1686:	18 f4       	brcc	.+6      	; 0x168e <_Z9NextDigith+0xc>
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	31 f0       	breq	.+12     	; 0x1698 <_Z9NextDigith+0x16>
    168c:	08 95       	ret
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	39 f0       	breq	.+14     	; 0x16a0 <_Z9NextDigith+0x1e>
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	39 f0       	breq	.+14     	; 0x16a4 <_Z9NextDigith+0x22>
    1696:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    1698:	43 98       	cbi	0x08, 3	; 8
		break;
    169a:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    169c:	5e 98       	cbi	0x0b, 6	; 11
		break;
    169e:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    16a0:	5f 98       	cbi	0x0b, 7	; 11
		break;
    16a2:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    16a4:	29 98       	cbi	0x05, 1	; 5
    16a6:	08 95       	ret

000016a8 <__subsf3>:
    16a8:	50 58       	subi	r21, 0x80	; 128

000016aa <__addsf3>:
    16aa:	bb 27       	eor	r27, r27
    16ac:	aa 27       	eor	r26, r26
    16ae:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__addsf3x>
    16b2:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    16b6:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    16ba:	38 f0       	brcs	.+14     	; 0x16ca <__addsf3+0x20>
    16bc:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    16c0:	20 f0       	brcs	.+8      	; 0x16ca <__addsf3+0x20>
    16c2:	39 f4       	brne	.+14     	; 0x16d2 <__addsf3+0x28>
    16c4:	9f 3f       	cpi	r25, 0xFF	; 255
    16c6:	19 f4       	brne	.+6      	; 0x16ce <__addsf3+0x24>
    16c8:	26 f4       	brtc	.+8      	; 0x16d2 <__addsf3+0x28>
    16ca:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    16ce:	0e f4       	brtc	.+2      	; 0x16d2 <__addsf3+0x28>
    16d0:	e0 95       	com	r30
    16d2:	e7 fb       	bst	r30, 7
    16d4:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>

000016d8 <__addsf3x>:
    16d8:	e9 2f       	mov	r30, r25
    16da:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    16de:	58 f3       	brcs	.-42     	; 0x16b6 <__addsf3+0xc>
    16e0:	ba 17       	cp	r27, r26
    16e2:	62 07       	cpc	r22, r18
    16e4:	73 07       	cpc	r23, r19
    16e6:	84 07       	cpc	r24, r20
    16e8:	95 07       	cpc	r25, r21
    16ea:	20 f0       	brcs	.+8      	; 0x16f4 <__addsf3x+0x1c>
    16ec:	79 f4       	brne	.+30     	; 0x170c <__addsf3x+0x34>
    16ee:	a6 f5       	brtc	.+104    	; 0x1758 <__addsf3x+0x80>
    16f0:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    16f4:	0e f4       	brtc	.+2      	; 0x16f8 <__addsf3x+0x20>
    16f6:	e0 95       	com	r30
    16f8:	0b 2e       	mov	r0, r27
    16fa:	ba 2f       	mov	r27, r26
    16fc:	a0 2d       	mov	r26, r0
    16fe:	0b 01       	movw	r0, r22
    1700:	b9 01       	movw	r22, r18
    1702:	90 01       	movw	r18, r0
    1704:	0c 01       	movw	r0, r24
    1706:	ca 01       	movw	r24, r20
    1708:	a0 01       	movw	r20, r0
    170a:	11 24       	eor	r1, r1
    170c:	ff 27       	eor	r31, r31
    170e:	59 1b       	sub	r21, r25
    1710:	99 f0       	breq	.+38     	; 0x1738 <__addsf3x+0x60>
    1712:	59 3f       	cpi	r21, 0xF9	; 249
    1714:	50 f4       	brcc	.+20     	; 0x172a <__addsf3x+0x52>
    1716:	50 3e       	cpi	r21, 0xE0	; 224
    1718:	68 f1       	brcs	.+90     	; 0x1774 <__addsf3x+0x9c>
    171a:	1a 16       	cp	r1, r26
    171c:	f0 40       	sbci	r31, 0x00	; 0
    171e:	a2 2f       	mov	r26, r18
    1720:	23 2f       	mov	r18, r19
    1722:	34 2f       	mov	r19, r20
    1724:	44 27       	eor	r20, r20
    1726:	58 5f       	subi	r21, 0xF8	; 248
    1728:	f3 cf       	rjmp	.-26     	; 0x1710 <__addsf3x+0x38>
    172a:	46 95       	lsr	r20
    172c:	37 95       	ror	r19
    172e:	27 95       	ror	r18
    1730:	a7 95       	ror	r26
    1732:	f0 40       	sbci	r31, 0x00	; 0
    1734:	53 95       	inc	r21
    1736:	c9 f7       	brne	.-14     	; 0x172a <__addsf3x+0x52>
    1738:	7e f4       	brtc	.+30     	; 0x1758 <__addsf3x+0x80>
    173a:	1f 16       	cp	r1, r31
    173c:	ba 0b       	sbc	r27, r26
    173e:	62 0b       	sbc	r22, r18
    1740:	73 0b       	sbc	r23, r19
    1742:	84 0b       	sbc	r24, r20
    1744:	ba f0       	brmi	.+46     	; 0x1774 <__addsf3x+0x9c>
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	a1 f0       	breq	.+40     	; 0x1772 <__addsf3x+0x9a>
    174a:	ff 0f       	add	r31, r31
    174c:	bb 1f       	adc	r27, r27
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	c2 f7       	brpl	.-16     	; 0x1746 <__addsf3x+0x6e>
    1756:	0e c0       	rjmp	.+28     	; 0x1774 <__addsf3x+0x9c>
    1758:	ba 0f       	add	r27, r26
    175a:	62 1f       	adc	r22, r18
    175c:	73 1f       	adc	r23, r19
    175e:	84 1f       	adc	r24, r20
    1760:	48 f4       	brcc	.+18     	; 0x1774 <__addsf3x+0x9c>
    1762:	87 95       	ror	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	b7 95       	ror	r27
    176a:	f7 95       	ror	r31
    176c:	9e 3f       	cpi	r25, 0xFE	; 254
    176e:	08 f0       	brcs	.+2      	; 0x1772 <__addsf3x+0x9a>
    1770:	b0 cf       	rjmp	.-160    	; 0x16d2 <__addsf3+0x28>
    1772:	93 95       	inc	r25
    1774:	88 0f       	add	r24, r24
    1776:	08 f0       	brcs	.+2      	; 0x177a <__addsf3x+0xa2>
    1778:	99 27       	eor	r25, r25
    177a:	ee 0f       	add	r30, r30
    177c:	97 95       	ror	r25
    177e:	87 95       	ror	r24
    1780:	08 95       	ret

00001782 <__divsf3>:
    1782:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__divsf3x>
    1786:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    178a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    178e:	58 f0       	brcs	.+22     	; 0x17a6 <__divsf3+0x24>
    1790:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    1794:	40 f0       	brcs	.+16     	; 0x17a6 <__divsf3+0x24>
    1796:	29 f4       	brne	.+10     	; 0x17a2 <__divsf3+0x20>
    1798:	5f 3f       	cpi	r21, 0xFF	; 255
    179a:	29 f0       	breq	.+10     	; 0x17a6 <__divsf3+0x24>
    179c:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    17a0:	51 11       	cpse	r21, r1
    17a2:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    17a6:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>

000017aa <__divsf3x>:
    17aa:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    17ae:	68 f3       	brcs	.-38     	; 0x178a <__divsf3+0x8>

000017b0 <__divsf3_pse>:
    17b0:	99 23       	and	r25, r25
    17b2:	b1 f3       	breq	.-20     	; 0x17a0 <__divsf3+0x1e>
    17b4:	55 23       	and	r21, r21
    17b6:	91 f3       	breq	.-28     	; 0x179c <__divsf3+0x1a>
    17b8:	95 1b       	sub	r25, r21
    17ba:	55 0b       	sbc	r21, r21
    17bc:	bb 27       	eor	r27, r27
    17be:	aa 27       	eor	r26, r26
    17c0:	62 17       	cp	r22, r18
    17c2:	73 07       	cpc	r23, r19
    17c4:	84 07       	cpc	r24, r20
    17c6:	38 f0       	brcs	.+14     	; 0x17d6 <__divsf3_pse+0x26>
    17c8:	9f 5f       	subi	r25, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	44 1f       	adc	r20, r20
    17d2:	aa 1f       	adc	r26, r26
    17d4:	a9 f3       	breq	.-22     	; 0x17c0 <__divsf3_pse+0x10>
    17d6:	35 d0       	rcall	.+106    	; 0x1842 <__divsf3_pse+0x92>
    17d8:	0e 2e       	mov	r0, r30
    17da:	3a f0       	brmi	.+14     	; 0x17ea <__divsf3_pse+0x3a>
    17dc:	e0 e8       	ldi	r30, 0x80	; 128
    17de:	32 d0       	rcall	.+100    	; 0x1844 <__divsf3_pse+0x94>
    17e0:	91 50       	subi	r25, 0x01	; 1
    17e2:	50 40       	sbci	r21, 0x00	; 0
    17e4:	e6 95       	lsr	r30
    17e6:	00 1c       	adc	r0, r0
    17e8:	ca f7       	brpl	.-14     	; 0x17dc <__divsf3_pse+0x2c>
    17ea:	2b d0       	rcall	.+86     	; 0x1842 <__divsf3_pse+0x92>
    17ec:	fe 2f       	mov	r31, r30
    17ee:	29 d0       	rcall	.+82     	; 0x1842 <__divsf3_pse+0x92>
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	bb 1f       	adc	r27, r27
    17f8:	26 17       	cp	r18, r22
    17fa:	37 07       	cpc	r19, r23
    17fc:	48 07       	cpc	r20, r24
    17fe:	ab 07       	cpc	r26, r27
    1800:	b0 e8       	ldi	r27, 0x80	; 128
    1802:	09 f0       	breq	.+2      	; 0x1806 <__divsf3_pse+0x56>
    1804:	bb 0b       	sbc	r27, r27
    1806:	80 2d       	mov	r24, r0
    1808:	bf 01       	movw	r22, r30
    180a:	ff 27       	eor	r31, r31
    180c:	93 58       	subi	r25, 0x83	; 131
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	3a f0       	brmi	.+14     	; 0x1820 <__divsf3_pse+0x70>
    1812:	9e 3f       	cpi	r25, 0xFE	; 254
    1814:	51 05       	cpc	r21, r1
    1816:	78 f0       	brcs	.+30     	; 0x1836 <__divsf3_pse+0x86>
    1818:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    181c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    1820:	5f 3f       	cpi	r21, 0xFF	; 255
    1822:	e4 f3       	brlt	.-8      	; 0x181c <__divsf3_pse+0x6c>
    1824:	98 3e       	cpi	r25, 0xE8	; 232
    1826:	d4 f3       	brlt	.-12     	; 0x181c <__divsf3_pse+0x6c>
    1828:	86 95       	lsr	r24
    182a:	77 95       	ror	r23
    182c:	67 95       	ror	r22
    182e:	b7 95       	ror	r27
    1830:	f7 95       	ror	r31
    1832:	9f 5f       	subi	r25, 0xFF	; 255
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__divsf3_pse+0x78>
    1836:	88 0f       	add	r24, r24
    1838:	91 1d       	adc	r25, r1
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret
    1842:	e1 e0       	ldi	r30, 0x01	; 1
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	bb 1f       	adc	r27, r27
    184c:	62 17       	cp	r22, r18
    184e:	73 07       	cpc	r23, r19
    1850:	84 07       	cpc	r24, r20
    1852:	ba 07       	cpc	r27, r26
    1854:	20 f0       	brcs	.+8      	; 0x185e <__divsf3_pse+0xae>
    1856:	62 1b       	sub	r22, r18
    1858:	73 0b       	sbc	r23, r19
    185a:	84 0b       	sbc	r24, r20
    185c:	ba 0b       	sbc	r27, r26
    185e:	ee 1f       	adc	r30, r30
    1860:	88 f7       	brcc	.-30     	; 0x1844 <__divsf3_pse+0x94>
    1862:	e0 95       	com	r30
    1864:	08 95       	ret

00001866 <__fixsfsi>:
    1866:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fixunssfsi>
    186a:	68 94       	set
    186c:	b1 11       	cpse	r27, r1
    186e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    1872:	08 95       	ret

00001874 <__fixunssfsi>:
    1874:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fp_splitA>
    1878:	88 f0       	brcs	.+34     	; 0x189c <__fixunssfsi+0x28>
    187a:	9f 57       	subi	r25, 0x7F	; 127
    187c:	98 f0       	brcs	.+38     	; 0x18a4 <__fixunssfsi+0x30>
    187e:	b9 2f       	mov	r27, r25
    1880:	99 27       	eor	r25, r25
    1882:	b7 51       	subi	r27, 0x17	; 23
    1884:	b0 f0       	brcs	.+44     	; 0x18b2 <__fixunssfsi+0x3e>
    1886:	e1 f0       	breq	.+56     	; 0x18c0 <__fixunssfsi+0x4c>
    1888:	66 0f       	add	r22, r22
    188a:	77 1f       	adc	r23, r23
    188c:	88 1f       	adc	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	1a f0       	brmi	.+6      	; 0x1898 <__fixunssfsi+0x24>
    1892:	ba 95       	dec	r27
    1894:	c9 f7       	brne	.-14     	; 0x1888 <__fixunssfsi+0x14>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <__fixunssfsi+0x4c>
    1898:	b1 30       	cpi	r27, 0x01	; 1
    189a:	91 f0       	breq	.+36     	; 0x18c0 <__fixunssfsi+0x4c>
    189c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_zero>
    18a0:	b1 e0       	ldi	r27, 0x01	; 1
    18a2:	08 95       	ret
    18a4:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    18a8:	67 2f       	mov	r22, r23
    18aa:	78 2f       	mov	r23, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	b8 5f       	subi	r27, 0xF8	; 248
    18b0:	39 f0       	breq	.+14     	; 0x18c0 <__fixunssfsi+0x4c>
    18b2:	b9 3f       	cpi	r27, 0xF9	; 249
    18b4:	cc f3       	brlt	.-14     	; 0x18a8 <__fixunssfsi+0x34>
    18b6:	86 95       	lsr	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	b3 95       	inc	r27
    18be:	d9 f7       	brne	.-10     	; 0x18b6 <__fixunssfsi+0x42>
    18c0:	3e f4       	brtc	.+14     	; 0x18d0 <__fixunssfsi+0x5c>
    18c2:	90 95       	com	r25
    18c4:	80 95       	com	r24
    18c6:	70 95       	com	r23
    18c8:	61 95       	neg	r22
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	08 95       	ret

000018d2 <__floatunsisf>:
    18d2:	e8 94       	clt
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <__floatsisf+0x12>

000018d6 <__floatsisf>:
    18d6:	97 fb       	bst	r25, 7
    18d8:	3e f4       	brtc	.+14     	; 0x18e8 <__floatsisf+0x12>
    18da:	90 95       	com	r25
    18dc:	80 95       	com	r24
    18de:	70 95       	com	r23
    18e0:	61 95       	neg	r22
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	99 23       	and	r25, r25
    18ea:	a9 f0       	breq	.+42     	; 0x1916 <__floatsisf+0x40>
    18ec:	f9 2f       	mov	r31, r25
    18ee:	96 e9       	ldi	r25, 0x96	; 150
    18f0:	bb 27       	eor	r27, r27
    18f2:	93 95       	inc	r25
    18f4:	f6 95       	lsr	r31
    18f6:	87 95       	ror	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f1 11       	cpse	r31, r1
    1900:	f8 cf       	rjmp	.-16     	; 0x18f2 <__floatsisf+0x1c>
    1902:	fa f4       	brpl	.+62     	; 0x1942 <__floatsisf+0x6c>
    1904:	bb 0f       	add	r27, r27
    1906:	11 f4       	brne	.+4      	; 0x190c <__floatsisf+0x36>
    1908:	60 ff       	sbrs	r22, 0
    190a:	1b c0       	rjmp	.+54     	; 0x1942 <__floatsisf+0x6c>
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	16 c0       	rjmp	.+44     	; 0x1942 <__floatsisf+0x6c>
    1916:	88 23       	and	r24, r24
    1918:	11 f0       	breq	.+4      	; 0x191e <__floatsisf+0x48>
    191a:	96 e9       	ldi	r25, 0x96	; 150
    191c:	11 c0       	rjmp	.+34     	; 0x1940 <__floatsisf+0x6a>
    191e:	77 23       	and	r23, r23
    1920:	21 f0       	breq	.+8      	; 0x192a <__floatsisf+0x54>
    1922:	9e e8       	ldi	r25, 0x8E	; 142
    1924:	87 2f       	mov	r24, r23
    1926:	76 2f       	mov	r23, r22
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <__floatsisf+0x5e>
    192a:	66 23       	and	r22, r22
    192c:	71 f0       	breq	.+28     	; 0x194a <__floatsisf+0x74>
    192e:	96 e8       	ldi	r25, 0x86	; 134
    1930:	86 2f       	mov	r24, r22
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	2a f0       	brmi	.+10     	; 0x1942 <__floatsisf+0x6c>
    1938:	9a 95       	dec	r25
    193a:	66 0f       	add	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	da f7       	brpl	.-10     	; 0x1938 <__floatsisf+0x62>
    1942:	88 0f       	add	r24, r24
    1944:	96 95       	lsr	r25
    1946:	87 95       	ror	r24
    1948:	97 f9       	bld	r25, 7
    194a:	08 95       	ret

0000194c <__fp_inf>:
    194c:	97 f9       	bld	r25, 7
    194e:	9f 67       	ori	r25, 0x7F	; 127
    1950:	80 e8       	ldi	r24, 0x80	; 128
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	08 95       	ret

00001958 <__fp_nan>:
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	80 ec       	ldi	r24, 0xC0	; 192
    195c:	08 95       	ret

0000195e <__fp_pscA>:
    195e:	00 24       	eor	r0, r0
    1960:	0a 94       	dec	r0
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	18 06       	cpc	r1, r24
    1968:	09 06       	cpc	r0, r25
    196a:	08 95       	ret

0000196c <__fp_pscB>:
    196c:	00 24       	eor	r0, r0
    196e:	0a 94       	dec	r0
    1970:	12 16       	cp	r1, r18
    1972:	13 06       	cpc	r1, r19
    1974:	14 06       	cpc	r1, r20
    1976:	05 06       	cpc	r0, r21
    1978:	08 95       	ret

0000197a <__fp_round>:
    197a:	09 2e       	mov	r0, r25
    197c:	03 94       	inc	r0
    197e:	00 0c       	add	r0, r0
    1980:	11 f4       	brne	.+4      	; 0x1986 <__fp_round+0xc>
    1982:	88 23       	and	r24, r24
    1984:	52 f0       	brmi	.+20     	; 0x199a <__fp_round+0x20>
    1986:	bb 0f       	add	r27, r27
    1988:	40 f4       	brcc	.+16     	; 0x199a <__fp_round+0x20>
    198a:	bf 2b       	or	r27, r31
    198c:	11 f4       	brne	.+4      	; 0x1992 <__fp_round+0x18>
    198e:	60 ff       	sbrs	r22, 0
    1990:	04 c0       	rjmp	.+8      	; 0x199a <__fp_round+0x20>
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	8f 4f       	sbci	r24, 0xFF	; 255
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	08 95       	ret

0000199c <__fp_split3>:
    199c:	57 fd       	sbrc	r21, 7
    199e:	90 58       	subi	r25, 0x80	; 128
    19a0:	44 0f       	add	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	59 f0       	breq	.+22     	; 0x19bc <__fp_splitA+0x10>
    19a6:	5f 3f       	cpi	r21, 0xFF	; 255
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <__fp_splitA+0x1a>
    19aa:	47 95       	ror	r20

000019ac <__fp_splitA>:
    19ac:	88 0f       	add	r24, r24
    19ae:	97 fb       	bst	r25, 7
    19b0:	99 1f       	adc	r25, r25
    19b2:	61 f0       	breq	.+24     	; 0x19cc <__fp_splitA+0x20>
    19b4:	9f 3f       	cpi	r25, 0xFF	; 255
    19b6:	79 f0       	breq	.+30     	; 0x19d6 <__fp_splitA+0x2a>
    19b8:	87 95       	ror	r24
    19ba:	08 95       	ret
    19bc:	12 16       	cp	r1, r18
    19be:	13 06       	cpc	r1, r19
    19c0:	14 06       	cpc	r1, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	f2 cf       	rjmp	.-28     	; 0x19aa <__fp_split3+0xe>
    19c6:	46 95       	lsr	r20
    19c8:	f1 df       	rcall	.-30     	; 0x19ac <__fp_splitA>
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <__fp_splitA+0x30>
    19cc:	16 16       	cp	r1, r22
    19ce:	17 06       	cpc	r1, r23
    19d0:	18 06       	cpc	r1, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	f1 cf       	rjmp	.-30     	; 0x19b8 <__fp_splitA+0xc>
    19d6:	86 95       	lsr	r24
    19d8:	71 05       	cpc	r23, r1
    19da:	61 05       	cpc	r22, r1
    19dc:	08 94       	sec
    19de:	08 95       	ret

000019e0 <__fp_zero>:
    19e0:	e8 94       	clt

000019e2 <__fp_szero>:
    19e2:	bb 27       	eor	r27, r27
    19e4:	66 27       	eor	r22, r22
    19e6:	77 27       	eor	r23, r23
    19e8:	cb 01       	movw	r24, r22
    19ea:	97 f9       	bld	r25, 7
    19ec:	08 95       	ret

000019ee <__mulsf3>:
    19ee:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__mulsf3x>
    19f2:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    19f6:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    19fa:	38 f0       	brcs	.+14     	; 0x1a0a <__mulsf3+0x1c>
    19fc:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    1a00:	20 f0       	brcs	.+8      	; 0x1a0a <__mulsf3+0x1c>
    1a02:	95 23       	and	r25, r21
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <__mulsf3+0x1c>
    1a06:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1a0a:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    1a0e:	11 24       	eor	r1, r1
    1a10:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>

00001a14 <__mulsf3x>:
    1a14:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    1a18:	70 f3       	brcs	.-36     	; 0x19f6 <__mulsf3+0x8>

00001a1a <__mulsf3_pse>:
    1a1a:	95 9f       	mul	r25, r21
    1a1c:	c1 f3       	breq	.-16     	; 0x1a0e <__mulsf3+0x20>
    1a1e:	95 0f       	add	r25, r21
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	55 1f       	adc	r21, r21
    1a24:	62 9f       	mul	r22, r18
    1a26:	f0 01       	movw	r30, r0
    1a28:	72 9f       	mul	r23, r18
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	f0 0d       	add	r31, r0
    1a2e:	b1 1d       	adc	r27, r1
    1a30:	63 9f       	mul	r22, r19
    1a32:	aa 27       	eor	r26, r26
    1a34:	f0 0d       	add	r31, r0
    1a36:	b1 1d       	adc	r27, r1
    1a38:	aa 1f       	adc	r26, r26
    1a3a:	64 9f       	mul	r22, r20
    1a3c:	66 27       	eor	r22, r22
    1a3e:	b0 0d       	add	r27, r0
    1a40:	a1 1d       	adc	r26, r1
    1a42:	66 1f       	adc	r22, r22
    1a44:	82 9f       	mul	r24, r18
    1a46:	22 27       	eor	r18, r18
    1a48:	b0 0d       	add	r27, r0
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	62 1f       	adc	r22, r18
    1a4e:	73 9f       	mul	r23, r19
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	62 1f       	adc	r22, r18
    1a56:	83 9f       	mul	r24, r19
    1a58:	a0 0d       	add	r26, r0
    1a5a:	61 1d       	adc	r22, r1
    1a5c:	22 1f       	adc	r18, r18
    1a5e:	74 9f       	mul	r23, r20
    1a60:	33 27       	eor	r19, r19
    1a62:	a0 0d       	add	r26, r0
    1a64:	61 1d       	adc	r22, r1
    1a66:	23 1f       	adc	r18, r19
    1a68:	84 9f       	mul	r24, r20
    1a6a:	60 0d       	add	r22, r0
    1a6c:	21 1d       	adc	r18, r1
    1a6e:	82 2f       	mov	r24, r18
    1a70:	76 2f       	mov	r23, r22
    1a72:	6a 2f       	mov	r22, r26
    1a74:	11 24       	eor	r1, r1
    1a76:	9f 57       	subi	r25, 0x7F	; 127
    1a78:	50 40       	sbci	r21, 0x00	; 0
    1a7a:	9a f0       	brmi	.+38     	; 0x1aa2 <__mulsf3_pse+0x88>
    1a7c:	f1 f0       	breq	.+60     	; 0x1aba <__mulsf3_pse+0xa0>
    1a7e:	88 23       	and	r24, r24
    1a80:	4a f0       	brmi	.+18     	; 0x1a94 <__mulsf3_pse+0x7a>
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	bb 1f       	adc	r27, r27
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	a9 f7       	brne	.-22     	; 0x1a7e <__mulsf3_pse+0x64>
    1a94:	9e 3f       	cpi	r25, 0xFE	; 254
    1a96:	51 05       	cpc	r21, r1
    1a98:	80 f0       	brcs	.+32     	; 0x1aba <__mulsf3_pse+0xa0>
    1a9a:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1a9e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    1aa2:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa4:	e4 f3       	brlt	.-8      	; 0x1a9e <__mulsf3_pse+0x84>
    1aa6:	98 3e       	cpi	r25, 0xE8	; 232
    1aa8:	d4 f3       	brlt	.-12     	; 0x1a9e <__mulsf3_pse+0x84>
    1aaa:	86 95       	lsr	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	b7 95       	ror	r27
    1ab2:	f7 95       	ror	r31
    1ab4:	e7 95       	ror	r30
    1ab6:	9f 5f       	subi	r25, 0xFF	; 255
    1ab8:	c1 f7       	brne	.-16     	; 0x1aaa <__mulsf3_pse+0x90>
    1aba:	fe 2b       	or	r31, r30
    1abc:	88 0f       	add	r24, r24
    1abe:	91 1d       	adc	r25, r1
    1ac0:	96 95       	lsr	r25
    1ac2:	87 95       	ror	r24
    1ac4:	97 f9       	bld	r25, 7
    1ac6:	08 95       	ret

00001ac8 <__divmodhi4>:
    1ac8:	97 fb       	bst	r25, 7
    1aca:	07 2e       	mov	r0, r23
    1acc:	16 f4       	brtc	.+4      	; 0x1ad2 <__divmodhi4+0xa>
    1ace:	00 94       	com	r0
    1ad0:	07 d0       	rcall	.+14     	; 0x1ae0 <__divmodhi4_neg1>
    1ad2:	77 fd       	sbrc	r23, 7
    1ad4:	09 d0       	rcall	.+18     	; 0x1ae8 <__divmodhi4_neg2>
    1ad6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__udivmodhi4>
    1ada:	07 fc       	sbrc	r0, 7
    1adc:	05 d0       	rcall	.+10     	; 0x1ae8 <__divmodhi4_neg2>
    1ade:	3e f4       	brtc	.+14     	; 0x1aee <__divmodhi4_exit>

00001ae0 <__divmodhi4_neg1>:
    1ae0:	90 95       	com	r25
    1ae2:	81 95       	neg	r24
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	08 95       	ret

00001ae8 <__divmodhi4_neg2>:
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255

00001aee <__divmodhi4_exit>:
    1aee:	08 95       	ret

00001af0 <__tablejump2__>:
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	05 90       	lpm	r0, Z+
    1af6:	f4 91       	lpm	r31, Z
    1af8:	e0 2d       	mov	r30, r0
    1afa:	09 94       	ijmp

00001afc <__umulhisi3>:
    1afc:	a2 9f       	mul	r26, r18
    1afe:	b0 01       	movw	r22, r0
    1b00:	b3 9f       	mul	r27, r19
    1b02:	c0 01       	movw	r24, r0
    1b04:	a3 9f       	mul	r26, r19
    1b06:	70 0d       	add	r23, r0
    1b08:	81 1d       	adc	r24, r1
    1b0a:	11 24       	eor	r1, r1
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	b2 9f       	mul	r27, r18
    1b10:	70 0d       	add	r23, r0
    1b12:	81 1d       	adc	r24, r1
    1b14:	11 24       	eor	r1, r1
    1b16:	91 1d       	adc	r25, r1
    1b18:	08 95       	ret

00001b1a <__udivmodhi4>:
    1b1a:	aa 1b       	sub	r26, r26
    1b1c:	bb 1b       	sub	r27, r27
    1b1e:	51 e1       	ldi	r21, 0x11	; 17
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <__udivmodhi4_ep>

00001b22 <__udivmodhi4_loop>:
    1b22:	aa 1f       	adc	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	a6 17       	cp	r26, r22
    1b28:	b7 07       	cpc	r27, r23
    1b2a:	10 f0       	brcs	.+4      	; 0x1b30 <__udivmodhi4_ep>
    1b2c:	a6 1b       	sub	r26, r22
    1b2e:	b7 0b       	sbc	r27, r23

00001b30 <__udivmodhi4_ep>:
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	5a 95       	dec	r21
    1b36:	a9 f7       	brne	.-22     	; 0x1b22 <__udivmodhi4_loop>
    1b38:	80 95       	com	r24
    1b3a:	90 95       	com	r25
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	08 95       	ret

00001b42 <_exit>:
    1b42:	f8 94       	cli

00001b44 <__stop_program>:
    1b44:	ff cf       	rjmp	.-2      	; 0x1b44 <__stop_program>
