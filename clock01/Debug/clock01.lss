
clock01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001be2  00001c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800108  00800108  00001c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023a9  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00004241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d5  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00005f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b55  00000000  00000000  00006644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002523  00000000  00000000  00007199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_16>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_21>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	38 09       	sbc	r19, r8
      6a:	3b 09       	sbc	r19, r11
      6c:	3e 09       	sbc	r19, r14
      6e:	41 09       	sbc	r20, r1
      70:	44 09       	sbc	r20, r4
      72:	47 09       	sbc	r20, r7
      74:	4a 09       	sbc	r20, r10
      76:	42 0b       	sbc	r20, r18
      78:	4a 0b       	sbc	r20, r26
      7a:	4e 0b       	sbc	r20, r30
      7c:	54 0b       	sbc	r21, r20
      7e:	59 0b       	sbc	r21, r25
      80:	5e 0b       	sbc	r21, r30
      82:	65 0b       	sbc	r22, r21
      84:	6d 0b       	sbc	r22, r29
      86:	74 0b       	sbc	r23, r20
      88:	7c 0b       	sbc	r23, r28
      8a:	8a 0b       	sbc	r24, r26
      8c:	8a 0b       	sbc	r24, r26
      8e:	8a 0b       	sbc	r24, r26
      90:	8a 0b       	sbc	r24, r26
      92:	8a 0b       	sbc	r24, r26
      94:	8a 0b       	sbc	r24, r26
      96:	8a 0b       	sbc	r24, r26
      98:	8a 0b       	sbc	r24, r26
      9a:	8a 0b       	sbc	r24, r26
      9c:	8a 0b       	sbc	r24, r26
      9e:	8a 0b       	sbc	r24, r26
      a0:	8a 0b       	sbc	r24, r26
      a2:	8a 0b       	sbc	r24, r26
      a4:	8a 0b       	sbc	r24, r26
      a6:	8a 0b       	sbc	r24, r26
      a8:	8a 0b       	sbc	r24, r26
      aa:	8a 0b       	sbc	r24, r26
      ac:	8a 0b       	sbc	r24, r26
      ae:	8a 0b       	sbc	r24, r26
      b0:	8a 0b       	sbc	r24, r26
      b2:	8a 0b       	sbc	r24, r26
      b4:	8a 0b       	sbc	r24, r26
      b6:	8a 0b       	sbc	r24, r26
      b8:	8a 0b       	sbc	r24, r26
      ba:	8a 0b       	sbc	r24, r26
      bc:	8a 0b       	sbc	r24, r26
      be:	8a 0b       	sbc	r24, r26
      c0:	8a 0b       	sbc	r24, r26
      c2:	8a 0b       	sbc	r24, r26
      c4:	8a 0b       	sbc	r24, r26
      c6:	8a 0b       	sbc	r24, r26
      c8:	8a 0b       	sbc	r24, r26
      ca:	8a 0b       	sbc	r24, r26
      cc:	8a 0b       	sbc	r24, r26
      ce:	8a 0b       	sbc	r24, r26
      d0:	88 0b       	sbc	r24, r24
      d2:	8a 0b       	sbc	r24, r26
      d4:	8a 0b       	sbc	r24, r26
      d6:	8a 0b       	sbc	r24, r26
      d8:	8a 0b       	sbc	r24, r26
      da:	8a 0b       	sbc	r24, r26
      dc:	8a 0b       	sbc	r24, r26
      de:	8a 0b       	sbc	r24, r26
      e0:	8a 0b       	sbc	r24, r26
      e2:	8a 0b       	sbc	r24, r26
      e4:	8a 0b       	sbc	r24, r26
      e6:	8a 0b       	sbc	r24, r26
      e8:	8a 0b       	sbc	r24, r26
      ea:	8a 0b       	sbc	r24, r26
      ec:	8a 0b       	sbc	r24, r26
      ee:	8a 0b       	sbc	r24, r26
      f0:	8a 0b       	sbc	r24, r26
      f2:	8a 0b       	sbc	r24, r26
      f4:	8a 0b       	sbc	r24, r26
      f6:	8a 0b       	sbc	r24, r26
      f8:	8a 0b       	sbc	r24, r26
      fa:	8a 0b       	sbc	r24, r26
      fc:	8a 0b       	sbc	r24, r26
      fe:	8a 0b       	sbc	r24, r26
     100:	8a 0b       	sbc	r24, r26
     102:	8a 0b       	sbc	r24, r26
     104:	8a 0b       	sbc	r24, r26
     106:	8a 0b       	sbc	r24, r26
     108:	8a 0b       	sbc	r24, r26
     10a:	8a 0b       	sbc	r24, r26
     10c:	8a 0b       	sbc	r24, r26
     10e:	8a 0b       	sbc	r24, r26
     110:	8a 0b       	sbc	r24, r26
     112:	8a 0b       	sbc	r24, r26
     114:	8a 0b       	sbc	r24, r26
     116:	8a 0b       	sbc	r24, r26
     118:	8a 0b       	sbc	r24, r26
     11a:	8a 0b       	sbc	r24, r26
     11c:	8a 0b       	sbc	r24, r26
     11e:	8a 0b       	sbc	r24, r26
     120:	8a 0b       	sbc	r24, r26
     122:	8a 0b       	sbc	r24, r26
     124:	8a 0b       	sbc	r24, r26
     126:	8a 0b       	sbc	r24, r26
     128:	8a 0b       	sbc	r24, r26
     12a:	8a 0b       	sbc	r24, r26
     12c:	8a 0b       	sbc	r24, r26
     12e:	8a 0b       	sbc	r24, r26
     130:	8a 0b       	sbc	r24, r26
     132:	8a 0b       	sbc	r24, r26
     134:	8a 0b       	sbc	r24, r26
     136:	8a 0b       	sbc	r24, r26
     138:	8a 0b       	sbc	r24, r26
     13a:	8a 0b       	sbc	r24, r26
     13c:	8a 0b       	sbc	r24, r26
     13e:	8a 0b       	sbc	r24, r26
     140:	8a 0b       	sbc	r24, r26
     142:	8a 0b       	sbc	r24, r26
     144:	8a 0b       	sbc	r24, r26
     146:	8a 0b       	sbc	r24, r26
     148:	8a 0b       	sbc	r24, r26
     14a:	8a 0b       	sbc	r24, r26
     14c:	8a 0b       	sbc	r24, r26
     14e:	8a 0b       	sbc	r24, r26
     150:	8a 0b       	sbc	r24, r26
     152:	8a 0b       	sbc	r24, r26
     154:	8a 0b       	sbc	r24, r26
     156:	8a 0b       	sbc	r24, r26
     158:	8a 0b       	sbc	r24, r26
     15a:	8a 0b       	sbc	r24, r26
     15c:	8a 0b       	sbc	r24, r26
     15e:	8a 0b       	sbc	r24, r26
     160:	83 0b       	sbc	r24, r19

00000162 <__ctors_start>:
     162:	50 09       	sbc	r21, r0

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d8 e0       	ldi	r29, 0x08	; 8
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e0       	ldi	r26, 0x00	; 0
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	e2 ee       	ldi	r30, 0xE2	; 226
     178:	fb e1       	ldi	r31, 0x1B	; 27
     17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x10>
     17c:	05 90       	lpm	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	a8 30       	cpi	r26, 0x08	; 8
     182:	b1 07       	cpc	r27, r17
     184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0xc>

00000186 <__do_clear_bss>:
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	a8 e0       	ldi	r26, 0x08	; 8
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	01 c0       	rjmp	.+2      	; 0x190 <.do_clear_bss_start>

0000018e <.do_clear_bss_loop>:
     18e:	1d 92       	st	X+, r1

00000190 <.do_clear_bss_start>:
     190:	ae 31       	cpi	r26, 0x1E	; 30
     192:	b2 07       	cpc	r27, r18
     194:	e1 f7       	brne	.-8      	; 0x18e <.do_clear_bss_loop>

00000196 <__do_global_ctors>:
     196:	10 e0       	ldi	r17, 0x00	; 0
     198:	c2 eb       	ldi	r28, 0xB2	; 178
     19a:	d0 e0       	ldi	r29, 0x00	; 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_global_ctors+0x10>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	fe 01       	movw	r30, r28
     1a2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__tablejump2__>
     1a6:	c1 3b       	cpi	r28, 0xB1	; 177
     1a8:	d1 07       	cpc	r29, r17
     1aa:	c9 f7       	brne	.-14     	; 0x19e <__do_global_ctors+0x8>
     1ac:	0e 94 0c 09 	call	0x1218	; 0x1218 <main>
     1b0:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <_Z5resetPVhS0_h>:
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		return temperature_byte;
	}
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	dc 01       	movw	r26, r24
     1be:	fb 01       	movw	r30, r22
     1c0:	80 81       	ld	r24, Z
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_Z5resetPVhS0_h+0x14>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	4a 95       	dec	r20
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_Z5resetPVhS0_h+0x10>
     1d0:	82 2b       	or	r24, r18
     1d2:	80 83       	st	Z, r24
     1d4:	8c 91       	ld	r24, X
     1d6:	92 2f       	mov	r25, r18
     1d8:	90 95       	com	r25
     1da:	89 23       	and	r24, r25
     1dc:	8c 93       	st	X, r24
     1de:	c7 ee       	ldi	r28, 0xE7	; 231
     1e0:	d3 e0       	ldi	r29, 0x03	; 3
     1e2:	21 97       	sbiw	r28, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z5resetPVhS0_h+0x2a>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z5resetPVhS0_h+0x30>
     1e8:	00 00       	nop
     1ea:	8c 91       	ld	r24, X
     1ec:	28 2b       	or	r18, r24
     1ee:	2c 93       	st	X, r18
     1f0:	80 81       	ld	r24, Z
     1f2:	98 23       	and	r25, r24
     1f4:	90 83       	st	Z, r25
     1f6:	8f ec       	ldi	r24, 0xCF	; 207
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z5resetPVhS0_h+0x42>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z5resetPVhS0_h+0x48>
     200:	00 00       	nop
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_Z11SendToPort1PVhS0_h>:
     208:	dc 01       	movw	r26, r24
     20a:	fb 01       	movw	r30, r22
     20c:	f8 94       	cli
     20e:	90 81       	ld	r25, Z
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z11SendToPort1PVhS0_h+0x12>
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	4a 95       	dec	r20
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z11SendToPort1PVhS0_h+0xe>
     21e:	92 2b       	or	r25, r18
     220:	90 83       	st	Z, r25
     222:	9c 91       	ld	r25, X
     224:	20 95       	com	r18
     226:	92 23       	and	r25, r18
     228:	9c 93       	st	X, r25
     22a:	8a e0       	ldi	r24, 0x0A	; 10
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <_Z11SendToPort1PVhS0_h+0x24>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_Z11SendToPort1PVhS0_h+0x2a>
     232:	80 81       	ld	r24, Z
     234:	28 23       	and	r18, r24
     236:	20 83       	st	Z, r18
     238:	8a ec       	ldi	r24, 0xCA	; 202
     23a:	8a 95       	dec	r24
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z11SendToPort1PVhS0_h+0x32>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z11SendToPort1PVhS0_h+0x38>
     240:	08 95       	ret

00000242 <_Z11SendToPort0PVhS0_h>:
     242:	dc 01       	movw	r26, r24
     244:	fb 01       	movw	r30, r22
     246:	f8 94       	cli
     248:	90 81       	ld	r25, Z
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11SendToPort0PVhS0_h+0x12>
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	4a 95       	dec	r20
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11SendToPort0PVhS0_h+0xe>
     258:	92 2b       	or	r25, r18
     25a:	90 83       	st	Z, r25
     25c:	9c 91       	ld	r25, X
     25e:	20 95       	com	r18
     260:	92 23       	and	r25, r18
     262:	9c 93       	st	X, r25
     264:	8a ea       	ldi	r24, 0xAA	; 170
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <_Z11SendToPort0PVhS0_h+0x24>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z11SendToPort0PVhS0_h+0x2a>
     26c:	80 81       	ld	r24, Z
     26e:	28 23       	and	r18, r24
     270:	20 83       	st	Z, r18
     272:	8a e2       	ldi	r24, 0x2A	; 42
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <_Z11SendToPort0PVhS0_h+0x32>
     278:	00 c0       	rjmp	.+0      	; 0x27a <_Z11SendToPort0PVhS0_h+0x38>
     27a:	08 95       	ret

0000027c <_Z14SendByteToPortPVhS0_hh>:
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	6c 01       	movw	r12, r24
     28e:	7b 01       	movw	r14, r22
     290:	04 2f       	mov	r16, r20
     292:	12 2f       	mov	r17, r18
     294:	c8 e0       	ldi	r28, 0x08	; 8
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	10 ff       	sbrs	r17, 0
     29a:	06 c0       	rjmp	.+12     	; 0x2a8 <_Z14SendByteToPortPVhS0_hh+0x2c>
     29c:	40 2f       	mov	r20, r16
     29e:	b7 01       	movw	r22, r14
     2a0:	c6 01       	movw	r24, r12
     2a2:	0e 94 04 01 	call	0x208	; 0x208 <_Z11SendToPort1PVhS0_h>
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <_Z14SendByteToPortPVhS0_hh+0x36>
     2a8:	40 2f       	mov	r20, r16
     2aa:	b7 01       	movw	r22, r14
     2ac:	c6 01       	movw	r24, r12
     2ae:	0e 94 21 01 	call	0x242	; 0x242 <_Z11SendToPort0PVhS0_h>
     2b2:	16 95       	lsr	r17
     2b4:	21 97       	sbiw	r28, 0x01	; 1
     2b6:	81 f7       	brne	.-32     	; 0x298 <_Z14SendByteToPortPVhS0_hh+0x1c>
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>:
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	db 01       	movw	r26, r22
     2e4:	f8 94       	cli
     2e6:	ee 20       	and	r14, r14
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x22>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xc2>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	02 2e       	mov	r0, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2e>
     2f4:	66 0f       	add	r22, r22
     2f6:	77 1f       	adc	r23, r23
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x2a>
     2fc:	a6 2e       	mov	r10, r22
     2fe:	b6 2e       	mov	r11, r22
     300:	b0 94       	com	r11
     302:	68 01       	movw	r12, r16
     304:	0e 0d       	add	r16, r14
     306:	11 1d       	adc	r17, r1
     308:	e7 e0       	ldi	r30, 0x07	; 7
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	7f 01       	movw	r14, r30
     30e:	e2 1a       	sub	r14, r18
     310:	f1 08       	sbc	r15, r1
     312:	46 01       	movw	r8, r12
     314:	e6 01       	movw	r28, r12
     316:	18 82       	st	Y, r1
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	2c 91       	ld	r18, X
     31e:	2a 29       	or	r18, r10
     320:	2c 93       	st	X, r18
     322:	ec 01       	movw	r28, r24
     324:	28 81       	ld	r18, Y
     326:	2b 21       	and	r18, r11
     328:	28 83       	st	Y, r18
     32a:	d5 e0       	ldi	r29, 0x05	; 5
     32c:	da 95       	dec	r29
     32e:	f1 f7       	brne	.-4      	; 0x32c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x62>
     330:	00 00       	nop
     332:	2c 91       	ld	r18, X
     334:	2b 21       	and	r18, r11
     336:	2c 93       	st	X, r18
     338:	2a e2       	ldi	r18, 0x2A	; 42
     33a:	2a 95       	dec	r18
     33c:	f1 f7       	brne	.-4      	; 0x33a <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x70>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x76>
     340:	ea 01       	movw	r28, r20
     342:	28 81       	ld	r18, Y
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	26 23       	and	r18, r22
     348:	37 23       	and	r19, r23
     34a:	0e 2c       	mov	r0, r14
     34c:	02 c0       	rjmp	.+4      	; 0x352 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x88>
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	0a 94       	dec	r0
     354:	e2 f7       	brpl	.-8      	; 0x34e <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x84>
     356:	e4 01       	movw	r28, r8
     358:	38 81       	ld	r19, Y
     35a:	23 2b       	or	r18, r19
     35c:	e7 30       	cpi	r30, 0x07	; 7
     35e:	f1 05       	cpc	r31, r1
     360:	14 f0       	brlt	.+4      	; 0x366 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x9c>
     362:	28 83       	st	Y, r18
     364:	05 c0       	rjmp	.+10     	; 0x370 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa6>
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	35 95       	asr	r19
     36a:	27 95       	ror	r18
     36c:	e4 01       	movw	r28, r8
     36e:	28 83       	st	Y, r18
     370:	d5 e7       	ldi	r29, 0x75	; 117
     372:	da 95       	dec	r29
     374:	f1 f7       	brne	.-4      	; 0x372 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0xa8>
     376:	00 00       	nop
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	e8 30       	cpi	r30, 0x08	; 8
     37c:	f1 05       	cpc	r31, r1
     37e:	71 f6       	brne	.-100    	; 0x31c <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x52>
     380:	ef ef       	ldi	r30, 0xFF	; 255
     382:	ce 1a       	sub	r12, r30
     384:	de 0a       	sbc	r13, r30
     386:	0c 15       	cp	r16, r12
     388:	1d 05       	cpc	r17, r13
     38a:	19 f6       	brne	.-122    	; 0x312 <_Z17ReadBytesFromPortPVhS0_S0_hPhh+0x48>
     38c:	78 94       	sei
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	08 95       	ret

000003a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>:
		
	}
	*/
	
	void ReadTemperature_StartConvert(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin)
	{
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
     3b4:	8b 01       	movw	r16, r22
     3b6:	f2 2e       	mov	r15, r18
		reset(port,ddr,pin);
     3b8:	42 2f       	mov	r20, r18
     3ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     3be:	2c ec       	ldi	r18, 0xCC	; 204
     3c0:	4f 2d       	mov	r20, r15
     3c2:	b8 01       	movw	r22, r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>

		SendByteToPort(port,ddr,pin,0x44);//start convert
     3ca:	24 e4       	ldi	r18, 0x44	; 68
     3cc:	4f 2d       	mov	r20, r15
     3ce:	b8 01       	movw	r22, r16
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
	}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>:


void ReadTemperatureArr(volatile uint8_t *port,volatile uint8_t *ddr,volatile uint8_t *port_pin,uint8_t pin,uint8_t* temperature)
	{
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
     3f8:	6b 01       	movw	r12, r22
     3fa:	5a 01       	movw	r10, r20
     3fc:	f2 2e       	mov	r15, r18
		
		//uint8_t temperature [9];
		//uint8_t temperature_byte;
	//	uint8_t temperature_byte_l;
	//	uint8_t temperature_sign=0;
		reset(port,ddr,pin);
     3fe:	42 2f       	mov	r20, r18
     400:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z5resetPVhS0_h>
		SendByteToPort(port,ddr,pin,0xCC);//select all devices
     404:	2c ec       	ldi	r18, 0xCC	; 204
     406:	4f 2d       	mov	r20, r15
     408:	b6 01       	movw	r22, r12
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		SendByteToPort(port,ddr,pin,0xbe);//read memory
     410:	2e eb       	ldi	r18, 0xBE	; 190
     412:	4f 2d       	mov	r20, r15
     414:	b6 01       	movw	r22, r12
     416:	ce 01       	movw	r24, r28
     418:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14SendByteToPortPVhS0_hh>
		ReadBytesFromPort(port,ddr,port_pin,pin,temperature,9);
     41c:	0f 2e       	mov	r0, r31
     41e:	f9 e0       	ldi	r31, 0x09	; 9
     420:	ef 2e       	mov	r14, r31
     422:	f0 2d       	mov	r31, r0
     424:	2f 2d       	mov	r18, r15
     426:	a5 01       	movw	r20, r10
     428:	b6 01       	movw	r22, r12
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17ReadBytesFromPortPVhS0_S0_hPhh>
		else if (temperature_byte/100) temperature_to_dispay[3]=1;
		else temperature_to_dispay[3]=0;*/
		
		
		//return temperature;
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	bf 90       	pop	r11
     442:	af 90       	pop	r10
     444:	08 95       	ret

00000446 <__vector_21>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
		AdcClass::Data = ADC;
     454:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     458:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     45c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     460:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN8AdcClass4DataE>
		AdcClass::DataReady = true;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZN8AdcClass9DataReadyE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	8a e1       	ldi	r24, 0x1A	; 26
     46c:	8a 95       	dec	r24
     46e:	f1 f7       	brne	.-4      	; 0x46c <__vector_21+0x26>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__vector_21+0x2c>
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_16>:
		}

    }
}

ISR(TIMER0_OVF_vect){
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	af 93       	push	r26
     49c:	bf 93       	push	r27
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
	static uint8_t iov=0;
	static uint8_t opacityDelay = 0;
	
	if (opacityDelay == MAXGRADES) {	
     4a2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ11__vector_16E12opacityDelay>
     4a6:	8f 30       	cpi	r24, 0x0F	; 15
     4a8:	09 f5       	brne	.+66     	; 0x4ec <__vector_16+0x6c>
		ClrScr();	
     4aa:	0e 94 16 0b 	call	0x162c	; 0x162c <_Z6ClrScrv>
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
     4ae:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <screen_arr+0x4>
     4b2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ11__vector_16E3iov>
     4b6:	e9 2f       	mov	r30, r25
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	ea 5e       	subi	r30, 0xEA	; 234
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	29 13       	cpse	r18, r25
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	0e 94 2f 0b 	call	0x165e	; 0x165e <_Z11Display7seghb>
		NextDigit(4-iov);
     4ca:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZZ11__vector_16E3iov>
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	89 1b       	sub	r24, r25
     4d2:	0e 94 8f 0b 	call	0x171e	; 0x171e <_Z9NextDigith>
		iov += 1;
     4d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZ11__vector_16E3iov>
     4da:	8f 5f       	subi	r24, 0xFF	; 255
		if(iov > 3) iov=0;
     4dc:	84 30       	cpi	r24, 0x04	; 4
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <__vector_16+0x66>
	
	if (opacityDelay == MAXGRADES) {	
		ClrScr();	
		Display7seg(screen_arr[iov],iov == screen_arr[4]);
		NextDigit(4-iov);
		iov += 1;
     4e0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZ11__vector_16E3iov>
     4e4:	11 c0       	rjmp	.+34     	; 0x508 <__vector_16+0x88>
		if(iov > 3) iov=0;
     4e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_ZZ11__vector_16E3iov>
     4ea:	0e c0       	rjmp	.+28     	; 0x508 <__vector_16+0x88>
	} 
	else if(opacityDelay == (MAXGRADES - opacity)) {
     4ec:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <opacity>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2f e0       	ldi	r18, 0x0F	; 15
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	24 1b       	sub	r18, r20
     4f8:	31 09       	sbc	r19, r1
     4fa:	47 fd       	sbrc	r20, 7
     4fc:	33 95       	inc	r19
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	11 f4       	brne	.+4      	; 0x508 <__vector_16+0x88>
		ClrScr();
     504:	0e 94 16 0b 	call	0x162c	; 0x162c <_Z6ClrScrv>
	}
	opacityDelay = opacityDelay < MAXGRADES ? opacityDelay + 1 : 0;
     508:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_ZZ11__vector_16E12opacityDelay>
     50c:	8f 30       	cpi	r24, 0x0F	; 15
     50e:	10 f4       	brcc	.+4      	; 0x514 <__vector_16+0x94>
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <__vector_16+0x96>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_ZZ11__vector_16E12opacityDelay>
	
}
     51a:	ff 91       	pop	r31
     51c:	ef 91       	pop	r30
     51e:	bf 91       	pop	r27
     520:	af 91       	pop	r26
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	7f 91       	pop	r23
     528:	6f 91       	pop	r22
     52a:	5f 91       	pop	r21
     52c:	4f 91       	pop	r20
     52e:	3f 91       	pop	r19
     530:	2f 91       	pop	r18
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <_Z21EnableTimer0Interruptv>:
volatile void EnableTimer0Interrupt() {
	
	TIMSK0|=1<<TOIE0;
     53c:	ee e6       	ldi	r30, 0x6E	; 110
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	81 60       	ori	r24, 0x01	; 1
     544:	80 83       	st	Z, r24
	TCCR0B = 1;//Prescaler
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	85 bd       	out	0x25, r24	; 37
     54a:	08 95       	ret

0000054c <_Z10resetTimerv>:
}

void resetTimer() {
	screen_arr[4] = 2; // DP position
     54c:	e6 e1       	ldi	r30, 0x16	; 22
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = 0;
     554:	13 82       	std	Z+3, r1	; 0x03
	screen_arr[2] = 0;
     556:	12 82       	std	Z+2, r1	; 0x02
	screen_arr[1] = 0;
     558:	11 82       	std	Z+1, r1	; 0x01
	screen_arr[0] = 0;
     55a:	10 82       	st	Z, r1
     55c:	08 95       	ret

0000055e <_Z6buzzerb>:
}

void buzzer(bool on) {
	if(on) {
     55e:	88 23       	and	r24, r24
     560:	19 f0       	breq	.+6      	; 0x568 <_Z6buzzerb+0xa>
		DDRB |= 1 << PORTB6;
     562:	26 9a       	sbi	0x04, 6	; 4
		PORTB &= ~(1 << PORTB6);
     564:	2e 98       	cbi	0x05, 6	; 5
     566:	08 95       	ret
	} else {
		PORTB |= 1 << PORTB6;
     568:	2e 9a       	sbi	0x05, 6	; 5
     56a:	08 95       	ret

0000056c <_Z10doubleBeepv>:
	}
}

void doubleBeep() {
	buzzer(true);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     572:	2f e7       	ldi	r18, 0x7F	; 127
     574:	88 e3       	ldi	r24, 0x38	; 56
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <_Z10doubleBeepv+0xc>
     580:	00 c0       	rjmp	.+0      	; 0x582 <_Z10doubleBeepv+0x16>
     582:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     58a:	2f e7       	ldi	r18, 0x7F	; 127
     58c:	88 e3       	ldi	r24, 0x38	; 56
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <_Z10doubleBeepv+0x24>
     598:	00 c0       	rjmp	.+0      	; 0x59a <_Z10doubleBeepv+0x2e>
     59a:	00 00       	nop
	_delay_ms(50);
	buzzer(true);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5a2:	2f e7       	ldi	r18, 0x7F	; 127
     5a4:	88 e3       	ldi	r24, 0x38	; 56
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	80 40       	sbci	r24, 0x00	; 0
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <_Z10doubleBeepv+0x3c>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <_Z10doubleBeepv+0x46>
     5b2:	00 00       	nop
	_delay_ms(50);
	buzzer(false);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5ba:	08 95       	ret

000005bc <_Z8longBeepv>:
}

void longBeep() {
	buzzer(true);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5c2:	2f ef       	ldi	r18, 0xFF	; 255
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	9c e0       	ldi	r25, 0x0C	; 12
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <_Z8longBeepv+0xc>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_Z8longBeepv+0x16>
     5d2:	00 00       	nop
	_delay_ms(500);
	buzzer(false);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5da:	08 95       	ret

000005dc <_Z10singleBeepv>:
}

void singleBeep() {
	buzzer(true);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5e2:	2f ef       	ldi	r18, 0xFF	; 255
     5e4:	80 e7       	ldi	r24, 0x70	; 112
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	21 50       	subi	r18, 0x01	; 1
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <_Z10singleBeepv+0xc>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_Z10singleBeepv+0x16>
     5f2:	00 00       	nop
	_delay_ms(100);
	buzzer(false);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     5fa:	08 95       	ret

000005fc <_Z14displaySecondsj>:

}


void displaySeconds(uint16_t secondsTotal)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ac 01       	movw	r20, r24
	screen_arr[0] = secondsTotal % 10;
     602:	9c 01       	movw	r18, r24
     604:	ad ec       	ldi	r26, 0xCD	; 205
     606:	bc ec       	ldi	r27, 0xCC	; 204
     608:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	9c 01       	movw	r18, r24
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	9a 01       	movw	r18, r20
     630:	28 1b       	sub	r18, r24
     632:	39 0b       	sbc	r19, r25
     634:	c6 e1       	ldi	r28, 0x16	; 22
     636:	d1 e0       	ldi	r29, 0x01	; 1
     638:	28 83       	st	Y, r18
	screen_arr[1] = secondsTotal % 60 / 10;
     63a:	9a 01       	movw	r18, r20
     63c:	a9 e8       	ldi	r26, 0x89	; 137
     63e:	b8 e8       	ldi	r27, 0x88	; 136
     640:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     644:	fc 01       	movw	r30, r24
     646:	f6 95       	lsr	r31
     648:	e7 95       	ror	r30
     64a:	f2 95       	swap	r31
     64c:	e2 95       	swap	r30
     64e:	ef 70       	andi	r30, 0x0F	; 15
     650:	ef 27       	eor	r30, r31
     652:	ff 70       	andi	r31, 0x0F	; 15
     654:	ef 27       	eor	r30, r31
     656:	2c e3       	ldi	r18, 0x3C	; 60
     658:	2e 9f       	mul	r18, r30
     65a:	c0 01       	movw	r24, r0
     65c:	2f 9f       	mul	r18, r31
     65e:	90 0d       	add	r25, r0
     660:	11 24       	eor	r1, r1
     662:	9a 01       	movw	r18, r20
     664:	28 1b       	sub	r18, r24
     666:	39 0b       	sbc	r19, r25
     668:	ad ec       	ldi	r26, 0xCD	; 205
     66a:	bc ec       	ldi	r27, 0xCC	; 204
     66c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	96 95       	lsr	r25
     67a:	87 95       	ror	r24
     67c:	89 83       	std	Y+1, r24	; 0x01
	screen_arr[2] = secondsTotal / 60 % 10;
     67e:	9f 01       	movw	r18, r30
     680:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	e8 1b       	sub	r30, r24
     6a8:	f9 0b       	sbc	r31, r25
     6aa:	ea 83       	std	Y+2, r30	; 0x02
	screen_arr[3] = secondsTotal / 60 / 10;
     6ac:	9a 01       	movw	r18, r20
     6ae:	36 95       	lsr	r19
     6b0:	27 95       	ror	r18
     6b2:	36 95       	lsr	r19
     6b4:	27 95       	ror	r18
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	af e4       	ldi	r26, 0x4F	; 79
     6bc:	bb e1       	ldi	r27, 0x1B	; 27
     6be:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	96 95       	lsr	r25
     6cc:	87 95       	ror	r24
     6ce:	8b 83       	std	Y+3, r24	; 0x03
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_Z10keyCheckerv>:
*PORTD3 MODE
*PORTD4 SETUP
*/	static uint8_t keyStatePrevious = 0;
	static uint16_t times = 0;
	static uint8_t savedKeyState = 0;
	uint8_t keyState = PIND;
     6d6:	89 b1       	in	r24, 0x09	; 9
	 keyState = (~keyState >> 3) & 3;
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	80 95       	com	r24
     6dc:	90 95       	com	r25
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	93 70       	andi	r25, 0x03	; 3
	
	if (keyState == keyStatePrevious && keyState) {
     6ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZZ10keyCheckervE16keyStatePrevious>
     6f2:	98 13       	cpse	r25, r24
     6f4:	2b c0       	rjmp	.+86     	; 0x74c <_Z10keyCheckerv+0x76>
     6f6:	99 23       	and	r25, r25
     6f8:	49 f1       	breq	.+82     	; 0x74c <_Z10keyCheckerv+0x76>
		if (times < 1500) {
     6fa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZZ10keyCheckervE5times>
     6fe:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <_ZZ10keyCheckervE5times+0x1>
     702:	2c 3d       	cpi	r18, 0xDC	; 220
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	38 07       	cpc	r19, r24
     708:	60 f4       	brcc	.+24     	; 0x722 <_Z10keyCheckerv+0x4c>
			times += 1;
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <_ZZ10keyCheckervE5times+0x1>
     712:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <_ZZ10keyCheckervE5times>
     716:	ef ec       	ldi	r30, 0xCF	; 207
     718:	f7 e0       	ldi	r31, 0x07	; 7
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <_Z10keyCheckerv+0x44>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <_Z10keyCheckerv+0x4a>
     720:	00 00       	nop
			_delay_ms(1);
		}
		if (times == 10) {
     722:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <_ZZ10keyCheckervE5times>
     726:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <_ZZ10keyCheckervE5times+0x1>
     72a:	2a 30       	cpi	r18, 0x0A	; 10
     72c:	31 05       	cpc	r19, r1
     72e:	21 f4       	brne	.+8      	; 0x738 <_Z10keyCheckerv+0x62>
			savedKeyState = keyState;
     730:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_end>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	08 95       	ret
			_delay_ms(1);
		}
		if (times == 10) {
			savedKeyState = keyState;
		}
		if (times == 1000) {
     738:	28 3e       	cpi	r18, 0xE8	; 232
     73a:	33 40       	sbci	r19, 0x03	; 3
     73c:	a9 f4       	brne	.+42     	; 0x768 <_Z10keyCheckerv+0x92>
			longBeep();
     73e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
			savedKeyState  = 3;
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	else {
		keyStatePrevious = keyState;
		times = 0;
	}

	return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret
		}
		if (times == 1000) {
			longBeep();
			savedKeyState  = 3;
		}
	} else if(savedKeyState) {
     74c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     750:	88 23       	and	r24, r24
     752:	19 f0       	breq	.+6      	; 0x75a <_Z10keyCheckerv+0x84>
		uint8_t tempKeyState = savedKeyState;
		savedKeyState  = 0;
     754:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>

		return tempKeyState;
     758:	08 95       	ret
	}
	else {
		keyStatePrevious = keyState;
     75a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ10keyCheckervE16keyStatePrevious>
		times = 0;
     75e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_ZZ10keyCheckervE5times+0x1>
     762:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_ZZ10keyCheckervE5times>
     766:	08 95       	ret
	}

	return 0;
     768:	80 e0       	ldi	r24, 0x00	; 0
}
     76a:	08 95       	ret

0000076c <_Z10setupTimerv>:
	buzzer(false);
}

uint8_t setupTimer () {
	while(true) {
		displaySeconds(alarmTime);
     76c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     770:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     774:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
		uint8_t key = keyChecker();
     778:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     77c:	88 23       	and	r24, r24
     77e:	b1 f3       	breq	.-20     	; 0x76c <_Z10setupTimerv>
			if (key == 1) {
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	61 f4       	brne	.+24     	; 0x79c <_Z10setupTimerv+0x30>
				// short press button 1
				alarmTime += 1;
     784:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     788:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmTime+0x1>
     792:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     796:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     79a:	e8 cf       	rjmp	.-48     	; 0x76c <_Z10setupTimerv>
			}
		
			if (key == 2 ) {
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	61 f4       	brne	.+24     	; 0x7b8 <_Z10setupTimerv+0x4c>
				// short press button 2
				alarmTime -= 1;
     7a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     7a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmTime+0x1>
     7ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTime>
				singleBeep();
     7b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
     7b6:	da cf       	rjmp	.-76     	; 0x76c <_Z10setupTimerv>
			}
		
			if (key == 3) {
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	c1 f6       	brne	.-80     	; 0x76c <_Z10setupTimerv>
			}

		}
	}

}
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	08 95       	ret

000007c0 <_Z9timerModev>:
	screen_arr[1] = secondsTotal % 60 / 10;
	screen_arr[2] = secondsTotal / 60 % 10;
	screen_arr[3] = secondsTotal / 60 / 10;
}

uint8_t timerMode () {
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	63 97       	sbiw	r28, 0x13	; 19
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
	resetTimer();
     7e2:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
	doubleBeep();
     7e6:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
	bool buzzering = false;
     7ea:	c1 2c       	mov	r12, r1
uint8_t timerMode () {
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
	bool conunerEnabled = false;
     7ec:	d1 2c       	mov	r13, r1

uint8_t timerMode () {
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
	uint16_t secondsTotal = 0;
     7ee:	00 e0       	ldi	r16, 0x00	; 0
     7f0:	10 e0       	ldi	r17, 0x00	; 0
}

uint8_t timerMode () {
	uint8_t timeArr[0x13];
	uint8_t currentSeconds = 0;
	uint8_t lastSeconds = 0;
     7f2:	e1 2c       	mov	r14, r1
     7f4:	bb 24       	eor	r11, r11
     7f6:	b3 94       	inc	r11
	bool buzzering = false;
	resetTimer();
	doubleBeep();
	
	while(true) {
		readTime(timeArr);
     7f8:	ce 01       	movw	r24, r28
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z8readTimePh>
		currentSeconds = timeArr[0];
     800:	f9 80       	ldd	r15, Y+1	; 0x01
		
		if (conunerEnabled && currentSeconds != lastSeconds) {
     802:	dd 20       	and	r13, r13
     804:	09 f4       	brne	.+2      	; 0x808 <_Z9timerModev+0x48>
     806:	65 c0       	rjmp	.+202    	; 0x8d2 <_Z9timerModev+0x112>
     808:	ef 14       	cp	r14, r15
     80a:	09 f4       	brne	.+2      	; 0x80e <_Z9timerModev+0x4e>
     80c:	56 c0       	rjmp	.+172    	; 0x8ba <_Z9timerModev+0xfa>
			secondsTotal += 1;
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	53 c0       	rjmp	.+166    	; 0x8ba <_Z9timerModev+0xfa>

		
		if (conunerEnabled) {
			if (secondsTotal == alarmTime) {
				buzzering = true;
				buzzer(true);
     814:	8b 2d       	mov	r24, r11
     816:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     81a:	02 c0       	rjmp	.+4      	; 0x820 <_Z9timerModev+0x60>
			}
			if (buzzering && secondsTotal <= alarmTime + 4 && secondsTotal > alarmTime) {
     81c:	cc 20       	and	r12, r12
     81e:	31 f1       	breq	.+76     	; 0x86c <_Z9timerModev+0xac>
     820:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     824:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     828:	9c 01       	movw	r18, r24
     82a:	2c 5f       	subi	r18, 0xFC	; 252
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	20 17       	cp	r18, r16
     830:	31 07       	cpc	r19, r17
     832:	a0 f0       	brcs	.+40     	; 0x85c <_Z9timerModev+0x9c>
     834:	80 17       	cp	r24, r16
     836:	91 07       	cpc	r25, r17
     838:	b0 f4       	brcc	.+44     	; 0x866 <_Z9timerModev+0xa6>
				buzzer((secondsTotal - alarmTime) % 2 - 1);
     83a:	98 01       	movw	r18, r16
     83c:	28 1b       	sub	r18, r24
     83e:	39 0b       	sbc	r19, r25
     840:	c9 01       	movw	r24, r18
     842:	31 e0       	ldi	r19, 0x01	; 1
     844:	83 27       	eor	r24, r19
     846:	81 70       	andi	r24, 0x01	; 1
     848:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
			}
			
			if (buzzering && secondsTotal > alarmTime + 4) {
     84c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     850:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     854:	04 96       	adiw	r24, 0x04	; 4
     856:	80 17       	cp	r24, r16
     858:	91 07       	cpc	r25, r17
     85a:	38 f4       	brcc	.+14     	; 0x86a <_Z9timerModev+0xaa>
				buzzer(false);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z6buzzerb>
     862:	cb 2c       	mov	r12, r11
     864:	03 c0       	rjmp	.+6      	; 0x86c <_Z9timerModev+0xac>
     866:	cb 2c       	mov	r12, r11
     868:	01 c0       	rjmp	.+2      	; 0x86c <_Z9timerModev+0xac>
     86a:	cb 2c       	mov	r12, r11
			}
		}
		
		if (secondsTotal > 15 * 60) {
     86c:	05 38       	cpi	r16, 0x85	; 133
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	18 07       	cpc	r17, r24
     872:	98 f5       	brcc	.+102    	; 0x8da <_Z9timerModev+0x11a>
			return 0;
		}
		
		uint8_t key = keyChecker();
     874:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		
		if(key) {
     878:	88 23       	and	r24, r24
     87a:	b9 f0       	breq	.+46     	; 0x8aa <_Z9timerModev+0xea>
			if (key == 1) {
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	29 f4       	brne	.+10     	; 0x88a <_Z9timerModev+0xca>
				// short press button 1
				singleBeep();
     880:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z10singleBeepv>
				buzzering = false;
     884:	c1 2c       	mov	r12, r1
				conunerEnabled = true;
     886:	db 2c       	mov	r13, r11
     888:	10 c0       	rjmp	.+32     	; 0x8aa <_Z9timerModev+0xea>
			}
			
			if (key == 2 ) {
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	49 f4       	brne	.+18     	; 0x8a0 <_Z9timerModev+0xe0>
				// short press button 2
				doubleBeep();
     88e:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z10doubleBeepv>
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
     892:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10resetTimerv>
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
				buzzering = false;
     896:	c1 2c       	mov	r12, r1
			
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
				conunerEnabled = false;
     898:	d1 2c       	mov	r13, r1
			}
			
			if (key == 2 ) {
				// short press button 2
				doubleBeep();
				secondsTotal = 0;
     89a:	00 e0       	ldi	r16, 0x00	; 0
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <_Z9timerModev+0xea>
				conunerEnabled = false;
				buzzering = false;
				resetTimer();
			}
			
			if (key == 3) {
     8a0:	83 30       	cpi	r24, 0x03	; 3
     8a2:	19 f4       	brne	.+6      	; 0x8aa <_Z9timerModev+0xea>
				// long press button 2
				longBeep();
     8a4:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z8longBeepv>
				return 0;
     8a8:	18 c0       	rjmp	.+48     	; 0x8da <_Z9timerModev+0x11a>
     8aa:	8f ec       	ldi	r24, 0xCF	; 207
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <_Z9timerModev+0xee>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <_Z9timerModev+0xf4>
     8b4:	00 00       	nop
		
		if (conunerEnabled && currentSeconds != lastSeconds) {
			secondsTotal += 1;
		}
		
		lastSeconds = currentSeconds;
     8b6:	ef 2c       	mov	r14, r15
     8b8:	9f cf       	rjmp	.-194    	; 0x7f8 <_Z9timerModev+0x38>
		
		displaySeconds(secondsTotal);
     8ba:	c8 01       	movw	r24, r16
     8bc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>

		
		if (conunerEnabled) {
			if (secondsTotal == alarmTime) {
     8c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTime>
     8c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTime+0x1>
     8c8:	80 17       	cp	r24, r16
     8ca:	91 07       	cpc	r25, r17
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <_Z9timerModev+0x110>
     8ce:	a6 cf       	rjmp	.-180    	; 0x81c <_Z9timerModev+0x5c>
     8d0:	a1 cf       	rjmp	.-190    	; 0x814 <_Z9timerModev+0x54>
			secondsTotal += 1;
		}
		
		lastSeconds = currentSeconds;
		
		displaySeconds(secondsTotal);
     8d2:	c8 01       	movw	r24, r16
     8d4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_Z14displaySecondsj>
     8d8:	c9 cf       	rjmp	.-110    	; 0x86c <_Z9timerModev+0xac>

		}
		
		_delay_ms(1);
	}
}
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	63 96       	adiw	r28, 0x13	; 19
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	08 95       	ret

000008fc <_Z6dsModev>:
		if(opacity < 0) opacity = 0;
	}
	
}

uint8_t dsMode() {
     8fc:	3f 92       	push	r3
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	29 97       	sbiw	r28, 0x09	; 9
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
	int16_t temper = 0;
	uint8_t temperatureArr[9];

	screen_arr[4] = 1;
     92e:	e6 e1       	ldi	r30, 0x16	; 22
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	84 83       	std	Z+4, r24	; 0x04
	screen_arr[3] = '-';
     936:	8d e2       	ldi	r24, 0x2D	; 45
     938:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[2] = '-';
     93a:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[1] = '-';
     93c:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[0] = '-';
     93e:	80 83       	st	Z, r24
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
     940:	51 2c       	mov	r5, r1
	screen_arr[4] = 1;
	screen_arr[3] = '-';
	screen_arr[2] = '-';
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
     942:	e1 2c       	mov	r14, r1
     944:	f1 2c       	mov	r15, r1
			else {
				screen_arr[3] = -1;
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     946:	6f 01       	movw	r12, r30
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
     948:	0f 2e       	mov	r0, r31
     94a:	fa e0       	ldi	r31, 0x0A	; 10
     94c:	af 2e       	mov	r10, r31
     94e:	b1 2c       	mov	r11, r1
     950:	f0 2d       	mov	r31, r0
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
				temper %= 100;
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     952:	44 24       	eor	r4, r4
     954:	4a 94       	dec	r4
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
					
			temper>>=4;
			if(temper >= 100) {
				screen_arr[3] = temper/100;
     956:	0f 2e       	mov	r0, r31
     958:	f4 e6       	ldi	r31, 0x64	; 100
     95a:	8f 2e       	mov	r8, r31
     95c:	91 2c       	mov	r9, r1
     95e:	f0 2d       	mov	r31, r0
			temper <<= 8;
			temper |= temperatureArr[0];
					
					
			if(temper < 0) {
				screen_arr[3] = '-';
     960:	0f 2e       	mov	r0, r31
     962:	fd e2       	ldi	r31, 0x2D	; 45
     964:	3f 2e       	mov	r3, r31
     966:	f0 2d       	mov	r31, r0
				temper *= -1;
				temper += 1;
     968:	66 24       	eor	r6, r6
     96a:	63 94       	inc	r6
     96c:	71 2c       	mov	r7, r1
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
		}
		_delay_ms(1);
		if(inner_counter <=1000)
		inner_counter +=1;
		else {
			inner_counter =0;
     970:	e1 2c       	mov	r14, r1
     972:	f1 2c       	mov	r15, r1
	screen_arr[1] = '-';
	screen_arr[0] = '-';
	uint16_t inner_counter = 0;
	uint8_t exit_counter = 0;
	while(true){
		if(inner_counter == 0)
     974:	e1 14       	cp	r14, r1
     976:	f1 04       	cpc	r15, r1
     978:	79 f4       	brne	.+30     	; 0x998 <__stack+0x99>
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
     97a:	22 e0       	ldi	r18, 0x02	; 2
     97c:	49 e2       	ldi	r20, 0x29	; 41
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	6a e2       	ldi	r22, 0x2A	; 42
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	8b e2       	ldi	r24, 0x2B	; 43
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z28ReadTemperature_StartConvertPVhS0_S0_h>
			sei();
     98c:	78 94       	sei
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     98e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     992:	81 11       	cpse	r24, r1
     994:	68 c0       	rjmp	.+208    	; 0xa66 <__stack+0x167>
     996:	8c c0       	rjmp	.+280    	; 0xab0 <__stack+0x1b1>
		if(inner_counter == 0)
		{
			ReadTemperature_StartConvert(&PORTD,&DDRD,&PIND,PORTD2);
			sei();
		}
		if(inner_counter == 1000)
     998:	88 ee       	ldi	r24, 0xE8	; 232
     99a:	e8 16       	cp	r14, r24
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	f8 06       	cpc	r15, r24
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	5d c0       	rjmp	.+186    	; 0xa5e <__stack+0x15f>
		{
			ReadTemperatureArr(&PORTD,&DDRD,&PIND,PIND2,temperatureArr);
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	49 e2       	ldi	r20, 0x29	; 41
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	6a e2       	ldi	r22, 0x2A	; 42
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	8b e2       	ldi	r24, 0x2B	; 43
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z18ReadTemperatureArrPVhS0_S0_hPh>
			temper = temperatureArr[1];
     9bc:	2a 81       	ldd	r18, Y+2	; 0x02
     9be:	30 e0       	ldi	r19, 0x00	; 0
			temper <<= 8;
     9c0:	32 2f       	mov	r19, r18
     9c2:	22 27       	eor	r18, r18
			temper |= temperatureArr[0];
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	28 2b       	or	r18, r24
					
					
			if(temper < 0) {
     9c8:	33 23       	and	r19, r19
     9ca:	3c f4       	brge	.+14     	; 0x9da <__stack+0xdb>
				screen_arr[3] = '-';
     9cc:	f6 01       	movw	r30, r12
     9ce:	33 82       	std	Z+3, r3	; 0x03
				temper *= -1;
				temper += 1;
     9d0:	c3 01       	movw	r24, r6
     9d2:	82 1b       	sub	r24, r18
     9d4:	93 0b       	sbc	r25, r19
     9d6:	9c 01       	movw	r18, r24
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
			}
			else {
				screen_arr[3] = -1;
     9da:	f6 01       	movw	r30, r12
     9dc:	43 82       	std	Z+3, r4	; 0x03
			}
					
					
			screen_arr[0] = ((temper & 0x0F)*10)/16;
     9de:	c9 01       	movw	r24, r18
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	99 27       	eor	r25, r25
     9e4:	ac 01       	movw	r20, r24
     9e6:	44 0f       	add	r20, r20
     9e8:	55 1f       	adc	r21, r21
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	84 0f       	add	r24, r20
     9f8:	95 1f       	adc	r25, r21
     9fa:	95 95       	asr	r25
     9fc:	87 95       	ror	r24
     9fe:	95 95       	asr	r25
     a00:	87 95       	ror	r24
     a02:	95 95       	asr	r25
     a04:	87 95       	ror	r24
     a06:	95 95       	asr	r25
     a08:	87 95       	ror	r24
     a0a:	f6 01       	movw	r30, r12
     a0c:	80 83       	st	Z, r24
					
			temper>>=4;
     a0e:	35 95       	asr	r19
     a10:	27 95       	ror	r18
     a12:	35 95       	asr	r19
     a14:	27 95       	ror	r18
     a16:	35 95       	asr	r19
     a18:	27 95       	ror	r18
     a1a:	35 95       	asr	r19
     a1c:	27 95       	ror	r18
			if(temper >= 100) {
     a1e:	24 36       	cpi	r18, 0x64	; 100
     a20:	31 05       	cpc	r19, r1
     a22:	3c f0       	brlt	.+14     	; 0xa32 <__stack+0x133>
				screen_arr[3] = temper/100;
     a24:	c9 01       	movw	r24, r18
     a26:	b4 01       	movw	r22, r8
     a28:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__divmodhi4>
     a2c:	63 83       	std	Z+3, r22	; 0x03
				temper %= 100;
     a2e:	28 2f       	mov	r18, r24
     a30:	39 2f       	mov	r19, r25
			}
			screen_arr[2] = (temper/10)?(temper/10):-1;
     a32:	c9 01       	movw	r24, r18
     a34:	09 96       	adiw	r24, 0x09	; 9
     a36:	43 97       	sbiw	r24, 0x13	; 19
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__stack+0x145>
     a3a:	c9 01       	movw	r24, r18
     a3c:	b5 01       	movw	r22, r10
     a3e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__divmodhi4>
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <__stack+0x147>
     a44:	64 2d       	mov	r22, r4
     a46:	f6 01       	movw	r30, r12
     a48:	62 83       	std	Z+2, r22	; 0x02
			screen_arr[1] = temper%10;
     a4a:	c9 01       	movw	r24, r18
     a4c:	b5 01       	movw	r22, r10
     a4e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__divmodhi4>
     a52:	81 83       	std	Z+1, r24	; 0x01
		}


		uint8_t key = keyChecker();
     a54:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     a58:	81 11       	cpse	r24, r1
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__stack+0x167>
     a5c:	22 c0       	rjmp	.+68     	; 0xaa2 <__stack+0x1a3>
			screen_arr[2] = (temper/10)?(temper/10):-1;
			screen_arr[1] = temper%10;
		}


		uint8_t key = keyChecker();
     a5e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     a62:	88 23       	and	r24, r24
     a64:	21 f0       	breq	.+8      	; 0xa6e <__stack+0x16f>
			if (key == 1) return 2;
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	c1 f0       	breq	.+48     	; 0xa9a <__stack+0x19b>
			
			if (key == 2 ) {
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	c1 f0       	breq	.+48     	; 0xa9e <__stack+0x19f>
     a6e:	8f ec       	ldi	r24, 0xCF	; 207
     a70:	97 e0       	ldi	r25, 0x07	; 7
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <__stack+0x173>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <__stack+0x179>
     a78:	00 00       	nop
				return 5;
			}

		}
		_delay_ms(1);
		if(inner_counter <=1000)
     a7a:	99 ee       	ldi	r25, 0xE9	; 233
     a7c:	e9 16       	cp	r14, r25
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	f9 06       	cpc	r15, r25
     a82:	20 f4       	brcc	.+8      	; 0xa8c <__stack+0x18d>
		inner_counter +=1;
     a84:	ef ef       	ldi	r30, 0xFF	; 255
     a86:	ee 1a       	sub	r14, r30
     a88:	fe 0a       	sbc	r15, r30
     a8a:	74 cf       	rjmp	.-280    	; 0x974 <__stack+0x75>
		else {
			inner_counter =0;
			exit_counter +=1;
     a8c:	53 94       	inc	r5
			if(exit_counter>7) return 0;
     a8e:	f7 e0       	ldi	r31, 0x07	; 7
     a90:	f5 15       	cp	r31, r5
     a92:	08 f0       	brcs	.+2      	; 0xa96 <__stack+0x197>
     a94:	6d cf       	rjmp	.-294    	; 0x970 <__stack+0x71>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	12 c0       	rjmp	.+36     	; 0xabe <__stack+0x1bf>
		}


		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) return 2;
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	10 c0       	rjmp	.+32     	; 0xabe <__stack+0x1bf>
			
			if (key == 2 ) {
				// short press button 2
				return 5;
     a9e:	85 e0       	ldi	r24, 0x05	; 5
     aa0:	0e c0       	rjmp	.+28     	; 0xabe <__stack+0x1bf>
     aa2:	8f ec       	ldi	r24, 0xCF	; 207
     aa4:	97 e0       	ldi	r25, 0x07	; 7
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <__stack+0x1a7>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <__stack+0x1ad>
     aac:	00 00       	nop
     aae:	ea cf       	rjmp	.-44     	; 0xa84 <__stack+0x185>
     ab0:	ef ec       	ldi	r30, 0xCF	; 207
     ab2:	f7 e0       	ldi	r31, 0x07	; 7
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <__stack+0x1b5>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <__stack+0x1bb>
     aba:	00 00       	nop
     abc:	e3 cf       	rjmp	.-58     	; 0xa84 <__stack+0x185>
			inner_counter =0;
			exit_counter +=1;
			if(exit_counter>7) return 0;
		}
	}
}
     abe:	29 96       	adiw	r28, 0x09	; 9
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	4f 90       	pop	r4
     aea:	3f 90       	pop	r3
     aec:	08 95       	ret

00000aee <_Z7acbModev>:

uint8_t acbMode() {
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
		screen_arr[4] = 1;
     b10:	e6 e1       	ldi	r30, 0x16	; 22
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	84 83       	std	Z+4, r24	; 0x04
		screen_arr[3] = 'u';
     b18:	85 e7       	ldi	r24, 0x75	; 117
     b1a:	83 83       	std	Z+3, r24	; 0x03
		screen_arr[2] = -1;
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = -1;
     b20:	81 83       	std	Z+1, r24	; 0x01
		screen_arr[0] = -1;
     b22:	80 83       	st	Z, r24
		sei();
     b24:	78 94       	sei
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     b26:	ec e7       	ldi	r30, 0x7C	; 124
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	8f 70       	andi	r24, 0x0F	; 15
     b2e:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     b30:	80 81       	ld	r24, Z
     b32:	80 7f       	andi	r24, 0xF0	; 240
     b34:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     b36:	80 81       	ld	r24, Z
     b38:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     b3a:	ea e7       	ldi	r30, 0x7A	; 122
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	80 64       	ori	r24, 0x40	; 64
     b42:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     b44:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     b48:	88 23       	and	r24, r24
     b4a:	e1 f3       	breq	.-8      	; 0xb44 <_Z7acbModev+0x56>
		Voltage = CalculateVoltage(Data);
     b4c:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     b50:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
     b5c:	2a ea       	ldi	r18, 0xAA	; 170
     b5e:	31 ef       	ldi	r19, 0xF1	; 241
     b60:	44 e9       	ldi	r20, 0x94	; 148
     b62:	51 e4       	ldi	r21, 0x41	; 65
     b64:	0e 94 0f 0c 	call	0x181e	; 0x181e <__divsf3>
     b68:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adcOb+0x4>
     b6c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adcOb+0x5>
     b70:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adcOb+0x6>
     b74:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adcOb+0x7>
		DataReady = false;
     b78:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
     b7c:	8f e1       	ldi	r24, 0x1F	; 31
     b7e:	9e e4       	ldi	r25, 0x4E	; 78
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <_Z7acbModev+0x92>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <_Z7acbModev+0x98>
     b86:	00 00       	nop
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     b88:	ec e7       	ldi	r30, 0x7C	; 124
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 70       	andi	r24, 0x0F	; 15
     b90:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     b92:	80 81       	ld	r24, Z
     b94:	80 7f       	andi	r24, 0xF0	; 240
     b96:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     b98:	80 81       	ld	r24, Z
     b9a:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     b9c:	ea e7       	ldi	r30, 0x7A	; 122
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	80 64       	ori	r24, 0x40	; 64
     ba4:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     ba6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     baa:	88 23       	and	r24, r24
     bac:	e1 f3       	breq	.-8      	; 0xba6 <_Z7acbModev+0xb8>
		Voltage = CalculateVoltage(Data);
     bae:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     bb2:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
		return (double)Adc_num*22./(1023. - Adc_num);
	}
	double CalculateVoltage(uint16_t Adc_num)
	{
		//return ((double)Adc_num)/400*11.;
		return ((double)Adc_num/18.618);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
     bbe:	2a ea       	ldi	r18, 0xAA	; 170
     bc0:	31 ef       	ldi	r19, 0xF1	; 241
     bc2:	44 e9       	ldi	r20, 0x94	; 148
     bc4:	51 e4       	ldi	r21, 0x41	; 65
     bc6:	0e 94 0f 0c 	call	0x181e	; 0x181e <__divsf3>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     bce:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adcOb+0x4>
     bd2:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adcOb+0x5>
     bd6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adcOb+0x6>
     bda:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adcOb+0x7>
		DataReady = false;
     bde:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
		uint16_t exitCouter = 0;
		adcOb.MesureVoltage(PORTC0);
		_delay_ms(10);
		adcOb.MesureVoltage(PORTC0);
		screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     be2:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
     be6:	cd ec       	ldi	r28, 0xCD	; 205
     be8:	6c 9f       	mul	r22, r28
     bea:	81 2d       	mov	r24, r1
     bec:	11 24       	eor	r1, r1
     bee:	86 95       	lsr	r24
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	06 e1       	ldi	r16, 0x16	; 22
     bf6:	11 e0       	ldi	r17, 0x01	; 1
     bf8:	f8 01       	movw	r30, r16
     bfa:	82 83       	std	Z+2, r24	; 0x02
		screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     bfc:	88 0f       	add	r24, r24
     bfe:	98 2f       	mov	r25, r24
     c00:	99 0f       	add	r25, r25
     c02:	99 0f       	add	r25, r25
     c04:	89 0f       	add	r24, r25
     c06:	68 1b       	sub	r22, r24
     c08:	61 83       	std	Z+1, r22	; 0x01
		screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
     c1a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
     c1e:	6c 9f       	mul	r22, r28
     c20:	81 2d       	mov	r24, r1
     c22:	11 24       	eor	r1, r1
     c24:	86 95       	lsr	r24
     c26:	86 95       	lsr	r24
     c28:	86 95       	lsr	r24
     c2a:	88 0f       	add	r24, r24
     c2c:	98 2f       	mov	r25, r24
     c2e:	99 0f       	add	r25, r25
     c30:	99 0f       	add	r25, r25
     c32:	89 0f       	add	r24, r25
     c34:	68 1b       	sub	r22, r24
     c36:	f8 01       	movw	r30, r16
     c38:	60 83       	st	Z, r22
		screen_arr[3] = 'u';
		screen_arr[2] = -1;
		screen_arr[1] = -1;
		screen_arr[0] = -1;
		sei();
		uint16_t exitCouter = 0;
     c3a:	c0 e0       	ldi	r28, 0x00	; 0
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
			if(exitCouter % 1000 == 0) {
     c3e:	0f 2e       	mov	r0, r31
     c40:	f8 ee       	ldi	r31, 0xE8	; 232
     c42:	ef 2e       	mov	r14, r31
     c44:	f3 e0       	ldi	r31, 0x03	; 3
     c46:	ff 2e       	mov	r15, r31
     c48:	f0 2d       	mov	r31, r0
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     c4a:	0c e7       	ldi	r16, 0x7C	; 124
     c4c:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     c4e:	0f 2e       	mov	r0, r31
     c50:	fa e7       	ldi	r31, 0x7A	; 122
     c52:	af 2e       	mov	r10, r31
     c54:	b1 2c       	mov	r11, r1
     c56:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     c58:	0f 2e       	mov	r0, r31
     c5a:	fe e0       	ldi	r31, 0x0E	; 14
     c5c:	8f 2e       	mov	r8, r31
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	9f 2e       	mov	r9, r31
     c62:	f0 2d       	mov	r31, r0
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				_delay_ms(1);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     c64:	0f 2e       	mov	r0, r31
     c66:	fd ec       	ldi	r31, 0xCD	; 205
     c68:	3f 2e       	mov	r3, r31
     c6a:	f0 2d       	mov	r31, r0
     c6c:	6f 01       	movw	r12, r30
		while(true){
			
			


			uint8_t key = keyChecker();
     c6e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
			if(key) {
				if (key == 1) return 0;
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f4       	brne	.+2      	; 0xc78 <_Z7acbModev+0x18a>
     c76:	83 c0       	rjmp	.+262    	; 0xd7e <_Z7acbModev+0x290>
     c78:	8f ec       	ldi	r24, 0xCF	; 207
     c7a:	97 e0       	ldi	r25, 0x07	; 7
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <_Z7acbModev+0x18e>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <_Z7acbModev+0x194>
     c82:	00 00       	nop
				//if (key == 2) return 3;

			}
			_delay_ms(1);
			exitCouter += 1;
     c84:	21 96       	adiw	r28, 0x01	; 1
			if(exitCouter % 1000 == 0) {
     c86:	9e 01       	movw	r18, r28
     c88:	36 95       	lsr	r19
     c8a:	27 95       	ror	r18
     c8c:	36 95       	lsr	r19
     c8e:	27 95       	ror	r18
     c90:	36 95       	lsr	r19
     c92:	27 95       	ror	r18
     c94:	a5 ec       	ldi	r26, 0xC5	; 197
     c96:	b0 e2       	ldi	r27, 0x20	; 32
     c98:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__umulhisi3>
     c9c:	92 95       	swap	r25
     c9e:	82 95       	swap	r24
     ca0:	8f 70       	andi	r24, 0x0F	; 15
     ca2:	89 27       	eor	r24, r25
     ca4:	9f 70       	andi	r25, 0x0F	; 15
     ca6:	89 27       	eor	r24, r25
     ca8:	8e 9d       	mul	r24, r14
     caa:	90 01       	movw	r18, r0
     cac:	8f 9d       	mul	r24, r15
     cae:	30 0d       	add	r19, r0
     cb0:	9e 9d       	mul	r25, r14
     cb2:	30 0d       	add	r19, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	c2 17       	cp	r28, r18
     cb8:	d3 07       	cpc	r29, r19
     cba:	09 f0       	breq	.+2      	; 0xcbe <_Z7acbModev+0x1d0>
     cbc:	5b c0       	rjmp	.+182    	; 0xd74 <_Z7acbModev+0x286>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     cbe:	f8 01       	movw	r30, r16
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 70       	andi	r24, 0x0F	; 15
     cc4:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     cc6:	80 81       	ld	r24, Z
     cc8:	80 7f       	andi	r24, 0xF0	; 240
     cca:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
     ccc:	80 81       	ld	r24, Z
     cce:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     cd0:	f5 01       	movw	r30, r10
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
     cd8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
     cdc:	88 23       	and	r24, r24
     cde:	e1 f3       	breq	.-8      	; 0xcd8 <_Z7acbModev+0x1ea>
		Voltage = CalculateVoltage(Data);
     ce0:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
     ce4:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
     cf0:	2a ea       	ldi	r18, 0xAA	; 170
     cf2:	31 ef       	ldi	r19, 0xF1	; 241
     cf4:	44 e9       	ldi	r20, 0x94	; 148
     cf6:	51 e4       	ldi	r21, 0x41	; 65
     cf8:	0e 94 0f 0c 	call	0x181e	; 0x181e <__divsf3>
     cfc:	f4 01       	movw	r30, r8
     cfe:	64 83       	std	Z+4, r22	; 0x04
     d00:	75 83       	std	Z+5, r23	; 0x05
     d02:	86 83       	std	Z+6, r24	; 0x06
     d04:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
     d06:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
     d0a:	8f ec       	ldi	r24, 0xCF	; 207
     d0c:	97 e0       	ldi	r25, 0x07	; 7
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_Z7acbModev+0x220>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <_Z7acbModev+0x226>
     d14:	00 00       	nop
				//Do it every second
				adcOb.MesureVoltage(PORTC0);
				_delay_ms(1);
				screen_arr[2] = (uint8_t)adcOb.Voltage/10;
     d16:	44 80       	ldd	r4, Z+4	; 0x04
     d18:	55 80       	ldd	r5, Z+5	; 0x05
     d1a:	66 80       	ldd	r6, Z+6	; 0x06
     d1c:	77 80       	ldd	r7, Z+7	; 0x07
     d1e:	c3 01       	movw	r24, r6
     d20:	b2 01       	movw	r22, r4
     d22:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
     d26:	63 9d       	mul	r22, r3
     d28:	81 2d       	mov	r24, r1
     d2a:	11 24       	eor	r1, r1
     d2c:	86 95       	lsr	r24
     d2e:	86 95       	lsr	r24
     d30:	86 95       	lsr	r24
     d32:	f6 01       	movw	r30, r12
     d34:	82 83       	std	Z+2, r24	; 0x02
				screen_arr[1] = (uint8_t)adcOb.Voltage%10;
     d36:	88 0f       	add	r24, r24
     d38:	98 2f       	mov	r25, r24
     d3a:	99 0f       	add	r25, r25
     d3c:	99 0f       	add	r25, r25
     d3e:	89 0f       	add	r24, r25
     d40:	68 1b       	sub	r22, r24
     d42:	61 83       	std	Z+1, r22	; 0x01
				screen_arr[0] = ((uint8_t)(adcOb.Voltage*10))%10;
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	c3 01       	movw	r24, r6
     d4e:	b2 01       	movw	r22, r4
     d50:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
     d54:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
     d58:	63 9d       	mul	r22, r3
     d5a:	81 2d       	mov	r24, r1
     d5c:	11 24       	eor	r1, r1
     d5e:	86 95       	lsr	r24
     d60:	86 95       	lsr	r24
     d62:	86 95       	lsr	r24
     d64:	88 0f       	add	r24, r24
     d66:	98 2f       	mov	r25, r24
     d68:	99 0f       	add	r25, r25
     d6a:	99 0f       	add	r25, r25
     d6c:	89 0f       	add	r24, r25
     d6e:	68 1b       	sub	r22, r24
     d70:	f6 01       	movw	r30, r12
     d72:	60 83       	st	Z, r22
			}
			if(exitCouter > 7000) return 0;
     d74:	c9 35       	cpi	r28, 0x59	; 89
     d76:	fb e1       	ldi	r31, 0x1B	; 27
     d78:	df 07       	cpc	r29, r31
     d7a:	09 f0       	breq	.+2      	; 0xd7e <_Z7acbModev+0x290>
     d7c:	78 cf       	rjmp	.-272    	; 0xc6e <_Z7acbModev+0x180>
		}
}
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	bf 90       	pop	r11
     d92:	af 90       	pop	r10
     d94:	9f 90       	pop	r9
     d96:	8f 90       	pop	r8
     d98:	7f 90       	pop	r7
     d9a:	6f 90       	pop	r6
     d9c:	5f 90       	pop	r5
     d9e:	4f 90       	pop	r4
     da0:	3f 90       	pop	r3
     da2:	08 95       	ret

00000da4 <_Z12setupMinutesv>:

uint8_t setupMinutes () {
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
     db6:	e6 e1       	ldi	r30, 0x16	; 22
     db8:	f1 e0       	ldi	r31, 0x01	; 1
     dba:	90 81       	ld	r25, Z
     dbc:	81 81       	ldd	r24, Z+1	; 0x01
     dbe:	88 0f       	add	r24, r24
     dc0:	18 2f       	mov	r17, r24
     dc2:	11 0f       	add	r17, r17
     dc4:	11 0f       	add	r17, r17
     dc6:	81 0f       	add	r24, r17
     dc8:	18 2f       	mov	r17, r24
     dca:	19 0f       	add	r17, r25
	uint16_t blinker = 0;
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				minutes += 1;
				minutes %= 60;
     dd0:	0f 2e       	mov	r0, r31
     dd2:	f9 e8       	ldi	r31, 0x89	; 137
     dd4:	bf 2e       	mov	r11, r31
     dd6:	f0 2d       	mov	r31, r0
     dd8:	0f 2e       	mov	r0, r31
     dda:	fc e3       	ldi	r31, 0x3C	; 60
     ddc:	cf 2e       	mov	r12, r31
     dde:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
			screen_arr [0] = minutes % 10;
		}
		else {
			screen_arr [1] = -1;
     de0:	7f 01       	movw	r14, r30
     de2:	0f ef       	ldi	r16, 0xFF	; 255
			return 4;
			}

		}
		if (blinker > 250) {
			screen_arr [1] = minutes / 10;
     de4:	0f 2e       	mov	r0, r31
     de6:	fd ec       	ldi	r31, 0xCD	; 205
     de8:	df 2e       	mov	r13, r31
     dea:	f0 2d       	mov	r31, r0

uint8_t setupMinutes () {
	uint8_t minutes = screen_arr[0] + 10 * screen_arr [1];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     dec:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     df0:	88 23       	and	r24, r24
     df2:	81 f0       	breq	.+32     	; 0xe14 <_Z12setupMinutesv+0x70>
			if (key == 1) {
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	61 f4       	brne	.+24     	; 0xe10 <_Z12setupMinutesv+0x6c>
				minutes += 1;
     df8:	81 0f       	add	r24, r17
				minutes %= 60;
     dfa:	8b 9d       	mul	r24, r11
     dfc:	11 2d       	mov	r17, r1
     dfe:	11 24       	eor	r1, r1
     e00:	12 95       	swap	r17
     e02:	16 95       	lsr	r17
     e04:	17 70       	andi	r17, 0x07	; 7
     e06:	1c 9d       	mul	r17, r12
     e08:	80 19       	sub	r24, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	18 2f       	mov	r17, r24
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <_Z12setupMinutesv+0x70>
				
			}
			if (key == 2) {
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	41 f1       	breq	.+80     	; 0xe64 <_Z12setupMinutesv+0xc0>
			screen_arr [0] = minutes % 10;
			return 4;
			}

		}
		if (blinker > 250) {
     e14:	cb 3f       	cpi	r28, 0xFB	; 251
     e16:	d1 05       	cpc	r29, r1
     e18:	98 f0       	brcs	.+38     	; 0xe40 <_Z12setupMinutesv+0x9c>
			screen_arr [1] = minutes / 10;
     e1a:	1d 9d       	mul	r17, r13
     e1c:	81 2d       	mov	r24, r1
     e1e:	11 24       	eor	r1, r1
     e20:	86 95       	lsr	r24
     e22:	86 95       	lsr	r24
     e24:	86 95       	lsr	r24
     e26:	f7 01       	movw	r30, r14
     e28:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     e2a:	88 0f       	add	r24, r24
     e2c:	98 2f       	mov	r25, r24
     e2e:	99 0f       	add	r25, r25
     e30:	99 0f       	add	r25, r25
     e32:	89 0f       	add	r24, r25
     e34:	f1 2f       	mov	r31, r17
     e36:	f8 1b       	sub	r31, r24
     e38:	8f 2f       	mov	r24, r31
     e3a:	f7 01       	movw	r30, r14
     e3c:	80 83       	st	Z, r24
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <_Z12setupMinutesv+0xa2>
		}
		else {
			screen_arr [1] = -1;
     e40:	f7 01       	movw	r30, r14
     e42:	01 83       	std	Z+1, r16	; 0x01
			screen_arr [0] = -1;
     e44:	00 83       	st	Z, r16
		}
		if (blinker < 500) {
     e46:	c4 3f       	cpi	r28, 0xF4	; 244
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	df 07       	cpc	r29, r31
     e4c:	10 f4       	brcc	.+4      	; 0xe52 <_Z12setupMinutesv+0xae>
			blinker += 1;
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <_Z12setupMinutesv+0xb2>
		}
		else {
			blinker = 0;
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	8f ec       	ldi	r24, 0xCF	; 207
     e58:	97 e0       	ldi	r25, 0x07	; 7
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <_Z12setupMinutesv+0xb6>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <_Z12setupMinutesv+0xbc>
     e60:	00 00       	nop
     e62:	c4 cf       	rjmp	.-120    	; 0xdec <_Z12setupMinutesv+0x48>
				minutes += 1;
				minutes %= 60;
				
			}
			if (key == 2) {
			rtcSendMinutes (minutes);
     e64:	81 2f       	mov	r24, r17
     e66:	0e 94 83 0a 	call	0x1506	; 0x1506 <_Z14rtcSendMinutesh>
			screen_arr [1] = minutes / 10;
     e6a:	8d ec       	ldi	r24, 0xCD	; 205
     e6c:	18 9f       	mul	r17, r24
     e6e:	81 2d       	mov	r24, r1
     e70:	11 24       	eor	r1, r1
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	e6 e1       	ldi	r30, 0x16	; 22
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	81 83       	std	Z+1, r24	; 0x01
			screen_arr [0] = minutes % 10;
     e7e:	88 0f       	add	r24, r24
     e80:	98 2f       	mov	r25, r24
     e82:	99 0f       	add	r25, r25
     e84:	99 0f       	add	r25, r25
     e86:	89 0f       	add	r24, r25
     e88:	18 1b       	sub	r17, r24
     e8a:	10 83       	st	Z, r17
			blinker = 0;
		}
		_delay_ms(1);

	}
}
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	08 95       	ret

00000ea2 <_Z10setupHoursv>:
uint8_t setupHours () {
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
     eb4:	e6 e1       	ldi	r30, 0x16	; 22
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	99 0f       	add	r25, r25
     ebe:	19 2f       	mov	r17, r25
     ec0:	11 0f       	add	r17, r17
     ec2:	11 0f       	add	r17, r17
     ec4:	19 0f       	add	r17, r25
     ec6:	18 0f       	add	r17, r24
	uint16_t blinker = 0;
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
	while(true){
		uint8_t key = keyChecker();
		if(key) {
			if (key == 1) {
				hours += 1;
				hours %= 24;
     ecc:	0f 2e       	mov	r0, r31
     ece:	fb ea       	ldi	r31, 0xAB	; 171
     ed0:	bf 2e       	mov	r11, r31
     ed2:	f0 2d       	mov	r31, r0
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f8 e1       	ldi	r31, 0x18	; 24
     ed8:	cf 2e       	mov	r12, r31
     eda:	f0 2d       	mov	r31, r0
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
			screen_arr [2] = hours % 10;
		}
		else {
			screen_arr [3] = -1;
     edc:	7f 01       	movw	r14, r30
     ede:	0f ef       	ldi	r16, 0xFF	; 255
			return 6;
			}

		}
		if (blinker > 250) {
			screen_arr [3] = hours / 10;
     ee0:	0f 2e       	mov	r0, r31
     ee2:	fd ec       	ldi	r31, 0xCD	; 205
     ee4:	df 2e       	mov	r13, r31
     ee6:	f0 2d       	mov	r31, r0
}
uint8_t setupHours () {
	uint8_t hours = screen_arr[2] + 10 * screen_arr [3];
	uint16_t blinker = 0;
	while(true){
		uint8_t key = keyChecker();
     ee8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
     eec:	88 23       	and	r24, r24
     eee:	79 f0       	breq	.+30     	; 0xf0e <_Z10setupHoursv+0x6c>
			if (key == 1) {
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	59 f4       	brne	.+22     	; 0xf0a <_Z10setupHoursv+0x68>
				hours += 1;
     ef4:	81 0f       	add	r24, r17
				hours %= 24;
     ef6:	8b 9d       	mul	r24, r11
     ef8:	11 2d       	mov	r17, r1
     efa:	11 24       	eor	r1, r1
     efc:	12 95       	swap	r17
     efe:	1f 70       	andi	r17, 0x0F	; 15
     f00:	1c 9d       	mul	r17, r12
     f02:	80 19       	sub	r24, r0
     f04:	11 24       	eor	r1, r1
     f06:	18 2f       	mov	r17, r24
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <_Z10setupHoursv+0x6c>
				
			}
			if (key == 2) {
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	41 f1       	breq	.+80     	; 0xf5e <_Z10setupHoursv+0xbc>
			
			return 6;
			}

		}
		if (blinker > 250) {
     f0e:	cb 3f       	cpi	r28, 0xFB	; 251
     f10:	d1 05       	cpc	r29, r1
     f12:	98 f0       	brcs	.+38     	; 0xf3a <_Z10setupHoursv+0x98>
			screen_arr [3] = hours / 10;
     f14:	1d 9d       	mul	r17, r13
     f16:	81 2d       	mov	r24, r1
     f18:	11 24       	eor	r1, r1
     f1a:	86 95       	lsr	r24
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	f7 01       	movw	r30, r14
     f22:	83 83       	std	Z+3, r24	; 0x03
			screen_arr [2] = hours % 10;
     f24:	88 0f       	add	r24, r24
     f26:	98 2f       	mov	r25, r24
     f28:	99 0f       	add	r25, r25
     f2a:	99 0f       	add	r25, r25
     f2c:	89 0f       	add	r24, r25
     f2e:	f1 2f       	mov	r31, r17
     f30:	f8 1b       	sub	r31, r24
     f32:	8f 2f       	mov	r24, r31
     f34:	f7 01       	movw	r30, r14
     f36:	82 83       	std	Z+2, r24	; 0x02
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <_Z10setupHoursv+0x9e>
		}
		else {
			screen_arr [3] = -1;
     f3a:	f7 01       	movw	r30, r14
     f3c:	03 83       	std	Z+3, r16	; 0x03
			screen_arr [2] = -1;
     f3e:	02 83       	std	Z+2, r16	; 0x02
		}
		if (blinker < 500) {
     f40:	c4 3f       	cpi	r28, 0xF4	; 244
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	df 07       	cpc	r29, r31
     f46:	10 f4       	brcc	.+4      	; 0xf4c <_Z10setupHoursv+0xaa>
			blinker += 1;
     f48:	21 96       	adiw	r28, 0x01	; 1
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <_Z10setupHoursv+0xae>
		}
		else {
			blinker = 0;
     f4c:	c0 e0       	ldi	r28, 0x00	; 0
     f4e:	d0 e0       	ldi	r29, 0x00	; 0
     f50:	8f ec       	ldi	r24, 0xCF	; 207
     f52:	97 e0       	ldi	r25, 0x07	; 7
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <_Z10setupHoursv+0xb2>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <_Z10setupHoursv+0xb8>
     f5a:	00 00       	nop
     f5c:	c5 cf       	rjmp	.-118    	; 0xee8 <_Z10setupHoursv+0x46>
				hours += 1;
				hours %= 24;
				
			}
			if (key == 2) {
			rtcSendHours (hours);
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_Z12rtcSendHoursh>
		}
		_delay_ms(1);


	}
}
     f64:	86 e0       	ldi	r24, 0x06	; 6
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	08 95       	ret

00000f7a <_Z14clrScreenArrayv>:
	}

	return 0;
}
void clrScreenArray () {
	screen_arr[0]=-1;
     f7a:	e6 e1       	ldi	r30, 0x16	; 22
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	80 83       	st	Z, r24
	screen_arr[1]=-1;
     f82:	81 83       	std	Z+1, r24	; 0x01
	screen_arr[2]=-1;
     f84:	82 83       	std	Z+2, r24	; 0x02
	screen_arr[3]=-1;
     f86:	83 83       	std	Z+3, r24	; 0x03
	screen_arr[4]=-1;
     f88:	84 83       	std	Z+4, r24	; 0x04
     f8a:	08 95       	ret

00000f8c <_Z8rtcCyclev>:
		
		_delay_ms(1);
	}
}

uint8_t rtcCycle () {
     f8c:	2f 92       	push	r2
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	67 97       	sbiw	r28, 0x17	; 23
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
	int8_t endLowEnergy = -1;
	static double adcAvg = 1023;

	uint8_t timeArr[0x13];

	bool powerGoodDelay = true;
     fc0:	55 24       	eor	r5, r5
     fc2:	53 94       	inc	r5
		_delay_ms(1);
	}
}

uint8_t rtcCycle () {
	int8_t startLowEnergy = -1;
     fc4:	bb 24       	eor	r11, r11
     fc6:	ba 94       	dec	r11
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
				if(startLowEnergy == endLowEnergy) {
					clrScreenArray();
					powerGoodDelay = false;
     fc8:	a1 2c       	mov	r10, r1
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
     fca:	0f 2e       	mov	r0, r31
     fcc:	fc e3       	ldi	r31, 0x3C	; 60
     fce:	2f 2e       	mov	r2, r31
     fd0:	31 2c       	mov	r3, r1
     fd2:	f0 2d       	mov	r31, r0
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		
		readTime(timeArr);
		
		if (powerGood || powerGoodDelay) {
			screen_arr[0] = timeArr[1] & 0x0F;
     fd4:	0f 2e       	mov	r0, r31
     fd6:	f6 e1       	ldi	r31, 0x16	; 22
     fd8:	cf 2e       	mov	r12, r31
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	df 2e       	mov	r13, r31
     fde:	f0 2d       	mov	r31, r0
			screen_arr[1] = timeArr[1] >> 4;
			screen_arr[2] = timeArr[2] & 0x0F;
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
     fe0:	68 94       	set
     fe2:	44 24       	eor	r4, r4
     fe4:	41 f8       	bld	r4, 1
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
     fe6:	0c e7       	ldi	r16, 0x7C	; 124
     fe8:	10 e0       	ldi	r17, 0x00	; 0
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     fea:	0f 2e       	mov	r0, r31
     fec:	fa e7       	ldi	r31, 0x7A	; 122
     fee:	8f 2e       	mov	r8, r31
     ff0:	91 2c       	mov	r9, r1
     ff2:	f0 2d       	mov	r31, r0
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
     ff4:	0f 2e       	mov	r0, r31
     ff6:	fe e0       	ldi	r31, 0x0E	; 14
     ff8:	6f 2e       	mov	r6, r31
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	7f 2e       	mov	r7, r31
     ffe:	f0 2d       	mov	r31, r0

	bool powerGoodDelay = true;


	while (true) {
		bool powerGood = PIND & 1;
    1000:	89 b1       	in	r24, 0x09	; 9
    1002:	81 70       	andi	r24, 0x01	; 1
    1004:	f8 2e       	mov	r15, r24
		//bool powerGood = false;
		
		const uint8_t POWERDELAY = 5;//Delay Before the lights is off
		
		readTime(timeArr);
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z8readTimePh>
		
		if (powerGood || powerGoodDelay) {
    100e:	f1 10       	cpse	r15, r1
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <_Z8rtcCyclev+0x8a>
    1012:	55 20       	and	r5, r5
    1014:	01 f1       	breq	.+64     	; 0x1056 <_Z8rtcCyclev+0xca>
			screen_arr[0] = timeArr[1] & 0x0F;
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	98 2f       	mov	r25, r24
    101a:	9f 70       	andi	r25, 0x0F	; 15
    101c:	f6 01       	movw	r30, r12
    101e:	90 83       	st	Z, r25
			screen_arr[1] = timeArr[1] >> 4;
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	95 95       	asr	r25
    102c:	87 95       	ror	r24
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	81 83       	std	Z+1, r24	; 0x01
			screen_arr[2] = timeArr[2] & 0x0F;
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	98 2f       	mov	r25, r24
    1038:	9f 70       	andi	r25, 0x0F	; 15
    103a:	92 83       	std	Z+2, r25	; 0x02
			screen_arr[3] = timeArr[2] >> 4;
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	95 95       	asr	r25
    1040:	87 95       	ror	r24
    1042:	95 95       	asr	r25
    1044:	87 95       	ror	r24
    1046:	95 95       	asr	r25
    1048:	87 95       	ror	r24
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	83 83       	std	Z+3, r24	; 0x03
			screen_arr[4] = 2;//Dot Point Position
    1050:	44 82       	std	Z+4, r4	; 0x04
			
		}
		if(powerGood) {
    1052:	f1 10       	cpse	r15, r1
    1054:	34 c0       	rjmp	.+104    	; 0x10be <_Z8rtcCyclev+0x132>
			endLowEnergy = -1;
			powerGoodDelay = true;
		}
		else 
		{
			if(startLowEnergy == -1) {
    1056:	ff ef       	ldi	r31, 0xFF	; 255
    1058:	bf 12       	cpse	r11, r31
    105a:	1f c0       	rjmp	.+62     	; 0x109a <_Z8rtcCyclev+0x10e>
				startLowEnergy = ((timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10 + POWERDELAY)%60;
    105c:	2a 81       	ldd	r18, Y+2	; 0x02
    105e:	82 2f       	mov	r24, r18
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	95 95       	asr	r25
    1064:	87 95       	ror	r24
    1066:	95 95       	asr	r25
    1068:	87 95       	ror	r24
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	95 95       	asr	r25
    1070:	87 95       	ror	r24
    1072:	ac 01       	movw	r20, r24
    1074:	44 0f       	add	r20, r20
    1076:	55 1f       	adc	r21, r21
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	84 0f       	add	r24, r20
    1086:	95 1f       	adc	r25, r21
    1088:	2f 70       	andi	r18, 0x0F	; 15
    108a:	82 0f       	add	r24, r18
    108c:	91 1d       	adc	r25, r1
    108e:	05 96       	adiw	r24, 0x05	; 5
    1090:	b1 01       	movw	r22, r2
    1092:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__divmodhi4>
    1096:	b8 2e       	mov	r11, r24
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <_Z8rtcCyclev+0x13a>
			}
			else {
				endLowEnergy = (timeArr[1] & 0x0F) + (timeArr[1] >> 4)*10;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
				if(startLowEnergy == endLowEnergy) {
    109c:	98 2f       	mov	r25, r24
    109e:	96 95       	lsr	r25
    10a0:	96 95       	lsr	r25
    10a2:	96 95       	lsr	r25
    10a4:	9e 71       	andi	r25, 0x1E	; 30
    10a6:	29 2f       	mov	r18, r25
    10a8:	22 0f       	add	r18, r18
    10aa:	22 0f       	add	r18, r18
    10ac:	92 0f       	add	r25, r18
    10ae:	8f 70       	andi	r24, 0x0F	; 15
    10b0:	89 0f       	add	r24, r25
    10b2:	b8 12       	cpse	r11, r24
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <_Z8rtcCyclev+0x13a>
					clrScreenArray();
    10b6:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_Z14clrScreenArrayv>
					powerGoodDelay = false;
    10ba:	5a 2c       	mov	r5, r10
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <_Z8rtcCyclev+0x13a>
			
		}
		if(powerGood) {
			startLowEnergy = -1;
			endLowEnergy = -1;
			powerGoodDelay = true;
    10be:	55 24       	eor	r5, r5
    10c0:	53 94       	inc	r5
			screen_arr[3] = timeArr[2] >> 4;
			screen_arr[4] = 2;//Dot Point Position
			
		}
		if(powerGood) {
			startLowEnergy = -1;
    10c2:	bb 24       	eor	r11, r11
    10c4:	ba 94       	dec	r11
			
			}
		
		
		
		uint8_t key = keyChecker();
    10c6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10keyCheckerv>
		if(key) {
    10ca:	88 23       	and	r24, r24
    10cc:	79 f0       	breq	.+30     	; 0x10ec <_Z8rtcCyclev+0x160>
			if (key == 1) {
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <_Z8rtcCyclev+0x154>
				// short press button 1
				if(!powerGoodDelay) {
    10d2:	51 10       	cpse	r5, r1
    10d4:	83 c0       	rjmp	.+262    	; 0x11dc <_Z8rtcCyclev+0x250>
					powerGoodDelay = true;
    10d6:	55 24       	eor	r5, r5
    10d8:	53 94       	inc	r5
					startLowEnergy = -1;
    10da:	bb 24       	eor	r11, r11
    10dc:	ba 94       	dec	r11
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <_Z8rtcCyclev+0x160>
				}
				else 
				return 1;
			}
			
			if (key == 2 ) {
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <_Z8rtcCyclev+0x15a>
    10e4:	7d c0       	rjmp	.+250    	; 0x11e0 <_Z8rtcCyclev+0x254>
				// short press button 2
				return 5;
			}
			
			if (key == 3) {
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	09 f4       	brne	.+2      	; 0x10ec <_Z8rtcCyclev+0x160>
    10ea:	7c c0       	rjmp	.+248    	; 0x11e4 <_Z8rtcCyclev+0x258>
	
		{Data = ADC;}
	
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
    10ec:	f8 01       	movw	r30, r16
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 70       	andi	r24, 0x0F	; 15
    10f2:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    10f4:	80 81       	ld	r24, Z
    10f6:	80 7f       	andi	r24, 0xF0	; 240
    10f8:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    10fa:	80 81       	ld	r24, Z
    10fc:	81 60       	ori	r24, 0x01	; 1
    10fe:	80 83       	st	Z, r24
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
    1100:	f4 01       	movw	r30, r8
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	80 83       	st	Z, r24
	void MesureVoltage(uint8_t NumberOfPin)
	{	//ADMUX |= 0xC0;
		ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		//_delay_ms(2);
		while(!DataReady);
    1108:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZN8AdcClass9DataReadyE>
    110c:	88 23       	and	r24, r24
    110e:	e1 f3       	breq	.-8      	; 0x1108 <_Z8rtcCyclev+0x17c>
		Voltage = CalculateVoltage(Data);
    1110:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
    1114:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
    1120:	2a ea       	ldi	r18, 0xAA	; 170
    1122:	31 ef       	ldi	r19, 0xF1	; 241
    1124:	44 e9       	ldi	r20, 0x94	; 148
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 0f 0c 	call	0x181e	; 0x181e <__divsf3>
    112c:	f3 01       	movw	r30, r6
    112e:	64 83       	std	Z+4, r22	; 0x04
    1130:	75 83       	std	Z+5, r23	; 0x05
    1132:	86 83       	std	Z+6, r24	; 0x06
    1134:	97 83       	std	Z+7, r25	; 0x07
		DataReady = false;
    1136:	a0 92 1d 01 	sts	0x011D, r10	; 0x80011d <_ZN8AdcClass9DataReadyE>
		}
		adcOb.MesureVoltage(PORTC1);

		//Opacity Correction
		const double corrector = 1024;
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
    113a:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <_ZN8AdcClass4DataE>
    113e:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 ec       	ldi	r19, 0xC0	; 192
    1146:	4f e7       	ldi	r20, 0x7F	; 127
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    114e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1152:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1156:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    115a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5a e3       	ldi	r21, 0x3A	; 58
    1166:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
    116a:	6c 8b       	std	Y+20, r22	; 0x14
    116c:	7d 8b       	std	Y+21, r23	; 0x15
    116e:	8e 8b       	std	Y+22, r24	; 0x16
    1170:	9f 8b       	std	Y+23, r25	; 0x17
    1172:	b7 01       	movw	r22, r14
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5a e3       	ldi	r21, 0x3A	; 58
    1184:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	6c 89       	ldd	r22, Y+20	; 0x14
    118e:	7d 89       	ldd	r23, Y+21	; 0x15
    1190:	8e 89       	ldd	r24, Y+22	; 0x16
    1192:	9f 89       	ldd	r25, Y+23	; 0x17
    1194:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__addsf3>
    1198:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    119c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    11a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    11a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
		opacity = MAXGRADES - adcAvg/(1024/(MAXGRADES+1));
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5c e3       	ldi	r21, 0x3C	; 60
    11b0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	80 e7       	ldi	r24, 0x70	; 112
    11be:	91 e4       	ldi	r25, 0x41	; 65
    11c0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__subsf3>
    11c4:	0e 94 81 0c 	call	0x1902	; 0x1902 <__fixsfsi>
    11c8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <opacity>
		if(opacity < 0) opacity = 0;
    11cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <opacity>
    11d0:	88 23       	and	r24, r24
    11d2:	0c f0       	brlt	.+2      	; 0x11d6 <_Z8rtcCyclev+0x24a>
    11d4:	15 cf       	rjmp	.-470    	; 0x1000 <_Z8rtcCyclev+0x74>
    11d6:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <opacity>
    11da:	12 cf       	rjmp	.-476    	; 0x1000 <_Z8rtcCyclev+0x74>
					powerGoodDelay = true;
					startLowEnergy = -1;
					endLowEnergy = -1;
				}
				else 
				return 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <_Z8rtcCyclev+0x25a>
			}
			
			if (key == 2 ) {
				// short press button 2
				return 5;
    11e0:	85 e0       	ldi	r24, 0x05	; 5
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <_Z8rtcCyclev+0x25a>
			}
			
			if (key == 3) {
				// long press button 2
				return 3;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
		adcAvg = adcAvg*(corrector -1)/corrector+ (double)adcOb.Data/corrector;
		opacity = MAXGRADES - adcAvg/(1024/(MAXGRADES+1));
		if(opacity < 0) opacity = 0;
	}
	
}
    11e6:	67 96       	adiw	r28, 0x17	; 23
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	bf 90       	pop	r11
    1204:	af 90       	pop	r10
    1206:	9f 90       	pop	r9
    1208:	8f 90       	pop	r8
    120a:	7f 90       	pop	r7
    120c:	6f 90       	pop	r6
    120e:	5f 90       	pop	r5
    1210:	4f 90       	pop	r4
    1212:	3f 90       	pop	r3
    1214:	2f 90       	pop	r2
    1216:	08 95       	ret

00001218 <main>:
		current Screen = 2 - accumulator mode;
		current Screen = 3 - setup minutes mode;
		current Screen = 4 - setum hours mode;
	*/

	DDRD &=~(1<< 3|1<<PORTD4); //Change direction to input
    1218:	8a b1       	in	r24, 0x0a	; 10
    121a:	87 7e       	andi	r24, 0xE7	; 231
    121c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<PORTD3|1<<PORTD4; //Enable pull-up resistors
    121e:	8b b1       	in	r24, 0x0b	; 11
    1220:	88 61       	ori	r24, 0x18	; 24
    1222:	8b b9       	out	0x0b, r24	; 11

	clrScreenArray();//Start from blank screen
    1224:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_Z14clrScreenArrayv>
	EnableTimer0Interrupt();
    1228:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z21EnableTimer0Interruptv>
	sei();
    122c:	78 94       	sei
	rtcInit();
    122e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z7rtcInitv>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
    1232:	ec e7       	ldi	r30, 0x7C	; 124
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 7f       	andi	r24, 0xF0	; 240
    123a:	80 83       	st	Z, r24
		ADMUX |= NumberOfPin;
    123c:	80 81       	ld	r24, Z
    123e:	80 83       	st	Z, r24
	void Init()
	{
			
			
			SelectMixer(PORTC0);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1240:	ea e7       	ldi	r30, 0x7A	; 122
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	87 60       	ori	r24, 0x07	; 7
    1248:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADIE);
    124a:	80 81       	ld	r24, Z
    124c:	88 60       	ori	r24, 0x08	; 8
    124e:	80 83       	st	Z, r24
			ADCSRA |=(1<<ADEN);
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	80 83       	st	Z, r24
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
    1256:	80 81       	ld	r24, Z
    1258:	80 64       	ori	r24, 0x40	; 64
    125a:	80 83       	st	Z, r24
void displaySeconds(uint16_t secondsTotal);

uint16_t alarmTime = TIMER_ALARM_TIME;
int main(void)
{
	uint8_t currentScreen = 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
	sei();
	rtcInit();
	adcOb.Init();
    while (1) 
    {
		switch (currentScreen) {
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	87 30       	cpi	r24, 0x07	; 7
    1262:	91 05       	cpc	r25, r1
    1264:	d0 f4       	brcc	.+52     	; 0x129a <main+0x82>
    1266:	fc 01       	movw	r30, r24
    1268:	ec 5c       	subi	r30, 0xCC	; 204
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__tablejump2__>
			case 0: currentScreen = rtcCycle();
    1270:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_Z8rtcCyclev>
					break;
    1274:	f4 cf       	rjmp	.-24     	; 0x125e <main+0x46>
			case 1: currentScreen = dsMode();
    1276:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_Z6dsModev>
					break;
    127a:	f1 cf       	rjmp	.-30     	; 0x125e <main+0x46>
			case 2: currentScreen = acbMode();
    127c:	0e 94 77 05 	call	0xaee	; 0xaee <_Z7acbModev>
					break;
    1280:	ee cf       	rjmp	.-36     	; 0x125e <main+0x46>
			case 3: currentScreen = setupMinutes();
    1282:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z12setupMinutesv>
					break;
    1286:	eb cf       	rjmp	.-42     	; 0x125e <main+0x46>
			case 4: currentScreen = setupHours();
    1288:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z10setupHoursv>
					break;
    128c:	e8 cf       	rjmp	.-48     	; 0x125e <main+0x46>
			case 5: currentScreen = timerMode();
    128e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z9timerModev>
					break;
    1292:	e5 cf       	rjmp	.-54     	; 0x125e <main+0x46>
			case 6: currentScreen = setupTimer();
    1294:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z10setupTimerv>
					break;
    1298:	e2 cf       	rjmp	.-60     	; 0x125e <main+0x46>
			default: currentScreen = rtcCycle();
    129a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_Z8rtcCyclev>
					 break;
    129e:	df cf       	rjmp	.-66     	; 0x125e <main+0x46>

000012a0 <_GLOBAL__sub_I_temperature_byte1>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_ZN8AdcClass4DataE+0x1>
    12a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_ZN8AdcClass4DataE>
		DataReady = false;
    12ac:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <_ZN8AdcClass9DataReadyE>
		Resistor = INFINITY;
    12b0:	ee e0       	ldi	r30, 0x0E	; 14
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e8       	ldi	r26, 0x80	; 128
    12ba:	bf e7       	ldi	r27, 0x7F	; 127
    12bc:	80 83       	st	Z, r24
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	a2 83       	std	Z+2, r26	; 0x02
    12c2:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
    12c4:	84 83       	std	Z+4, r24	; 0x04
    12c6:	95 83       	std	Z+5, r25	; 0x05
    12c8:	a6 83       	std	Z+6, r26	; 0x06
    12ca:	b7 83       	std	Z+7, r27	; 0x07
    12cc:	08 95       	ret

000012ce <_Z13i2cSetBitratej>:
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
}
    12ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12d2:	bc 01       	movw	r22, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	8a ef       	ldi	r24, 0xFA	; 250
    12e6:	95 e4       	ldi	r25, 0x45	; 69
    12e8:	0e 94 0f 0c 	call	0x181e	; 0x181e <__divsf3>
    12ec:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
    12f0:	60 31       	cpi	r22, 0x10	; 16
    12f2:	88 f0       	brcs	.+34     	; 0x1316 <_Z13i2cSetBitratej+0x48>
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 51       	subi	r22, 0x10	; 16
    12f8:	71 09       	sbc	r23, r1
    12fa:	07 2e       	mov	r0, r23
    12fc:	00 0c       	add	r0, r0
    12fe:	88 0b       	sbc	r24, r24
    1300:	99 0b       	sbc	r25, r25
    1302:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__floatsisf>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	5e e3       	ldi	r21, 0x3E	; 62
    130e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
    1312:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
    1316:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    131a:	88 b1       	in	r24, 0x08	; 8
    131c:	80 63       	ori	r24, 0x30	; 48
    131e:	88 b9       	out	0x08, r24	; 8
    1320:	08 95       	ret

00001322 <_Z11i2cSendStopv>:
    1322:	84 e9       	ldi	r24, 0x94	; 148
    1324:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	ec eb       	ldi	r30, 0xBC	; 188
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	90 81       	ld	r25, Z
    1330:	94 ff       	sbrs	r25, 4
    1332:	0e c0       	rjmp	.+28     	; 0x1350 <_Z11i2cSendStopv+0x2e>
    1334:	8a 35       	cpi	r24, 0x5A	; 90
    1336:	31 f4       	brne	.+12     	; 0x1344 <_Z11i2cSendStopv+0x22>
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	8a 95       	dec	r24
    133c:	f1 f7       	brne	.-4      	; 0x133a <_Z11i2cSendStopv+0x18>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <_Z11i2cSendStopv+0x1e>
    1340:	84 e6       	ldi	r24, 0x64	; 100
    1342:	08 95       	ret
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	9a 95       	dec	r25
    1348:	f1 f7       	brne	.-4      	; 0x1346 <_Z11i2cSendStopv+0x24>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <_Z11i2cSendStopv+0x2a>
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	ef cf       	rjmp	.-34     	; 0x132e <_Z11i2cSendStopv+0xc>
    1350:	8a 35       	cpi	r24, 0x5A	; 90
    1352:	90 f7       	brcc	.-28     	; 0x1338 <_Z11i2cSendStopv+0x16>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret

00001358 <_Z18i2cWaitForCompletev>:
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	ec eb       	ldi	r30, 0xBC	; 188
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	90 81       	ld	r25, Z
    1360:	99 23       	and	r25, r25
    1362:	74 f0       	brlt	.+28     	; 0x1380 <_Z18i2cWaitForCompletev+0x28>
    1364:	8a 35       	cpi	r24, 0x5A	; 90
    1366:	31 f4       	brne	.+12     	; 0x1374 <_Z18i2cWaitForCompletev+0x1c>
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	8a 95       	dec	r24
    136c:	f1 f7       	brne	.-4      	; 0x136a <_Z18i2cWaitForCompletev+0x12>
    136e:	00 c0       	rjmp	.+0      	; 0x1370 <_Z18i2cWaitForCompletev+0x18>
    1370:	84 e6       	ldi	r24, 0x64	; 100
    1372:	08 95       	ret
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	9a 95       	dec	r25
    1378:	f1 f7       	brne	.-4      	; 0x1376 <_Z18i2cWaitForCompletev+0x1e>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <_Z18i2cWaitForCompletev+0x24>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	ef cf       	rjmp	.-34     	; 0x135e <_Z18i2cWaitForCompletev+0x6>
    1380:	8a 35       	cpi	r24, 0x5A	; 90
    1382:	90 f7       	brcc	.-28     	; 0x1368 <_Z18i2cWaitForCompletev+0x10>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	08 95       	ret

00001388 <_Z18checki2cReturnCodeh>:
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
	uint8_t i=0;
	//while (error_code!=0 && i!=0 && i<3){
		if ((TWSR & 0xF8) != expected_return_code){
    1388:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    138c:	28 7f       	andi	r18, 0xF8	; 248
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	11 f0       	breq	.+4      	; 0x139c <_Z18checki2cReturnCodeh+0x14>
			error_code=10;
    1398:	8a e0       	ldi	r24, 0x0A	; 10
    139a:	08 95       	ret
}
//----------------------------------------
// 
//----------------------------------------
uint8_t checki2cReturnCode(uint8_t expected_return_code){
	uint8_t error_code=0;
    139c:	80 e0       	ldi	r24, 0x00	; 0
			error_code=10;
		}
	i++;
//	}
	return error_code;
}
    139e:	08 95       	ret

000013a0 <_Z7rtcInitv>:
#include "mainHeader.h"
#define RTC_adr_write 0xD0
#define RTC_adr_read 0xD1
#include "twi_lib.h"
void rtcInit () {
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
	i2cSetBitrate(400);
    13aa:	80 e9       	ldi	r24, 0x90	; 144
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	0e 94 67 09 	call	0x12ce	; 0x12ce <_Z13i2cSetBitratej>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    13b2:	cc eb       	ldi	r28, 0xBC	; 188
    13b4:	d0 e0       	ldi	r29, 0x00	; 0
    13b6:	84 ea       	ldi	r24, 0xA4	; 164
    13b8:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    13ba:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13be:	0f 2e       	mov	r0, r31
    13c0:	fb eb       	ldi	r31, 0xBB	; 187
    13c2:	ef 2e       	mov	r14, r31
    13c4:	f1 2c       	mov	r15, r1
    13c6:	f0 2d       	mov	r31, r0
    13c8:	80 ed       	ldi	r24, 0xD0	; 208
    13ca:	f7 01       	movw	r30, r14
    13cc:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13ce:	14 e8       	ldi	r17, 0x84	; 132
    13d0:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    13d2:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13d6:	88 e2       	ldi	r24, 0x28	; 40
    13d8:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13dc:	8e e0       	ldi	r24, 0x0E	; 14
    13de:	f7 01       	movw	r30, r14
    13e0:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13e2:	18 83       	st	Y, r17

	i2cSendByte(0x0E);
	i2cWaitForComplete();
    13e4:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13e8:	88 e2       	ldi	r24, 0x28	; 40
    13ea:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    13ee:	80 e2       	ldi	r24, 0x20	; 32
    13f0:	f7 01       	movw	r30, r14
    13f2:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    13f4:	18 83       	st	Y, r17

	i2cSendByte(0b00100000);
	i2cWaitForComplete();
    13f6:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    13fa:	88 e2       	ldi	r24, 0x28	; 40
    13fc:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1400:	88 e0       	ldi	r24, 0x08	; 8
    1402:	f7 01       	movw	r30, r14
    1404:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1406:	18 83       	st	Y, r17

	i2cSendByte(0b00001000);
	i2cWaitForComplete();
    1408:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    140c:	88 e2       	ldi	r24, 0x28	; 40
    140e:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1412:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z11i2cSendStopv>
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	08 95       	ret

00001422 <_Z8readTimePh>:

void readTime (uint8_t* timeArr) {
    1422:	9f 92       	push	r9
    1424:	af 92       	push	r10
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	5c 01       	movw	r10, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    143a:	cc eb       	ldi	r28, 0xBC	; 188
    143c:	d0 e0       	ldi	r29, 0x00	; 0
    143e:	04 ea       	ldi	r16, 0xA4	; 164
    1440:	08 83       	st	Y, r16
	i2cSendStart();
	i2cWaitForComplete();
    1442:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1446:	0f 2e       	mov	r0, r31
    1448:	fb eb       	ldi	r31, 0xBB	; 187
    144a:	ef 2e       	mov	r14, r31
    144c:	f1 2c       	mov	r15, r1
    144e:	f0 2d       	mov	r31, r0
    1450:	80 ed       	ldi	r24, 0xD0	; 208
    1452:	f7 01       	movw	r30, r14
    1454:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1456:	14 e8       	ldi	r17, 0x84	; 132
    1458:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    145a:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    145e:	88 e2       	ldi	r24, 0x28	; 40
    1460:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1464:	f7 01       	movw	r30, r14
    1466:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1468:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    146a:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    146e:	88 e2       	ldi	r24, 0x28	; 40
    1470:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    1474:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z11i2cSendStopv>
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1478:	08 83       	st	Y, r16

	//Reading

	i2cSendStart();
	i2cWaitForComplete();
    147a:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    147e:	81 ed       	ldi	r24, 0xD1	; 209
    1480:	f7 01       	movw	r30, r14
    1482:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1484:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
    1486:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    148a:	88 e2       	ldi	r24, 0x28	; 40
    148c:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
	i2cWaitForComplete();
    1490:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
    1494:	e5 01       	movw	r28, r10
    1496:	65 01       	movw	r12, r10
    1498:	f3 e1       	ldi	r31, 0x13	; 19
    149a:	cf 0e       	add	r12, r31
    149c:	d1 1c       	adc	r13, r1
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    149e:	0f 2e       	mov	r0, r31
    14a0:	fc eb       	ldi	r31, 0xBC	; 188
    14a2:	ef 2e       	mov	r14, r31
    14a4:	f1 2c       	mov	r15, r1
    14a6:	f0 2d       	mov	r31, r0
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f4 ec       	ldi	r31, 0xC4	; 196
    14ac:	9f 2e       	mov	r9, r31
    14ae:	f0 2d       	mov	r31, r0
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    14b0:	0b eb       	ldi	r16, 0xBB	; 187
    14b2:	10 e0       	ldi	r17, 0x00	; 0
// 
//----------------------------------------
void i2cReceiveByteACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    14b4:	f7 01       	movw	r30, r14
    14b6:	90 82       	st	Z, r9

	for (int i = 0; i < 0x13; i += 1) {
		i2cReceiveByteACK();
		i2cWaitForComplete();
    14b8:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    14bc:	f8 01       	movw	r30, r16
    14be:	80 81       	ld	r24, Z
		timeArr[i] = i2cGetReceivedByte();
    14c0:	89 93       	st	Y+, r24
		i2cWaitForComplete();
    14c2:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
		checki2cReturnCode(TW_MR_DATA_ACK);
    14c6:	80 e5       	ldi	r24, 0x50	; 80
    14c8:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
	i2cSendByte(RTC_adr_read);
	i2cWaitForComplete();
	checki2cReturnCode(TW_MT_DATA_ACK);
	i2cWaitForComplete();

	for (int i = 0; i < 0x13; i += 1) {
    14cc:	cc 15       	cp	r28, r12
    14ce:	dd 05       	cpc	r29, r13
    14d0:	89 f7       	brne	.-30     	; 0x14b4 <_Z8readTimePh+0x92>
// 
//----------------------------------------
void i2cReceiveByteNACK(void)
{

	TWCR = (1<<TWINT)|(1<<TWEN);
    14d2:	84 e8       	ldi	r24, 0x84	; 132
    14d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		timeArr[i] = i2cGetReceivedByte();
		i2cWaitForComplete();
		checki2cReturnCode(TW_MR_DATA_ACK);
	}
	i2cReceiveByteNACK();
	i2cWaitForComplete();
    14d8:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return (uint8_t)TWDR;
    14dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	timeArr[6] = i2cGetReceivedByte();
    14e0:	f5 01       	movw	r30, r10
    14e2:	86 83       	std	Z+6, r24	; 0x06
	i2cWaitForComplete();
    14e4:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MR_DATA_NACK);
    14e8:	88 e5       	ldi	r24, 0x58	; 88
    14ea:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>

	

}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	08 95       	ret

00001506 <_Z14rtcSendMinutesh>:
void rtcSendMinutes (uint8_t minutes) {
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = minutes/10;
    1512:	9d ec       	ldi	r25, 0xCD	; 205
    1514:	89 9f       	mul	r24, r25
    1516:	91 2d       	mov	r25, r1
    1518:	11 24       	eor	r1, r1
    151a:	96 95       	lsr	r25
    151c:	96 95       	lsr	r25
    151e:	96 95       	lsr	r25
	bdc <<= 4;
    1520:	09 2f       	mov	r16, r25
    1522:	02 95       	swap	r16
    1524:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= minutes%10;
    1526:	99 0f       	add	r25, r25
    1528:	29 2f       	mov	r18, r25
    152a:	22 0f       	add	r18, r18
    152c:	22 0f       	add	r18, r18
    152e:	92 0f       	add	r25, r18
    1530:	89 1b       	sub	r24, r25
    1532:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1534:	cc eb       	ldi	r28, 0xBC	; 188
    1536:	d0 e0       	ldi	r29, 0x00	; 0
    1538:	84 ea       	ldi	r24, 0xA4	; 164
    153a:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    153c:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    1540:	0f 2e       	mov	r0, r31
    1542:	fb eb       	ldi	r31, 0xBB	; 187
    1544:	ef 2e       	mov	r14, r31
    1546:	f1 2c       	mov	r15, r1
    1548:	f0 2d       	mov	r31, r0
    154a:	80 ed       	ldi	r24, 0xD0	; 208
    154c:	f7 01       	movw	r30, r14
    154e:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1550:	14 e8       	ldi	r17, 0x84	; 132
    1552:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    1554:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1558:	88 e2       	ldi	r24, 0x28	; 40
    155a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    155e:	f7 01       	movw	r30, r14
    1560:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1562:	18 83       	st	Y, r17

	i2cSendByte(0x00);
	i2cWaitForComplete();
    1564:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1568:	88 e2       	ldi	r24, 0x28	; 40
    156a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    156e:	f7 01       	movw	r30, r14
    1570:	10 82       	st	Z, r1
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1572:	18 83       	st	Y, r17

	i2cSendByte(0);
	i2cWaitForComplete();
    1574:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1578:	88 e2       	ldi	r24, 0x28	; 40
    157a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    157e:	f7 01       	movw	r30, r14
    1580:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    1582:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    1584:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1588:	88 e2       	ldi	r24, 0x28	; 40
    158a:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    158e:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z11i2cSendStopv>
}
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	08 95       	ret

000015a0 <_Z12rtcSendHoursh>:

void rtcSendHours (uint8_t hours) {
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
	uint8_t bdc = 0;
	bdc = hours/10;
    15ac:	9d ec       	ldi	r25, 0xCD	; 205
    15ae:	89 9f       	mul	r24, r25
    15b0:	91 2d       	mov	r25, r1
    15b2:	11 24       	eor	r1, r1
    15b4:	96 95       	lsr	r25
    15b6:	96 95       	lsr	r25
    15b8:	96 95       	lsr	r25
	bdc <<= 4;
    15ba:	09 2f       	mov	r16, r25
    15bc:	02 95       	swap	r16
    15be:	00 7f       	andi	r16, 0xF0	; 240
	bdc |= hours%10;
    15c0:	99 0f       	add	r25, r25
    15c2:	29 2f       	mov	r18, r25
    15c4:	22 0f       	add	r18, r18
    15c6:	22 0f       	add	r18, r18
    15c8:	92 0f       	add	r25, r18
    15ca:	89 1b       	sub	r24, r25
    15cc:	08 2b       	or	r16, r24
// 
//----------------------------------------
void i2cSendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    15ce:	cc eb       	ldi	r28, 0xBC	; 188
    15d0:	d0 e0       	ldi	r29, 0x00	; 0
    15d2:	84 ea       	ldi	r24, 0xA4	; 164
    15d4:	88 83       	st	Y, r24
	i2cSendStart();
	i2cWaitForComplete();
    15d6:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15da:	0f 2e       	mov	r0, r31
    15dc:	fb eb       	ldi	r31, 0xBB	; 187
    15de:	ef 2e       	mov	r14, r31
    15e0:	f1 2c       	mov	r15, r1
    15e2:	f0 2d       	mov	r31, r0
    15e4:	80 ed       	ldi	r24, 0xD0	; 208
    15e6:	f7 01       	movw	r30, r14
    15e8:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15ea:	14 e8       	ldi	r17, 0x84	; 132
    15ec:	18 83       	st	Y, r17
	i2cSendByte(RTC_adr_write);
	i2cWaitForComplete();
    15ee:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    15f2:	88 e2       	ldi	r24, 0x28	; 40
    15f4:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	f7 01       	movw	r30, r14
    15fc:	80 83       	st	Z, r24
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    15fe:	18 83       	st	Y, r17

	i2cSendByte(0x02);
	i2cWaitForComplete();
    1600:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1604:	88 e2       	ldi	r24, 0x28	; 40
    1606:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>
// 
//----------------------------------------
void i2cSendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
    160a:	f7 01       	movw	r30, r14
    160c:	00 83       	st	Z, r16
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
    160e:	18 83       	st	Y, r17

	i2cSendByte(bdc);
	i2cWaitForComplete();
    1610:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z18i2cWaitForCompletev>
	checki2cReturnCode(TW_MT_DATA_ACK);
    1614:	88 e2       	ldi	r24, 0x28	; 40
    1616:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z18checki2cReturnCodeh>

	i2cSendStop();
    161a:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z11i2cSendStopv>
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	08 95       	ret

0000162c <_Z6ClrScrv>:

	}
}
void ClrScr()
{
	DDRC  |= 1<<PORTC2;
    162c:	3a 9a       	sbi	0x07, 2	; 7
	PORTC &= ~(1<<PORTC2);
    162e:	42 98       	cbi	0x08, 2	; 8

	DDRD  |= 1<<PORTD1|1<<PORTD5;
    1630:	8a b1       	in	r24, 0x0a	; 10
    1632:	82 62       	ori	r24, 0x22	; 34
    1634:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD1|1<<PORTD5);
    1636:	8b b1       	in	r24, 0x0b	; 11
    1638:	8d 7d       	andi	r24, 0xDD	; 221
    163a:	8b b9       	out	0x0b, r24	; 11

	DDRB  |= 1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5;
    163c:	84 b1       	in	r24, 0x04	; 4
    163e:	8d 63       	ori	r24, 0x3D	; 61
    1640:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB4|1<<PORTB5);
    1642:	85 b1       	in	r24, 0x05	; 5
    1644:	82 7c       	andi	r24, 0xC2	; 194
    1646:	85 b9       	out	0x05, r24	; 5
	///
	DDRB |= 1<<PORTB1;
    1648:	21 9a       	sbi	0x04, 1	; 4
	DDRC |= 1<<PORTC3;
    164a:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= 1<<PORTD6|1<<PORTD7;
    164c:	8a b1       	in	r24, 0x0a	; 10
    164e:	80 6c       	ori	r24, 0xC0	; 192
    1650:	8a b9       	out	0x0a, r24	; 10
	PORTB |= 1<<PORTB1;
    1652:	29 9a       	sbi	0x05, 1	; 5
	PORTC |= 1<<PORTC3;
    1654:	43 9a       	sbi	0x08, 3	; 8
	PORTD |= 1<<PORTD6|1<<PORTD7;
    1656:	8b b1       	in	r24, 0x0b	; 11
    1658:	80 6c       	ori	r24, 0xC0	; 192
    165a:	8b b9       	out	0x0b, r24	; 11
    165c:	08 95       	ret

0000165e <_Z11Display7seghb>:
#include "mainHeader.h"



void Display7seg(uint8_t digit, bool dp = false)
{
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	c8 2f       	mov	r28, r24
    1664:	d6 2f       	mov	r29, r22
	ClrScr();
    1666:	0e 94 16 0b 	call	0x162c	; 0x162c <_Z6ClrScrv>
	if(dp) PORTB |= 1<<PORTB4;
    166a:	d1 11       	cpse	r29, r1
    166c:	2c 9a       	sbi	0x05, 4	; 5
	
	switch(digit){
    166e:	8c 2f       	mov	r24, r28
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	86 37       	cpi	r24, 0x76	; 118
    1674:	91 05       	cpc	r25, r1
    1676:	08 f0       	brcs	.+2      	; 0x167a <_Z11Display7seghb+0x1c>
    1678:	4d c0       	rjmp	.+154    	; 0x1714 <_Z11Display7seghb+0xb6>
    167a:	fc 01       	movw	r30, r24
    167c:	e5 5c       	subi	r30, 0xC5	; 197
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__tablejump2__>
		PORTC2		PORTB3
			  PORTB5		PORTB4

		*/
		
		case 0: PORTB |=1<<PORTB0|1<<PORTB3|1<<PORTB5;
    1684:	85 b1       	in	r24, 0x05	; 5
    1686:	89 62       	ori	r24, 0x29	; 41
    1688:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    168a:	8b b1       	in	r24, 0x0b	; 11
    168c:	82 62       	ori	r24, 0x22	; 34
    168e:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    1690:	42 9a       	sbi	0x08, 2	; 8
				break;
    1692:	42 c0       	rjmp	.+132    	; 0x1718 <_Z11Display7seghb+0xba>
		case 1: PORTB |=1<<PORTB0|1<<PORTB3;
    1694:	85 b1       	in	r24, 0x05	; 5
    1696:	89 60       	ori	r24, 0x09	; 9
    1698:	85 b9       	out	0x05, r24	; 5
				break;
    169a:	3e c0       	rjmp	.+124    	; 0x1718 <_Z11Display7seghb+0xba>
		case 2: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB5;
    169c:	85 b1       	in	r24, 0x05	; 5
    169e:	85 62       	ori	r24, 0x25	; 37
    16a0:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    16a2:	59 9a       	sbi	0x0b, 1	; 11
				PORTC |=1<<PORTC2;
    16a4:	42 9a       	sbi	0x08, 2	; 8
				break;
    16a6:	38 c0       	rjmp	.+112    	; 0x1718 <_Z11Display7seghb+0xba>
		case 3: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16a8:	85 b1       	in	r24, 0x05	; 5
    16aa:	8d 62       	ori	r24, 0x2D	; 45
    16ac:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1;
    16ae:	59 9a       	sbi	0x0b, 1	; 11
				break;
    16b0:	33 c0       	rjmp	.+102    	; 0x1718 <_Z11Display7seghb+0xba>
		case 4: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3;
    16b2:	85 b1       	in	r24, 0x05	; 5
    16b4:	8d 60       	ori	r24, 0x0D	; 13
    16b6:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD5;
    16b8:	5d 9a       	sbi	0x0b, 5	; 11
				break;
    16ba:	2e c0       	rjmp	.+92     	; 0x1718 <_Z11Display7seghb+0xba>
		case 5: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16bc:	85 b1       	in	r24, 0x05	; 5
    16be:	8c 62       	ori	r24, 0x2C	; 44
    16c0:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16c2:	8b b1       	in	r24, 0x0b	; 11
    16c4:	82 62       	ori	r24, 0x22	; 34
    16c6:	8b b9       	out	0x0b, r24	; 11
				break;
    16c8:	27 c0       	rjmp	.+78     	; 0x1718 <_Z11Display7seghb+0xba>
		case 6: PORTB |=1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16ca:	85 b1       	in	r24, 0x05	; 5
    16cc:	8c 62       	ori	r24, 0x2C	; 44
    16ce:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16d0:	8b b1       	in	r24, 0x0b	; 11
    16d2:	82 62       	ori	r24, 0x22	; 34
    16d4:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    16d6:	42 9a       	sbi	0x08, 2	; 8
				break;
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <_Z11Display7seghb+0xba>
		case 7: PORTB |=1<<PORTB0|1<<PORTB3;
    16da:	85 b1       	in	r24, 0x05	; 5
    16dc:	89 60       	ori	r24, 0x09	; 9
    16de:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16e0:	8b b1       	in	r24, 0x0b	; 11
    16e2:	82 62       	ori	r24, 0x22	; 34
    16e4:	8b b9       	out	0x0b, r24	; 11
				break;
    16e6:	18 c0       	rjmp	.+48     	; 0x1718 <_Z11Display7seghb+0xba>
		case 8: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16e8:	85 b1       	in	r24, 0x05	; 5
    16ea:	8d 62       	ori	r24, 0x2D	; 45
    16ec:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16ee:	8b b1       	in	r24, 0x0b	; 11
    16f0:	82 62       	ori	r24, 0x22	; 34
    16f2:	8b b9       	out	0x0b, r24	; 11
				PORTC |=1<<PORTC2;
    16f4:	42 9a       	sbi	0x08, 2	; 8
				break;
    16f6:	10 c0       	rjmp	.+32     	; 0x1718 <_Z11Display7seghb+0xba>
		case 9: PORTB |=1<<PORTB0|1<<PORTB2|1<<PORTB3|1<<PORTB5;
    16f8:	85 b1       	in	r24, 0x05	; 5
    16fa:	8d 62       	ori	r24, 0x2D	; 45
    16fc:	85 b9       	out	0x05, r24	; 5
				PORTD |=1<<PORTD1|1<<PORTD5;
    16fe:	8b b1       	in	r24, 0x0b	; 11
    1700:	82 62       	ori	r24, 0x22	; 34
    1702:	8b b9       	out	0x0b, r24	; 11
				break;
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <_Z11Display7seghb+0xba>
	  case 'u': PORTB |=1<<PORTB3|1<<PORTB5;
    1706:	85 b1       	in	r24, 0x05	; 5
    1708:	88 62       	ori	r24, 0x28	; 40
    170a:	85 b9       	out	0x05, r24	; 5
				PORTC |=1<<PORTC2;
    170c:	42 9a       	sbi	0x08, 2	; 8
				break;
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <_Z11Display7seghb+0xba>
	  case '-': PORTB |= 1<<PORTB2;
    1710:	2a 9a       	sbi	0x05, 2	; 5
				break;
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <_Z11Display7seghb+0xba>
		default: ClrScr();
    1714:	0e 94 16 0b 	call	0x162c	; 0x162c <_Z6ClrScrv>
				break;

	}
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <_Z9NextDigith>:
}

void NextDigit(uint8_t number)
{
	
	switch(number)
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	59 f0       	breq	.+22     	; 0x1738 <_Z9NextDigith+0x1a>
    1722:	18 f4       	brcc	.+6      	; 0x172a <_Z9NextDigith+0xc>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	31 f0       	breq	.+12     	; 0x1734 <_Z9NextDigith+0x16>
    1728:	08 95       	ret
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	39 f0       	breq	.+14     	; 0x173c <_Z9NextDigith+0x1e>
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	39 f0       	breq	.+14     	; 0x1740 <_Z9NextDigith+0x22>
    1732:	08 95       	ret
	{
		case 1:
		PORTC &= ~(1<<PORTC3);
    1734:	43 98       	cbi	0x08, 3	; 8
		break;
    1736:	08 95       	ret
		case 2:
		PORTD &= ~(1<<PORTD6);
    1738:	5e 98       	cbi	0x0b, 6	; 11
		break;
    173a:	08 95       	ret
		case 3:
		PORTD &= ~(1<<PORTD7);
    173c:	5f 98       	cbi	0x0b, 7	; 11
		break;
    173e:	08 95       	ret
		case 4:
		PORTB &= ~(1<<PORTB1);
    1740:	29 98       	cbi	0x05, 1	; 5
    1742:	08 95       	ret

00001744 <__subsf3>:
    1744:	50 58       	subi	r21, 0x80	; 128

00001746 <__addsf3>:
    1746:	bb 27       	eor	r27, r27
    1748:	aa 27       	eor	r26, r26
    174a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__addsf3x>
    174e:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_round>
    1752:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_pscA>
    1756:	38 f0       	brcs	.+14     	; 0x1766 <__addsf3+0x20>
    1758:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__fp_pscB>
    175c:	20 f0       	brcs	.+8      	; 0x1766 <__addsf3+0x20>
    175e:	39 f4       	brne	.+14     	; 0x176e <__addsf3+0x28>
    1760:	9f 3f       	cpi	r25, 0xFF	; 255
    1762:	19 f4       	brne	.+6      	; 0x176a <__addsf3+0x24>
    1764:	26 f4       	brtc	.+8      	; 0x176e <__addsf3+0x28>
    1766:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_nan>
    176a:	0e f4       	brtc	.+2      	; 0x176e <__addsf3+0x28>
    176c:	e0 95       	com	r30
    176e:	e7 fb       	bst	r30, 7
    1770:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_inf>

00001774 <__addsf3x>:
    1774:	e9 2f       	mov	r30, r25
    1776:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fp_split3>
    177a:	58 f3       	brcs	.-42     	; 0x1752 <__addsf3+0xc>
    177c:	ba 17       	cp	r27, r26
    177e:	62 07       	cpc	r22, r18
    1780:	73 07       	cpc	r23, r19
    1782:	84 07       	cpc	r24, r20
    1784:	95 07       	cpc	r25, r21
    1786:	20 f0       	brcs	.+8      	; 0x1790 <__addsf3x+0x1c>
    1788:	79 f4       	brne	.+30     	; 0x17a8 <__addsf3x+0x34>
    178a:	a6 f5       	brtc	.+104    	; 0x17f4 <__addsf3x+0x80>
    178c:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_zero>
    1790:	0e f4       	brtc	.+2      	; 0x1794 <__addsf3x+0x20>
    1792:	e0 95       	com	r30
    1794:	0b 2e       	mov	r0, r27
    1796:	ba 2f       	mov	r27, r26
    1798:	a0 2d       	mov	r26, r0
    179a:	0b 01       	movw	r0, r22
    179c:	b9 01       	movw	r22, r18
    179e:	90 01       	movw	r18, r0
    17a0:	0c 01       	movw	r0, r24
    17a2:	ca 01       	movw	r24, r20
    17a4:	a0 01       	movw	r20, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	ff 27       	eor	r31, r31
    17aa:	59 1b       	sub	r21, r25
    17ac:	99 f0       	breq	.+38     	; 0x17d4 <__addsf3x+0x60>
    17ae:	59 3f       	cpi	r21, 0xF9	; 249
    17b0:	50 f4       	brcc	.+20     	; 0x17c6 <__addsf3x+0x52>
    17b2:	50 3e       	cpi	r21, 0xE0	; 224
    17b4:	68 f1       	brcs	.+90     	; 0x1810 <__addsf3x+0x9c>
    17b6:	1a 16       	cp	r1, r26
    17b8:	f0 40       	sbci	r31, 0x00	; 0
    17ba:	a2 2f       	mov	r26, r18
    17bc:	23 2f       	mov	r18, r19
    17be:	34 2f       	mov	r19, r20
    17c0:	44 27       	eor	r20, r20
    17c2:	58 5f       	subi	r21, 0xF8	; 248
    17c4:	f3 cf       	rjmp	.-26     	; 0x17ac <__addsf3x+0x38>
    17c6:	46 95       	lsr	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	a7 95       	ror	r26
    17ce:	f0 40       	sbci	r31, 0x00	; 0
    17d0:	53 95       	inc	r21
    17d2:	c9 f7       	brne	.-14     	; 0x17c6 <__addsf3x+0x52>
    17d4:	7e f4       	brtc	.+30     	; 0x17f4 <__addsf3x+0x80>
    17d6:	1f 16       	cp	r1, r31
    17d8:	ba 0b       	sbc	r27, r26
    17da:	62 0b       	sbc	r22, r18
    17dc:	73 0b       	sbc	r23, r19
    17de:	84 0b       	sbc	r24, r20
    17e0:	ba f0       	brmi	.+46     	; 0x1810 <__addsf3x+0x9c>
    17e2:	91 50       	subi	r25, 0x01	; 1
    17e4:	a1 f0       	breq	.+40     	; 0x180e <__addsf3x+0x9a>
    17e6:	ff 0f       	add	r31, r31
    17e8:	bb 1f       	adc	r27, r27
    17ea:	66 1f       	adc	r22, r22
    17ec:	77 1f       	adc	r23, r23
    17ee:	88 1f       	adc	r24, r24
    17f0:	c2 f7       	brpl	.-16     	; 0x17e2 <__addsf3x+0x6e>
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <__addsf3x+0x9c>
    17f4:	ba 0f       	add	r27, r26
    17f6:	62 1f       	adc	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	48 f4       	brcc	.+18     	; 0x1810 <__addsf3x+0x9c>
    17fe:	87 95       	ror	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f7 95       	ror	r31
    1808:	9e 3f       	cpi	r25, 0xFE	; 254
    180a:	08 f0       	brcs	.+2      	; 0x180e <__addsf3x+0x9a>
    180c:	b0 cf       	rjmp	.-160    	; 0x176e <__addsf3+0x28>
    180e:	93 95       	inc	r25
    1810:	88 0f       	add	r24, r24
    1812:	08 f0       	brcs	.+2      	; 0x1816 <__addsf3x+0xa2>
    1814:	99 27       	eor	r25, r25
    1816:	ee 0f       	add	r30, r30
    1818:	97 95       	ror	r25
    181a:	87 95       	ror	r24
    181c:	08 95       	ret

0000181e <__divsf3>:
    181e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__divsf3x>
    1822:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_round>
    1826:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__fp_pscB>
    182a:	58 f0       	brcs	.+22     	; 0x1842 <__divsf3+0x24>
    182c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_pscA>
    1830:	40 f0       	brcs	.+16     	; 0x1842 <__divsf3+0x24>
    1832:	29 f4       	brne	.+10     	; 0x183e <__divsf3+0x20>
    1834:	5f 3f       	cpi	r21, 0xFF	; 255
    1836:	29 f0       	breq	.+10     	; 0x1842 <__divsf3+0x24>
    1838:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_inf>
    183c:	51 11       	cpse	r21, r1
    183e:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_szero>
    1842:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_nan>

00001846 <__divsf3x>:
    1846:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fp_split3>
    184a:	68 f3       	brcs	.-38     	; 0x1826 <__divsf3+0x8>

0000184c <__divsf3_pse>:
    184c:	99 23       	and	r25, r25
    184e:	b1 f3       	breq	.-20     	; 0x183c <__divsf3+0x1e>
    1850:	55 23       	and	r21, r21
    1852:	91 f3       	breq	.-28     	; 0x1838 <__divsf3+0x1a>
    1854:	95 1b       	sub	r25, r21
    1856:	55 0b       	sbc	r21, r21
    1858:	bb 27       	eor	r27, r27
    185a:	aa 27       	eor	r26, r26
    185c:	62 17       	cp	r22, r18
    185e:	73 07       	cpc	r23, r19
    1860:	84 07       	cpc	r24, r20
    1862:	38 f0       	brcs	.+14     	; 0x1872 <__divsf3_pse+0x26>
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
    1868:	22 0f       	add	r18, r18
    186a:	33 1f       	adc	r19, r19
    186c:	44 1f       	adc	r20, r20
    186e:	aa 1f       	adc	r26, r26
    1870:	a9 f3       	breq	.-22     	; 0x185c <__divsf3_pse+0x10>
    1872:	35 d0       	rcall	.+106    	; 0x18de <__divsf3_pse+0x92>
    1874:	0e 2e       	mov	r0, r30
    1876:	3a f0       	brmi	.+14     	; 0x1886 <__divsf3_pse+0x3a>
    1878:	e0 e8       	ldi	r30, 0x80	; 128
    187a:	32 d0       	rcall	.+100    	; 0x18e0 <__divsf3_pse+0x94>
    187c:	91 50       	subi	r25, 0x01	; 1
    187e:	50 40       	sbci	r21, 0x00	; 0
    1880:	e6 95       	lsr	r30
    1882:	00 1c       	adc	r0, r0
    1884:	ca f7       	brpl	.-14     	; 0x1878 <__divsf3_pse+0x2c>
    1886:	2b d0       	rcall	.+86     	; 0x18de <__divsf3_pse+0x92>
    1888:	fe 2f       	mov	r31, r30
    188a:	29 d0       	rcall	.+82     	; 0x18de <__divsf3_pse+0x92>
    188c:	66 0f       	add	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	88 1f       	adc	r24, r24
    1892:	bb 1f       	adc	r27, r27
    1894:	26 17       	cp	r18, r22
    1896:	37 07       	cpc	r19, r23
    1898:	48 07       	cpc	r20, r24
    189a:	ab 07       	cpc	r26, r27
    189c:	b0 e8       	ldi	r27, 0x80	; 128
    189e:	09 f0       	breq	.+2      	; 0x18a2 <__divsf3_pse+0x56>
    18a0:	bb 0b       	sbc	r27, r27
    18a2:	80 2d       	mov	r24, r0
    18a4:	bf 01       	movw	r22, r30
    18a6:	ff 27       	eor	r31, r31
    18a8:	93 58       	subi	r25, 0x83	; 131
    18aa:	5f 4f       	sbci	r21, 0xFF	; 255
    18ac:	3a f0       	brmi	.+14     	; 0x18bc <__divsf3_pse+0x70>
    18ae:	9e 3f       	cpi	r25, 0xFE	; 254
    18b0:	51 05       	cpc	r21, r1
    18b2:	78 f0       	brcs	.+30     	; 0x18d2 <__divsf3_pse+0x86>
    18b4:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_inf>
    18b8:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_szero>
    18bc:	5f 3f       	cpi	r21, 0xFF	; 255
    18be:	e4 f3       	brlt	.-8      	; 0x18b8 <__divsf3_pse+0x6c>
    18c0:	98 3e       	cpi	r25, 0xE8	; 232
    18c2:	d4 f3       	brlt	.-12     	; 0x18b8 <__divsf3_pse+0x6c>
    18c4:	86 95       	lsr	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f7 95       	ror	r31
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__divsf3_pse+0x78>
    18d2:	88 0f       	add	r24, r24
    18d4:	91 1d       	adc	r25, r1
    18d6:	96 95       	lsr	r25
    18d8:	87 95       	ror	r24
    18da:	97 f9       	bld	r25, 7
    18dc:	08 95       	ret
    18de:	e1 e0       	ldi	r30, 0x01	; 1
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	bb 1f       	adc	r27, r27
    18e8:	62 17       	cp	r22, r18
    18ea:	73 07       	cpc	r23, r19
    18ec:	84 07       	cpc	r24, r20
    18ee:	ba 07       	cpc	r27, r26
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <__divsf3_pse+0xae>
    18f2:	62 1b       	sub	r22, r18
    18f4:	73 0b       	sbc	r23, r19
    18f6:	84 0b       	sbc	r24, r20
    18f8:	ba 0b       	sbc	r27, r26
    18fa:	ee 1f       	adc	r30, r30
    18fc:	88 f7       	brcc	.-30     	; 0x18e0 <__divsf3_pse+0x94>
    18fe:	e0 95       	com	r30
    1900:	08 95       	ret

00001902 <__fixsfsi>:
    1902:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fixunssfsi>
    1906:	68 94       	set
    1908:	b1 11       	cpse	r27, r1
    190a:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_szero>
    190e:	08 95       	ret

00001910 <__fixunssfsi>:
    1910:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__fp_splitA>
    1914:	88 f0       	brcs	.+34     	; 0x1938 <__fixunssfsi+0x28>
    1916:	9f 57       	subi	r25, 0x7F	; 127
    1918:	98 f0       	brcs	.+38     	; 0x1940 <__fixunssfsi+0x30>
    191a:	b9 2f       	mov	r27, r25
    191c:	99 27       	eor	r25, r25
    191e:	b7 51       	subi	r27, 0x17	; 23
    1920:	b0 f0       	brcs	.+44     	; 0x194e <__fixunssfsi+0x3e>
    1922:	e1 f0       	breq	.+56     	; 0x195c <__fixunssfsi+0x4c>
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	1a f0       	brmi	.+6      	; 0x1934 <__fixunssfsi+0x24>
    192e:	ba 95       	dec	r27
    1930:	c9 f7       	brne	.-14     	; 0x1924 <__fixunssfsi+0x14>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <__fixunssfsi+0x4c>
    1934:	b1 30       	cpi	r27, 0x01	; 1
    1936:	91 f0       	breq	.+36     	; 0x195c <__fixunssfsi+0x4c>
    1938:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__fp_zero>
    193c:	b1 e0       	ldi	r27, 0x01	; 1
    193e:	08 95       	ret
    1940:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_zero>
    1944:	67 2f       	mov	r22, r23
    1946:	78 2f       	mov	r23, r24
    1948:	88 27       	eor	r24, r24
    194a:	b8 5f       	subi	r27, 0xF8	; 248
    194c:	39 f0       	breq	.+14     	; 0x195c <__fixunssfsi+0x4c>
    194e:	b9 3f       	cpi	r27, 0xF9	; 249
    1950:	cc f3       	brlt	.-14     	; 0x1944 <__fixunssfsi+0x34>
    1952:	86 95       	lsr	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b3 95       	inc	r27
    195a:	d9 f7       	brne	.-10     	; 0x1952 <__fixunssfsi+0x42>
    195c:	3e f4       	brtc	.+14     	; 0x196c <__fixunssfsi+0x5c>
    195e:	90 95       	com	r25
    1960:	80 95       	com	r24
    1962:	70 95       	com	r23
    1964:	61 95       	neg	r22
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	8f 4f       	sbci	r24, 0xFF	; 255
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	08 95       	ret

0000196e <__floatunsisf>:
    196e:	e8 94       	clt
    1970:	09 c0       	rjmp	.+18     	; 0x1984 <__floatsisf+0x12>

00001972 <__floatsisf>:
    1972:	97 fb       	bst	r25, 7
    1974:	3e f4       	brtc	.+14     	; 0x1984 <__floatsisf+0x12>
    1976:	90 95       	com	r25
    1978:	80 95       	com	r24
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	99 23       	and	r25, r25
    1986:	a9 f0       	breq	.+42     	; 0x19b2 <__floatsisf+0x40>
    1988:	f9 2f       	mov	r31, r25
    198a:	96 e9       	ldi	r25, 0x96	; 150
    198c:	bb 27       	eor	r27, r27
    198e:	93 95       	inc	r25
    1990:	f6 95       	lsr	r31
    1992:	87 95       	ror	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	b7 95       	ror	r27
    199a:	f1 11       	cpse	r31, r1
    199c:	f8 cf       	rjmp	.-16     	; 0x198e <__floatsisf+0x1c>
    199e:	fa f4       	brpl	.+62     	; 0x19de <__floatsisf+0x6c>
    19a0:	bb 0f       	add	r27, r27
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <__floatsisf+0x36>
    19a4:	60 ff       	sbrs	r22, 0
    19a6:	1b c0       	rjmp	.+54     	; 0x19de <__floatsisf+0x6c>
    19a8:	6f 5f       	subi	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <__floatsisf+0x6c>
    19b2:	88 23       	and	r24, r24
    19b4:	11 f0       	breq	.+4      	; 0x19ba <__floatsisf+0x48>
    19b6:	96 e9       	ldi	r25, 0x96	; 150
    19b8:	11 c0       	rjmp	.+34     	; 0x19dc <__floatsisf+0x6a>
    19ba:	77 23       	and	r23, r23
    19bc:	21 f0       	breq	.+8      	; 0x19c6 <__floatsisf+0x54>
    19be:	9e e8       	ldi	r25, 0x8E	; 142
    19c0:	87 2f       	mov	r24, r23
    19c2:	76 2f       	mov	r23, r22
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <__floatsisf+0x5e>
    19c6:	66 23       	and	r22, r22
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <__floatsisf+0x74>
    19ca:	96 e8       	ldi	r25, 0x86	; 134
    19cc:	86 2f       	mov	r24, r22
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	2a f0       	brmi	.+10     	; 0x19de <__floatsisf+0x6c>
    19d4:	9a 95       	dec	r25
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	da f7       	brpl	.-10     	; 0x19d4 <__floatsisf+0x62>
    19de:	88 0f       	add	r24, r24
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	97 f9       	bld	r25, 7
    19e6:	08 95       	ret

000019e8 <__fp_inf>:
    19e8:	97 f9       	bld	r25, 7
    19ea:	9f 67       	ori	r25, 0x7F	; 127
    19ec:	80 e8       	ldi	r24, 0x80	; 128
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	08 95       	ret

000019f4 <__fp_nan>:
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	80 ec       	ldi	r24, 0xC0	; 192
    19f8:	08 95       	ret

000019fa <__fp_pscA>:
    19fa:	00 24       	eor	r0, r0
    19fc:	0a 94       	dec	r0
    19fe:	16 16       	cp	r1, r22
    1a00:	17 06       	cpc	r1, r23
    1a02:	18 06       	cpc	r1, r24
    1a04:	09 06       	cpc	r0, r25
    1a06:	08 95       	ret

00001a08 <__fp_pscB>:
    1a08:	00 24       	eor	r0, r0
    1a0a:	0a 94       	dec	r0
    1a0c:	12 16       	cp	r1, r18
    1a0e:	13 06       	cpc	r1, r19
    1a10:	14 06       	cpc	r1, r20
    1a12:	05 06       	cpc	r0, r21
    1a14:	08 95       	ret

00001a16 <__fp_round>:
    1a16:	09 2e       	mov	r0, r25
    1a18:	03 94       	inc	r0
    1a1a:	00 0c       	add	r0, r0
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__fp_round+0xc>
    1a1e:	88 23       	and	r24, r24
    1a20:	52 f0       	brmi	.+20     	; 0x1a36 <__fp_round+0x20>
    1a22:	bb 0f       	add	r27, r27
    1a24:	40 f4       	brcc	.+16     	; 0x1a36 <__fp_round+0x20>
    1a26:	bf 2b       	or	r27, r31
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__fp_round+0x18>
    1a2a:	60 ff       	sbrs	r22, 0
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <__fp_round+0x20>
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__fp_split3>:
    1a38:	57 fd       	sbrc	r21, 7
    1a3a:	90 58       	subi	r25, 0x80	; 128
    1a3c:	44 0f       	add	r20, r20
    1a3e:	55 1f       	adc	r21, r21
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <__fp_splitA+0x10>
    1a42:	5f 3f       	cpi	r21, 0xFF	; 255
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <__fp_splitA+0x1a>
    1a46:	47 95       	ror	r20

00001a48 <__fp_splitA>:
    1a48:	88 0f       	add	r24, r24
    1a4a:	97 fb       	bst	r25, 7
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <__fp_splitA+0x20>
    1a50:	9f 3f       	cpi	r25, 0xFF	; 255
    1a52:	79 f0       	breq	.+30     	; 0x1a72 <__fp_splitA+0x2a>
    1a54:	87 95       	ror	r24
    1a56:	08 95       	ret
    1a58:	12 16       	cp	r1, r18
    1a5a:	13 06       	cpc	r1, r19
    1a5c:	14 06       	cpc	r1, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	f2 cf       	rjmp	.-28     	; 0x1a46 <__fp_split3+0xe>
    1a62:	46 95       	lsr	r20
    1a64:	f1 df       	rcall	.-30     	; 0x1a48 <__fp_splitA>
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <__fp_splitA+0x30>
    1a68:	16 16       	cp	r1, r22
    1a6a:	17 06       	cpc	r1, r23
    1a6c:	18 06       	cpc	r1, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	f1 cf       	rjmp	.-30     	; 0x1a54 <__fp_splitA+0xc>
    1a72:	86 95       	lsr	r24
    1a74:	71 05       	cpc	r23, r1
    1a76:	61 05       	cpc	r22, r1
    1a78:	08 94       	sec
    1a7a:	08 95       	ret

00001a7c <__fp_zero>:
    1a7c:	e8 94       	clt

00001a7e <__fp_szero>:
    1a7e:	bb 27       	eor	r27, r27
    1a80:	66 27       	eor	r22, r22
    1a82:	77 27       	eor	r23, r23
    1a84:	cb 01       	movw	r24, r22
    1a86:	97 f9       	bld	r25, 7
    1a88:	08 95       	ret

00001a8a <__mulsf3>:
    1a8a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__mulsf3x>
    1a8e:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_round>
    1a92:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_pscA>
    1a96:	38 f0       	brcs	.+14     	; 0x1aa6 <__mulsf3+0x1c>
    1a98:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__fp_pscB>
    1a9c:	20 f0       	brcs	.+8      	; 0x1aa6 <__mulsf3+0x1c>
    1a9e:	95 23       	and	r25, r21
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <__mulsf3+0x1c>
    1aa2:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_inf>
    1aa6:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__fp_nan>
    1aaa:	11 24       	eor	r1, r1
    1aac:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_szero>

00001ab0 <__mulsf3x>:
    1ab0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fp_split3>
    1ab4:	70 f3       	brcs	.-36     	; 0x1a92 <__mulsf3+0x8>

00001ab6 <__mulsf3_pse>:
    1ab6:	95 9f       	mul	r25, r21
    1ab8:	c1 f3       	breq	.-16     	; 0x1aaa <__mulsf3+0x20>
    1aba:	95 0f       	add	r25, r21
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	55 1f       	adc	r21, r21
    1ac0:	62 9f       	mul	r22, r18
    1ac2:	f0 01       	movw	r30, r0
    1ac4:	72 9f       	mul	r23, r18
    1ac6:	bb 27       	eor	r27, r27
    1ac8:	f0 0d       	add	r31, r0
    1aca:	b1 1d       	adc	r27, r1
    1acc:	63 9f       	mul	r22, r19
    1ace:	aa 27       	eor	r26, r26
    1ad0:	f0 0d       	add	r31, r0
    1ad2:	b1 1d       	adc	r27, r1
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	64 9f       	mul	r22, r20
    1ad8:	66 27       	eor	r22, r22
    1ada:	b0 0d       	add	r27, r0
    1adc:	a1 1d       	adc	r26, r1
    1ade:	66 1f       	adc	r22, r22
    1ae0:	82 9f       	mul	r24, r18
    1ae2:	22 27       	eor	r18, r18
    1ae4:	b0 0d       	add	r27, r0
    1ae6:	a1 1d       	adc	r26, r1
    1ae8:	62 1f       	adc	r22, r18
    1aea:	73 9f       	mul	r23, r19
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	62 1f       	adc	r22, r18
    1af2:	83 9f       	mul	r24, r19
    1af4:	a0 0d       	add	r26, r0
    1af6:	61 1d       	adc	r22, r1
    1af8:	22 1f       	adc	r18, r18
    1afa:	74 9f       	mul	r23, r20
    1afc:	33 27       	eor	r19, r19
    1afe:	a0 0d       	add	r26, r0
    1b00:	61 1d       	adc	r22, r1
    1b02:	23 1f       	adc	r18, r19
    1b04:	84 9f       	mul	r24, r20
    1b06:	60 0d       	add	r22, r0
    1b08:	21 1d       	adc	r18, r1
    1b0a:	82 2f       	mov	r24, r18
    1b0c:	76 2f       	mov	r23, r22
    1b0e:	6a 2f       	mov	r22, r26
    1b10:	11 24       	eor	r1, r1
    1b12:	9f 57       	subi	r25, 0x7F	; 127
    1b14:	50 40       	sbci	r21, 0x00	; 0
    1b16:	9a f0       	brmi	.+38     	; 0x1b3e <__mulsf3_pse+0x88>
    1b18:	f1 f0       	breq	.+60     	; 0x1b56 <__mulsf3_pse+0xa0>
    1b1a:	88 23       	and	r24, r24
    1b1c:	4a f0       	brmi	.+18     	; 0x1b30 <__mulsf3_pse+0x7a>
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	bb 1f       	adc	r27, r27
    1b24:	66 1f       	adc	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	91 50       	subi	r25, 0x01	; 1
    1b2c:	50 40       	sbci	r21, 0x00	; 0
    1b2e:	a9 f7       	brne	.-22     	; 0x1b1a <__mulsf3_pse+0x64>
    1b30:	9e 3f       	cpi	r25, 0xFE	; 254
    1b32:	51 05       	cpc	r21, r1
    1b34:	80 f0       	brcs	.+32     	; 0x1b56 <__mulsf3_pse+0xa0>
    1b36:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_inf>
    1b3a:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__fp_szero>
    1b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b40:	e4 f3       	brlt	.-8      	; 0x1b3a <__mulsf3_pse+0x84>
    1b42:	98 3e       	cpi	r25, 0xE8	; 232
    1b44:	d4 f3       	brlt	.-12     	; 0x1b3a <__mulsf3_pse+0x84>
    1b46:	86 95       	lsr	r24
    1b48:	77 95       	ror	r23
    1b4a:	67 95       	ror	r22
    1b4c:	b7 95       	ror	r27
    1b4e:	f7 95       	ror	r31
    1b50:	e7 95       	ror	r30
    1b52:	9f 5f       	subi	r25, 0xFF	; 255
    1b54:	c1 f7       	brne	.-16     	; 0x1b46 <__mulsf3_pse+0x90>
    1b56:	fe 2b       	or	r31, r30
    1b58:	88 0f       	add	r24, r24
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	96 95       	lsr	r25
    1b5e:	87 95       	ror	r24
    1b60:	97 f9       	bld	r25, 7
    1b62:	08 95       	ret

00001b64 <__divmodhi4>:
    1b64:	97 fb       	bst	r25, 7
    1b66:	07 2e       	mov	r0, r23
    1b68:	16 f4       	brtc	.+4      	; 0x1b6e <__divmodhi4+0xa>
    1b6a:	00 94       	com	r0
    1b6c:	07 d0       	rcall	.+14     	; 0x1b7c <__divmodhi4_neg1>
    1b6e:	77 fd       	sbrc	r23, 7
    1b70:	09 d0       	rcall	.+18     	; 0x1b84 <__divmodhi4_neg2>
    1b72:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
    1b76:	07 fc       	sbrc	r0, 7
    1b78:	05 d0       	rcall	.+10     	; 0x1b84 <__divmodhi4_neg2>
    1b7a:	3e f4       	brtc	.+14     	; 0x1b8a <__divmodhi4_exit>

00001b7c <__divmodhi4_neg1>:
    1b7c:	90 95       	com	r25
    1b7e:	81 95       	neg	r24
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	08 95       	ret

00001b84 <__divmodhi4_neg2>:
    1b84:	70 95       	com	r23
    1b86:	61 95       	neg	r22
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255

00001b8a <__divmodhi4_exit>:
    1b8a:	08 95       	ret

00001b8c <__tablejump2__>:
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	05 90       	lpm	r0, Z+
    1b92:	f4 91       	lpm	r31, Z
    1b94:	e0 2d       	mov	r30, r0
    1b96:	09 94       	ijmp

00001b98 <__umulhisi3>:
    1b98:	a2 9f       	mul	r26, r18
    1b9a:	b0 01       	movw	r22, r0
    1b9c:	b3 9f       	mul	r27, r19
    1b9e:	c0 01       	movw	r24, r0
    1ba0:	a3 9f       	mul	r26, r19
    1ba2:	70 0d       	add	r23, r0
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	11 24       	eor	r1, r1
    1ba8:	91 1d       	adc	r25, r1
    1baa:	b2 9f       	mul	r27, r18
    1bac:	70 0d       	add	r23, r0
    1bae:	81 1d       	adc	r24, r1
    1bb0:	11 24       	eor	r1, r1
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	08 95       	ret

00001bb6 <__udivmodhi4>:
    1bb6:	aa 1b       	sub	r26, r26
    1bb8:	bb 1b       	sub	r27, r27
    1bba:	51 e1       	ldi	r21, 0x11	; 17
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <__udivmodhi4_ep>

00001bbe <__udivmodhi4_loop>:
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	a6 17       	cp	r26, r22
    1bc4:	b7 07       	cpc	r27, r23
    1bc6:	10 f0       	brcs	.+4      	; 0x1bcc <__udivmodhi4_ep>
    1bc8:	a6 1b       	sub	r26, r22
    1bca:	b7 0b       	sbc	r27, r23

00001bcc <__udivmodhi4_ep>:
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	5a 95       	dec	r21
    1bd2:	a9 f7       	brne	.-22     	; 0x1bbe <__udivmodhi4_loop>
    1bd4:	80 95       	com	r24
    1bd6:	90 95       	com	r25
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	08 95       	ret

00001bde <_exit>:
    1bde:	f8 94       	cli

00001be0 <__stop_program>:
    1be0:	ff cf       	rjmp	.-2      	; 0x1be0 <__stop_program>
